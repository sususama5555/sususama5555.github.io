<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis进阶之高级特性</title>
    <url>/2020/12/06/redis-advanced/</url>
    <content><![CDATA[<blockquote>
<h2 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h2></blockquote>
<p>之前已经有两篇文章讲到Redis的<strong><code>数据类型</code></strong>和<strong><code>使用场景</code></strong>，本文将继续学习Redis更多的<strong><code>高级特性</code></strong>，例如<strong><code>持久化</code></strong>、<strong><code>事务与事件</code></strong>、<strong><code>主从及哨兵</code></strong>等。</p>
<p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>
<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>
<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>
<a id="more"></a>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>可以存储的值</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>STRING</td>
<td>字符串、整数或者浮点数</td>
<td>对整个字符串或者字符串的其中一部分执行操作<br> 对整数和浮点数执行自增或者自减操作</td>
</tr>
<tr>
<td>LIST</td>
<td>列表</td>
<td>从两端压入或者弹出元素 <br> 对单个或者多个元素进行修剪，<br> 只保留一个范围内的元素</td>
</tr>
<tr>
<td>SET</td>
<td>无序集合</td>
<td>添加、获取、移除单个元素<br> 检查一个元素是否存在于集合中<br> 计算交集、并集、差集<br> 从集合里面随机获取元素</td>
</tr>
<tr>
<td>HASH</td>
<td>包含键值对的无序散列表</td>
<td>添加、获取、移除单个键值对<br> 获取所有键值对<br> 检查某个键是否存在</td>
</tr>
<tr>
<td>ZSET</td>
<td>有序集合</td>
<td>添加、获取、删除元素<br> 根据分值范围或者成员来获取元素<br> 计算一个键的排名</td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/" target="_blank" rel="noopener">What Redis data structures look like</a></p>
</blockquote>
<h3 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h3><p><a href="https://camo.githubusercontent.com/eeacf69133d193594c5c8b0e5989f49f513612da98c7278fb4187bec26ad082f/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f36303139623264622d626333652d343430382d623664382d3936303235663434383164362e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/eeacf69133d193594c5c8b0e5989f49f513612da98c7278fb4187bec26ad082f/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f36303139623264622d626333652d343430382d623664382d3936303235663434383164362e706e67" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; set hello world</span><br><span class="line">OK</span><br><span class="line">&gt; get hello</span><br><span class="line">&quot;world&quot;</span><br><span class="line">&gt; del hello</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; get hello</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h3 id="LIST"><a href="#LIST" class="headerlink" title="LIST"></a>LIST</h3><p><a href="https://camo.githubusercontent.com/da6116e5709a2320811ad406f4ec169b96ebbe1a54ebee9bdffcf0bf01c3122a/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66623332373631312d376532622d346632662d396635622d3338353932643430386630372e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/da6116e5709a2320811ad406f4ec169b96ebbe1a54ebee9bdffcf0bf01c3122a/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66623332373631312d376532622d346632662d396635622d3338353932643430386630372e706e67" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; rpush list-key item</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; rpush list-key item2</span><br><span class="line">(integer) 2</span><br><span class="line">&gt; rpush list-key item</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">&gt; lrange list-key 0 -1</span><br><span class="line">1) &quot;item&quot;</span><br><span class="line">2) &quot;item2&quot;</span><br><span class="line">3) &quot;item&quot;</span><br><span class="line"></span><br><span class="line">&gt; lindex list-key 1</span><br><span class="line">&quot;item2&quot;</span><br><span class="line"></span><br><span class="line">&gt; lpop list-key</span><br><span class="line">&quot;item&quot;</span><br><span class="line"></span><br><span class="line">&gt; lrange list-key 0 -1</span><br><span class="line">1) &quot;item2&quot;</span><br><span class="line">2) &quot;item&quot;</span><br></pre></td></tr></table></figure>

<h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><p><a href="https://camo.githubusercontent.com/c0f9b215227bb4277e3240ad451e6027f081ffc712b92039f788a73eb472f3ab/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f63643566626366662d336633352d343361362d386666612d3038326139336365306630652e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/c0f9b215227bb4277e3240ad451e6027f081ffc712b92039f788a73eb472f3ab/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f63643566626366662d336633352d343361362d386666612d3038326139336365306630652e706e67" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; sadd set-key item</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; sadd set-key item2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; sadd set-key item3</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; sadd set-key item</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; smembers set-key</span><br><span class="line">1) &quot;item&quot;</span><br><span class="line">2) &quot;item2&quot;</span><br><span class="line">3) &quot;item3&quot;</span><br><span class="line"></span><br><span class="line">&gt; sismember set-key item4</span><br><span class="line">(integer) 0</span><br><span class="line">&gt; sismember set-key item</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">&gt; srem set-key item2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; srem set-key item2</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; smembers set-key</span><br><span class="line">1) &quot;item&quot;</span><br><span class="line">2) &quot;item3&quot;</span><br></pre></td></tr></table></figure>

<h3 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h3><p><a href="https://camo.githubusercontent.com/faa71b8fda769050f18f16904ac49e0a62c3e815d14fe36283404457c1fe3391/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37626432303261372d393364342d346633612d613837382d6166363861653235353339612e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/faa71b8fda769050f18f16904ac49e0a62c3e815d14fe36283404457c1fe3391/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37626432303261372d393364342d346633612d613837382d6166363861653235353339612e706e67" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hset hash-key sub-key1 value1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hset hash-key sub-key2 value2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hset hash-key sub-key1 value1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; hgetall hash-key</span><br><span class="line">1) &quot;sub-key1&quot;</span><br><span class="line">2) &quot;value1&quot;</span><br><span class="line">3) &quot;sub-key2&quot;</span><br><span class="line">4) &quot;value2&quot;</span><br><span class="line"></span><br><span class="line">&gt; hdel hash-key sub-key2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hdel hash-key sub-key2</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; hget hash-key sub-key1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line"></span><br><span class="line">&gt; hgetall hash-key</span><br><span class="line">1) &quot;sub-key1&quot;</span><br><span class="line">2) &quot;value1&quot;</span><br></pre></td></tr></table></figure>

<h3 id="ZSET"><a href="#ZSET" class="headerlink" title="ZSET"></a>ZSET</h3><p><a href="https://camo.githubusercontent.com/ff132b1a36d24a44bb9d6960ec06733533751f8b2285422fbbabe483919b03af/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f31323032623264362d393436392d343235312d626434372d6361363033346662363131362e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/ff132b1a36d24a44bb9d6960ec06733533751f8b2285422fbbabe483919b03af/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f31323032623264362d393436392d343235312d626434372d6361363033346662363131362e706e67" alt="img"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; zadd zset-key 728 member1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zadd zset-key 982 member0</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zadd zset-key 982 member0</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; zrange zset-key 0 -1 withscores</span><br><span class="line">1) &quot;member1&quot;</span><br><span class="line">2) &quot;728&quot;</span><br><span class="line">3) &quot;member0&quot;</span><br><span class="line">4) &quot;982&quot;</span><br><span class="line"></span><br><span class="line">&gt; zrangebyscore zset-key 0 800 withscores</span><br><span class="line">1) &quot;member1&quot;</span><br><span class="line">2) &quot;728&quot;</span><br><span class="line"></span><br><span class="line">&gt; zrem zset-key member1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; zrem zset-key member1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; zrange zset-key 0 -1 withscores</span><br><span class="line">1) &quot;member0&quot;</span><br><span class="line">2) &quot;982&quot;</span><br></pre></td></tr></table></figure>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>dictht 是一个散列表结构，使用拉链法解决哈希冲突。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* This is our hash table structure. Every dictionary has two of this as we</span><br><span class="line"> * implement incremental rehashing, for the old to the new table. *&#x2F;</span><br><span class="line">typedef struct dictht &#123;</span><br><span class="line">    dictEntry **table;</span><br><span class="line">    unsigned long size;</span><br><span class="line">    unsigned long sizemask;</span><br><span class="line">    unsigned long used;</span><br><span class="line">&#125; dictht;</span><br><span class="line">typedef struct dictEntry &#123;</span><br><span class="line">    void *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    struct dictEntry *next;</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure>

<p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    dictType *type;</span><br><span class="line">    void *privdata;</span><br><span class="line">    dictht ht[2];</span><br><span class="line">    long rehashidx; &#x2F;* rehashing not in progress if rehashidx &#x3D;&#x3D; -1 *&#x2F;</span><br><span class="line">    unsigned long iterators; &#x2F;* number of iterators currently running *&#x2F;</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure>

<p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。</p>
<p>渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。</p>
<p>在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。</p>
<p>采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* Performs N steps of incremental rehashing. Returns 1 if there are still</span><br><span class="line"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span><br><span class="line"> *</span><br><span class="line"> * Note that a rehashing step consists in moving a bucket (that may have more</span><br><span class="line"> * than one key as we use chaining) from the old to the new hash table, however</span><br><span class="line"> * since part of the hash table may be composed of empty spaces, it is not</span><br><span class="line"> * guaranteed that this function will rehash even a single bucket, since it</span><br><span class="line"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span><br><span class="line"> * work it does would be unbound and the function may block for a long time. *&#x2F;</span><br><span class="line">int dictRehash(dict *d, int n) &#123;</span><br><span class="line">    int empty_visits &#x3D; n * 10; &#x2F;* Max number of empty buckets to visit. *&#x2F;</span><br><span class="line">    if (!dictIsRehashing(d)) return 0;</span><br><span class="line"></span><br><span class="line">    while (n-- &amp;&amp; d-&gt;ht[0].used !&#x3D; 0) &#123;</span><br><span class="line">        dictEntry *de, *nextde;</span><br><span class="line"></span><br><span class="line">        &#x2F;* Note that rehashidx can&#39;t overflow as we are sure there are more</span><br><span class="line">         * elements because ht[0].used !&#x3D; 0 *&#x2F;</span><br><span class="line">        assert(d-&gt;ht[0].size &gt; (unsigned long) d-&gt;rehashidx);</span><br><span class="line">        while (d-&gt;ht[0].table[d-&gt;rehashidx] &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">            d-&gt;rehashidx++;</span><br><span class="line">            if (--empty_visits &#x3D;&#x3D; 0) return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        de &#x3D; d-&gt;ht[0].table[d-&gt;rehashidx];</span><br><span class="line">        &#x2F;* Move all the keys in this bucket from the old to the new hash HT *&#x2F;</span><br><span class="line">        while (de) &#123;</span><br><span class="line">            uint64_t h;</span><br><span class="line"></span><br><span class="line">            nextde &#x3D; de-&gt;next;</span><br><span class="line">            &#x2F;* Get the index in the new hash table *&#x2F;</span><br><span class="line">            h &#x3D; dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[1].sizemask;</span><br><span class="line">            de-&gt;next &#x3D; d-&gt;ht[1].table[h];</span><br><span class="line">            d-&gt;ht[1].table[h] &#x3D; de;</span><br><span class="line">            d-&gt;ht[0].used--;</span><br><span class="line">            d-&gt;ht[1].used++;</span><br><span class="line">            de &#x3D; nextde;</span><br><span class="line">        &#125;</span><br><span class="line">        d-&gt;ht[0].table[d-&gt;rehashidx] &#x3D; NULL;</span><br><span class="line">        d-&gt;rehashidx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* Check if we already rehashed the whole table... *&#x2F;</span><br><span class="line">    if (d-&gt;ht[0].used &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        zfree(d-&gt;ht[0].table);</span><br><span class="line">        d-&gt;ht[0] &#x3D; d-&gt;ht[1];</span><br><span class="line">        _dictReset(&amp;d-&gt;ht[1]);</span><br><span class="line">        d-&gt;rehashidx &#x3D; -1;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* More to rehash... *&#x2F;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><p>是有序集合的底层实现之一。</p>
<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>
<p><a href="https://camo.githubusercontent.com/db0608e3c815e8ae059eb769b5ad96cd375edb9be9d3f5e9a501f50bea030fc5/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f62656261363132652d646335622d346663322d383639642d3062323334303861633930612e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/db0608e3c815e8ae059eb769b5ad96cd375edb9be9d3f5e9a501f50bea030fc5/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f62656261363132652d646335622d346663322d383639642d3062323334303861633930612e706e67" alt="img"></a></p>
<p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。</p>
<p><a href="https://camo.githubusercontent.com/90f439265419d783c6059075bc02be6dd7056356a0e9a88f412790214a70e10d/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f30656133376565322d633232342d346337392d623839352d6531333163363830356334302e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/90f439265419d783c6059075bc02be6dd7056356a0e9a88f412790214a70e10d/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f30656133376565322d633232342d346337392d623839352d6531333163363830356334302e706e67" alt="img"></a></p>
<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>
<ul>
<li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li>
<li>更容易实现；</li>
<li>支持无锁操作。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>
<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>
<h3 id="查找表"><a href="#查找表" class="headerlink" title="查找表"></a>查找表</h3><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>
<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>
<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>
<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>
<h3 id="会话缓存"><a href="#会话缓存" class="headerlink" title="会话缓存"></a>会话缓存</h3><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>
<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>
<h3 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h3><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>
<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>
<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>
<h2 id="Redis-与-Memcached"><a href="#Redis-与-Memcached" class="headerlink" title="Redis 与 Memcached"></a>Redis 与 Memcached</h2><p>两者都是非关系型内存键值数据库，主要有以下不同：</p>
<h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><p>Memcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。</p>
<h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>Redis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>Memcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</p>
<p>Redis Cluster 实现了分布式的支持。</p>
<h3 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h3><ul>
<li>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</li>
<li>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</li>
</ul>
<h2 id="键的过期时间"><a href="#键的过期时间" class="headerlink" title="键的过期时间"></a>键的过期时间</h2><p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>
<p>对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。</p>
<h2 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h2><p>可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。</p>
<p>Redis 具体有 6 种淘汰策略：</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>volatile-lru</td>
<td>从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>
</tr>
<tr>
<td>volatile-random</td>
<td>从已设置过期时间的数据集中任意选择数据淘汰</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>从所有数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>从所有数据集中任意选择数据进行淘汰</td>
</tr>
<tr>
<td>noeviction</td>
<td>禁止驱逐数据</td>
</tr>
</tbody></table>
<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p>
<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p>
<p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>
<h3 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h3><p>将某个时间点的所有数据都存放到硬盘上。</p>
<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>
<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>
<p>如果数据量很大，保存快照的时间会很长。</p>
<h3 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h3><p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>
<p>使用 AOF 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>同步频率</th>
</tr>
</thead>
<tbody><tr>
<td>always</td>
<td>每个写命令都同步</td>
</tr>
<tr>
<td>everysec</td>
<td>每秒同步一次</td>
</tr>
<tr>
<td>no</td>
<td>让操作系统来决定何时同步</td>
</tr>
</tbody></table>
<ul>
<li>always 选项会严重减低服务器的性能；</li>
<li>everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li>
<li>no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li>
</ul>
<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>
<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>
<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>Redis 服务器是一个事件驱动程序。</p>
<h3 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h3><p>服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。</p>
<p>Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</p>
<p><a href="https://camo.githubusercontent.com/9c5ed964c076327df03dc3621415b1c932abed764c9a28fef63103809ec35d3f/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39656138366562352d303030612d343238312d623934382d3762353637626436663164382e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/9c5ed964c076327df03dc3621415b1c932abed764c9a28fef63103809ec35d3f/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39656138366562352d303030612d343238312d623934382d3762353637626436663164382e706e67" alt="img"></a></p>
<h3 id="时间事件"><a href="#时间事件" class="headerlink" title="时间事件"></a>时间事件</h3><p>服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</p>
<p>时间事件又分为：</p>
<ul>
<li>定时事件：是让一段程序在指定的时间之内执行一次；</li>
<li>周期性事件：是让一段程序每隔指定时间就执行一次。</li>
</ul>
<p>Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。</p>
<h3 id="事件的调度与执行"><a href="#事件的调度与执行" class="headerlink" title="事件的调度与执行"></a>事件的调度与执行</h3><p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p>
<p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def aeProcessEvents():</span><br><span class="line">    # 获取到达时间离当前时间最接近的时间事件</span><br><span class="line">    time_event &#x3D; aeSearchNearestTimer()</span><br><span class="line">    # 计算最接近的时间事件距离到达还有多少毫秒</span><br><span class="line">    remaind_ms &#x3D; time_event.when - unix_ts_now()</span><br><span class="line">    # 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0</span><br><span class="line">    if remaind_ms &lt; 0:</span><br><span class="line">        remaind_ms &#x3D; 0</span><br><span class="line">    # 根据 remaind_ms 的值，创建 timeval</span><br><span class="line">    timeval &#x3D; create_timeval_with_ms(remaind_ms)</span><br><span class="line">    # 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定</span><br><span class="line">    aeApiPoll(timeval)</span><br><span class="line">    # 处理所有已产生的文件事件</span><br><span class="line">    procesFileEvents()</span><br><span class="line">    # 处理所有已到达的时间事件</span><br><span class="line">    processTimeEvents()</span><br></pre></td></tr></table></figure>

<p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    # 初始化服务器</span><br><span class="line">    init_server()</span><br><span class="line">    # 一直处理事件，直到服务器关闭为止</span><br><span class="line">    while server_is_not_shutdown():</span><br><span class="line">        aeProcessEvents()</span><br><span class="line">    # 服务器关闭，执行清理操作</span><br><span class="line">    clean_server()</span><br></pre></td></tr></table></figure>

<p>从事件处理的角度来看，服务器运行流程如下：</p>
<p><a href="https://camo.githubusercontent.com/8f753d2b9273df71bddd9b854d7f232e8d698357efdb9ce0bfcc2854f0d4ac7b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f63306139666139312d646132652d343839322d386339662d3830323036613666373034372e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/8f753d2b9273df71bddd9b854d7f232e8d698357efdb9ce0bfcc2854f0d4ac7b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f63306139666139312d646132652d343839322d386339662d3830323036613666373034372e706e67" alt="img"></a></p>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>
<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>
<h3 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h3><ol>
<li>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</li>
<li>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</li>
<li>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</li>
</ol>
<h3 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h3><p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>
<p><a href="https://camo.githubusercontent.com/07489384b5f9d3227337940307c3feefd05767a28796f2d6979e190794cb74a6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f33393561396538332d623161312d346131642d623137302d6430383165376262356261622e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/07489384b5f9d3227337940307c3feefd05767a28796f2d6979e190794cb74a6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f33393561396538332d623161312d346131642d623137302d6430383165376262356261622e706e67" alt="img"></a></p>
<h2 id="Sentinel（哨兵）"><a href="#Sentinel（哨兵）" class="headerlink" title="Sentinel（哨兵）"></a>Sentinel（哨兵）</h2><p>Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</strong></p>
<img data-src="/2020/12/06/redis-advanced/sentinel.png" class>

<p>这里的哨兵有两个作用</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li>
<li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</li>
</ul>
<p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<p>用文字描述一下<strong>故障切换（failover）</strong>的过程。假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p>
<h2 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h2><p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>
<p>假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，… ，有不同的方式来选择一个指定的键存储在哪个实例中。</p>
<ul>
<li>最简单的方式是范围分片，例如用户 id 从 0<del>1000 的存储到实例 R0 中，用户 id 从 1001</del>2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。</li>
<li>还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</li>
</ul>
<p>根据执行分片的位置，可以分为三种分片方式：</p>
<ul>
<li>客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li>
<li>代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li>
<li>服务器分片：Redis Cluster。</li>
</ul>
<h2 id="一个简单的论坛系统分析"><a href="#一个简单的论坛系统分析" class="headerlink" title="一个简单的论坛系统分析"></a>一个简单的论坛系统分析</h2><p>该论坛系统功能如下：</p>
<ul>
<li>可以发布文章；</li>
<li>可以对文章进行点赞；</li>
<li>在首页可以按文章的发布时间或者文章的点赞数进行排序显示。</li>
</ul>
<h3 id="文章信息"><a href="#文章信息" class="headerlink" title="文章信息"></a>文章信息</h3><p>文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。</p>
<p>Redis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。</p>
<p><a href="https://camo.githubusercontent.com/42e71d0be01009220b6cb33046d9d3c59e7c092c1a33e6de5ca7dba6c98a9419/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37633534646532312d653266662d343032652d626334322d3430333764653163313539322e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/42e71d0be01009220b6cb33046d9d3c59e7c092c1a33e6de5ca7dba6c98a9419/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37633534646532312d653266662d343032652d626334322d3430333764653163313539322e706e67" alt="img"></a></p>
<h3 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h3><p>当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p>
<p>为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。</p>
<p><a href="https://camo.githubusercontent.com/8ca1d3b06902051795139d7537f178f4fa385bb01685c2ec5c859d495c2baf47/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f34383566646633342d636366382d343138352d393763362d3137333734656537313961302e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/8ca1d3b06902051795139d7537f178f4fa385bb01685c2ec5c859d495c2baf47/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f34383566646633342d636366382d343138352d393763362d3137333734656537313961302e706e67" alt="img"></a></p>
<h3 id="对文章进行排序"><a href="#对文章进行排序" class="headerlink" title="对文章进行排序"></a>对文章进行排序</h3><p>为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）</p>
<p><a href="https://camo.githubusercontent.com/d7ed23ba345bbc919c32dfca60d989e180154ce57c4d39238cc94a683bbe2b77/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66376431373061332d653434362d346136342d616332642d6362393530323866383161382e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/d7ed23ba345bbc919c32dfca60d989e180154ce57c4d39238cc94a683bbe2b77/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66376431373061332d653434362d346136342d616332642d6362393530323866383161382e706e67" alt="img"></a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>Carlson J L. Redis in Action[J]. Media.johnwiley.com.au, 2013.</li>
<li><a href="http://redisbook.com/index.html" target="_blank" rel="noopener">黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014.</a></li>
<li><a href="https://redislabs.com/ebook/foreword/" target="_blank" rel="noopener">REDIS IN ACTION</a></li>
<li><a href="http://ticki.github.io/blog/skip-lists-done-right/" target="_blank" rel="noopener">Skip Lists: Done Right</a></li>
<li><a href="http://www.cnblogs.com/loveincode/p/7411911.html" target="_blank" rel="noopener">论述 Redis 和 Memcached 的差异</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/redis-guide" target="_blank" rel="noopener">Redis 3.0 中文版- 分片</a></li>
<li><a href="http://www.scienjus.com/redis-use-case/" target="_blank" rel="noopener">Redis 应用场景</a></li>
<li><a href="https://redis.io/topics/lru-cache" target="_blank" rel="noopener">Using Redis as an LRU cache</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
        <tag>持久化</tag>
        <tag>Redis哨兵</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix安装与部署</title>
    <url>/2020/12/01/zabbix-install-deploy/</url>
    <content><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>最近工作中和<code>Zabbix</code>打了不少交道，大概分为两个用途。</p>
<p>一种是对接它的API接口，例如创建账号、媒介、触发器、动作等，这种比较简单，照着API文档来就行了，这里不多赘述。</p>
<p>另一种就是，使用Python脚本创建一套Zabbix告警推送的流程，将超过阈值的Zabbix告警按照指定的流程和动作推送到告警中心，而告警中心使用Zabbix作为其中一个告警源，不断拉取并且分发告警。这应该属于监控、告警等最常见的自动化运维的场景了，我对此也比较感兴趣，所有想从Zabbix较为基础的单机版安装及部署学习，也就有了这篇文章。</p>
<p>事先已在本地开发环境的虚拟机中安装与部署成功，现在期望将Zabbix部署到阿里云的机器上。</p>
<p><strong><em>注意：安装部署时，由于环境和版本的问题也踩了不少坑，希望能给读者一些启示。</em></strong></p>
<p><strong><em>作者Zabbix网址</em></strong>：<a href="https://zabbix.notspr.com/" target="_blank" rel="noopener">https://zabbix.notspr.com/</a></p>
<a id="more"></a>

<blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1></blockquote>
<p>这里我们按照官方文档的指引进行安装</p>
<p>官方地址：<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">https://www.zabbix.com/download</a></p>
<p>由于本人的阿里云服务器的预先环境为<code>CentOS 7</code> + <code>MySQL</code>+ <code>Nginx</code>，所以这里不再折腾，直接使用这一套最常用的配置。</p>
<p>由于Zabbix 5.2是最新版本，安装指引和资料也比较少，处于稳定考虑，最终选择<code>Zaabix 5.0 LTS</code>版本。</p>
<p>PS:工作接触的5.0和5.2都有。</p>
<h2 id="安装Zabbix-yum-源"><a href="#安装Zabbix-yum-源" class="headerlink" title="安装Zabbix yum 源"></a>安装Zabbix yum 源</h2><p>官方文档：<a href="https://www.zabbix.com/documentation/5.0/manual/installation/install_from_packages" target="_blank" rel="noopener">Documentation</a></p>
<h3 id="官方yum源"><a href="#官方yum源" class="headerlink" title="官方yum源"></a>官方yum源</h3><p>以下是官方推荐的Zabbix yum源，不过在国内使用比较麻烦，下载速度慢且经常连接超时。所以推荐使用阿里云的Zabbix yum 源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<h3 id="阿里云yum源"><a href="#阿里云yum源" class="headerlink" title="阿里云yum源"></a>阿里云yum源</h3><p>下载地址：<a href="https://mirrors.aliyun.com/zabbix/" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<p>打开/etc/yum.repos.d/zabbix.repo，把所有的“<a href="https://repo.zabbix.com/zabbix/”" target="_blank" rel="noopener">https://repo.zabbix.com/zabbix/”</a> 改成 “<a href="https://mirrors.aliyun.com/zabbix/”" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/”</a> （除了zabbix-non-supported，其他的分支的URL都有两个zabbix）</p>
<h2 id="安装Zabbix-server-和agent"><a href="#安装Zabbix-server-和agent" class="headerlink" title="安装Zabbix server 和agent"></a>安装Zabbix server 和agent</h2><p>换了yum源应该安装很快，使用 -y 跳过选择</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zabbix-server-mysql zabbix-agent</span><br></pre></td></tr></table></figure>

<h2 id="安装Zabbix-前端"><a href="#安装Zabbix-前端" class="headerlink" title="安装Zabbix 前端"></a>安装Zabbix 前端</h2><p><a href="https://www.zabbix.com/documentation/5.0/manual/installation/frontend/frontend_on_rhel7" target="_blank" rel="noopener">Documentation</a></p>
<p>Zabbix 使用<code>php</code>写的，所以有单独的安装过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl</span><br></pre></td></tr></table></figure>

<p>编辑该配置文件 <code>/etc/yum.repos.d/zabbix.repo</code>，使得enabled=1。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[zabbix-frontend]...enabled=1...</span><br></pre></td></tr></table></figure>

<p>下载安装Zabbix 前端依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl</span><br></pre></td></tr></table></figure>

<h2 id="创建初始数据库"><a href="#创建初始数据库" class="headerlink" title="创建初始数据库"></a>创建初始数据库</h2><p><a href="https://www.zabbix.com/documentation/5.0/manual/appendix/install/db_scripts" target="_blank" rel="noopener">Documentation</a></p>
<p>在数据库主机上运行以下代码，目的是在本地MySQL数据库中创建zabbix账号和同名数据库，并且赋予相应权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">password</span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@localhost identified by &#39;password&#39;;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure>

<p>导入初始架构和数据，系统将提示您输入新创建的密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure>

<h3 id="x1F449-ATTENTION-ONE"><a href="#x1F449-ATTENTION-ONE" class="headerlink" title="&#x1F449; ATTENTION ONE"></a>&#x1F449; <strong><em>ATTENTION ONE</em></strong></h3><p>以下就是踩坑了：</p>
<p>执行上一条命令时，MySQL导入数据与结构不成功，发生以下报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1071 (42000) at line 90: Specified key was too long; max key length is 767 bytes</span><br></pre></td></tr></table></figure>

<img data-src="/2020/12/01/zabbix-install-deploy/character-error.png" class>

<h4 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h4><p>初步判断是MySQL字符集的问题，所以去查了 <strong>*<u>Stack Overflow</u>*</strong> 后，在MySQL命令行中，使用<code>show variables like &#39;character%&#39;</code>查询默认字符集，结果发现许多编码为utf-8。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">password</span><br><span class="line">mysql&gt; show variables like &#39;character%&#39;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>*<u>原因分析：</u>*</strong></p>
<p>MySQL的varchar主键只支持不超过767个字节，需要将MySQL的字符编码设置为<code>utf8mb4</code></p>
<p>使用<code>vim /etc/my.cnf</code>编辑MySQL配置文件（不同系统、安装方式和MySQL版本会造成差异）</p>
<p>在[mysqld]下加入以下配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">innodb_file_format</span>=barracuda  </span><br><span class="line"><span class="attr">innodb_file_per_table</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="attr">innodb_large_prefix</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4  </span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci  </span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">500</span>M</span><br></pre></td></tr></table></figure>

<p>如图是我的配置：</p>
<img data-src="/2020/12/01/zabbix-install-deploy/mysql-cfg.png" class>

<p>现在重新执行Zabbix创建初始数据库这一步，但是又有新的问题，还是字符集的报错：</p>
<img data-src="/2020/12/01/zabbix-install-deploy/utf8mb4.png" class>

<p>现在出现索引列大小超出的问题，这就与之前的报错相反，这就很恶心了。</p>
<h4 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h4><p>到这里才发现不对劲，有点南辕北辙的感觉，为什么我在个人Linux虚拟机上就能数据迁移成功？</p>
<p>这肯定是MySQL的问题，所以对比检查云服务器和虚拟机的版本、配置等信息。</p>
<p>果不其然，正常的虚拟机是MySQL5.7版本的，而有问题的云服务器是MySQL5.6版本的，除此之外，默认编码等配置都一模一样。所以定位到了MySQL5.7和MySQL5.6的差异：</p>
<p>5.7除了比5.6性能更强、功能更丰富，其中5.7的索引长度也增加了，这就是报错的问题所在，所以折腾来折腾去，升级MySQL版本完美解决。</p>
<p><strong>*<u>升级方案：</u>*</strong></p>
<h5 id="首先全库备份mysql-5-6"><a href="#首先全库备份mysql-5-6" class="headerlink" title="首先全库备份mysql 5.6"></a>首先全库备份mysql 5.6</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --all-databases &gt; /root/mysql_all.sql</span><br></pre></td></tr></table></figure>

<h5 id="yum配置mysql-5-7"><a href="#yum配置mysql-5-7" class="headerlink" title="yum配置mysql 5.7"></a>yum配置mysql 5.7</h5><p>可以直接使用<code>yum</code>安装，或者源码安装，但是<code>yum</code>安装是非常平滑的升级，数据库和配置文件都不用改，强烈推荐。</p>
<p>但是首先需要修改MySQL相关的yum源文件，因为5.6版本会默认屏蔽5.7的源，在以下两个文件中，将5.7设置为<code>enable=1</code>，5.6修改为<code>enable=0</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">vim /etc/yum.repos.d/mysql-community-source.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">Note:</span> MySQL 5.7 is currently in development. For use at your own risk.</span></span><br><span class="line"><span class="comment"># Please read with sub pages: https://dev.mysql.com/doc/relnotes/mysql/5.7/en/</span></span><br><span class="line"><span class="section">[mysql57-community-dmr]</span></span><br><span class="line"><span class="attr">name</span>=MySQL <span class="number">5.7</span> Community Server Development Milestone Release</span><br><span class="line"><span class="attr">baseurl</span>=http://repo.mysql.com/yum/mysql-<span class="number">5.7</span>-community/el/<span class="number">7</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<p>然后<code>yum clean all</code>清除<code>yum</code>缓存</p>
<h5 id="yum安装mysql-5-7"><a href="#yum安装mysql-5-7" class="headerlink" title="yum安装mysql 5.7"></a>yum安装mysql 5.7</h5><p><code>yum install mysql</code> 或者 <code>yum upgrade mysql-server</code> 应该都可以升级成功&#x1F308;</p>
<p>升级完就可以直接使用啦，重复<strong><u><em>创建初始数据库</em></u></strong> 完成这一步。</p>
<h2 id="为Zabbix-server配置数据库"><a href="#为Zabbix-server配置数据库" class="headerlink" title="为Zabbix server配置数据库"></a>为Zabbix server配置数据库</h2><p>编辑配置文件 <code>/etc/zabbix/zabbix_server.conf</code>，将刚才设置的密码填入该配置文件。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">DBPassword</span>=password</span><br></pre></td></tr></table></figure>

<h2 id="为Zabbix前端配置PHP"><a href="#为Zabbix前端配置PHP" class="headerlink" title="为Zabbix前端配置PHP"></a>为Zabbix前端配置PHP</h2><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>编辑配置文件 <code>/etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</code>，取消其中<code>listen</code>和<code>server_name</code>的注释。此处就是我们非常熟悉的<code>Nginx</code>，配置反向代理监听的端口和域名。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br><span class="line">server_name example.com;</span><br></pre></td></tr></table></figure>

<h4 id="x1F449-ATTENTION-TWO"><a href="#x1F449-ATTENTION-TWO" class="headerlink" title="&#x1F449; ATTENTION TWO"></a>&#x1F449; <strong><em>ATTENTION TWO</em></strong></h4><p>这里配置<code>rh-nginx116</code>是给之前没有安装Nginx的机器使用的，由于一台机器只能启动一个Nginx服务（Docker除外）,所以如果下一步执行<code>systemctl restart rh-nginx116-nginx</code>报错，那就是两个Nginx冲突了，Nginx服务都监听了80端口，绑定端口失败，具体错误如下：</p>
<img data-src="/2020/12/01/zabbix-install-deploy/nginx-error.png" class>

<p>所以我们只需要在原有的Nginx上，配置上本次Zabbix的配置就可以了。</p>
<h4 id="具体方案-："><a href="#具体方案-：" class="headerlink" title="*具体方案*："></a><strong>*<u>具体方案</u>*</strong>：</h4><p>在<code>/etc/nginx/conf.d</code>中创建<code>zabbix.conf</code>，然后使得<code>/etc/nginx/nginx.conf</code>中包含所有<code>conf.d</code>，也就是<code>include /etc/nginx/conf.d/*.conf</code>。</p>
<p>将Zabbix安装的 <code>rh-nginx116</code>的配置文件<code>/etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</code>的内容拷贝到<code>zabbix.conf</code>，就可以对接到已有的Nginx。</p>
<h3 id="配置php"><a href="#配置php" class="headerlink" title="配置php"></a>配置php</h3><p>编辑配置文件 <code>/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code>，将nginx添加到listen.acl_users配置项中。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen.acl_users</span> = apache,nginx</span><br></pre></td></tr></table></figure>

<h4 id="x1F449-ATTENTION-THREE"><a href="#x1F449-ATTENTION-THREE" class="headerlink" title="&#x1F449; ATTENTION THREE"></a>&#x1F449; <strong><em>ATTENTION THREE</em></strong></h4><p>如果下一步<code>rh-php72-php-fpm</code>服务启动不了，原因是 <code>/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code>这个配置文件<code>listen.acl_users = apache,nginx</code>。</p>
<p><strong><u><em>apache,nginx中间不能有逗号</em></u></strong></p>
<h3 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h3><p>最后取消最后一行的注释（注意注释为分号），我们也可以将市区设置为Asia/Shanghai</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">php_value[date.timezone]</span> = Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h2 id="启动Zabbix-server和agent进程"><a href="#启动Zabbix-server和agent进程" class="headerlink" title="启动Zabbix server和agent进程"></a>启动Zabbix server和agent进程</h2><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br><span class="line">systemctl enable zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br></pre></td></tr></table></figure>

<p>如果已经对接到了原有的Nginx，需要忽略<code>rh-nginx116-nginx</code>这个服务。</p>
<h2 id="配置Zabbix前端"><a href="#配置Zabbix前端" class="headerlink" title="配置Zabbix前端"></a>配置Zabbix前端</h2><p>连接到新安装的Zabbix前端： <a href="http://server_ip_or_name" target="_blank" rel="noopener">http://server_ip_or_name</a><br>根据Zabbix文件里步骤操作： <a href="https://www.zabbix.com/documentation/5.0/manual/installation/install#installing_frontend" target="_blank" rel="noopener">Installing frontend</a></p>
<h1 id="开始使用Zabbix"><a href="#开始使用Zabbix" class="headerlink" title="开始使用Zabbix"></a>开始使用Zabbix</h1><p>在浏览器中打开Zabbix前端url，如果是从软件包安装的Zabbix，url如下：</p>
<ul>
<li>for Apache: <em><a href="http://server_ip_or_name/zabbix" target="_blank" rel="noopener">http://server_ip_or_name/zabbix</a></em></li>
<li>for Nginx: <em><a href="http://server_ip_or_name" target="_blank" rel="noopener">http://server_ip_or_name</a></em></li>
</ul>
<h2 id="Zabbix欢迎界面-x1F308"><a href="#Zabbix欢迎界面-x1F308" class="headerlink" title="Zabbix欢迎界面&#x1F308;"></a>Zabbix欢迎界面&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/install_1.png" class>

<h2 id="检查先决条件-x1F308"><a href="#检查先决条件-x1F308" class="headerlink" title="检查先决条件&#x1F308;"></a>检查先决条件&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/install_2.png" class>

<h2 id="配置连接数据库-x1F308"><a href="#配置连接数据库-x1F308" class="headerlink" title="配置连接数据库&#x1F308;"></a>配置连接数据库&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/install_3.png" class>

<h2 id="一直点击NEXT-STEP，完成就会跳转到登陆界面啦-x1F308"><a href="#一直点击NEXT-STEP，完成就会跳转到登陆界面啦-x1F308" class="headerlink" title="一直点击NEXT STEP，完成就会跳转到登陆界面啦&#x1F308;"></a>一直点击<code>NEXT STEP</code>，完成就会跳转到登陆界面啦&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/login.png" class>

<h2 id="输入默认账号密码Admin-amp-zabbix就可以登陆啦-x1F308"><a href="#输入默认账号密码Admin-amp-zabbix就可以登陆啦-x1F308" class="headerlink" title="输入默认账号密码Admin &amp; zabbix就可以登陆啦&#x1F308;"></a>输入默认账号密码<code>Admin</code> &amp; <code>zabbix</code>就可以登陆啦&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/zabbix-home.png" class>

<blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></blockquote>
<p>Zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的解决方案，同时也是优秀的开源项目，在监控这个领域也是老大哥了。</p>
<p>绝大多数运维开发都会接触Zabbix，使用它来组成硬件监控、告警推送等解决方案。</p>
<p>以上就是Zabbix安装与配置的内容，也是最基础的单机版方案，虽然官方文档比较全，但是由于环境的版本的问题也踩了不少坑，希望能给读者一些启示。</p>
<p><strong><u>TODO LIST</u></strong></p>
<ul>
<li>Zabbix主机监控</li>
<li>Zabbix告警推送（SMTP邮件、自定义脚本）</li>
</ul>
<p>最后附上本人阿里云上的Zabbix网址：</p>
<p><a href="https://zabbix.notspr.com/" target="_blank" rel="noopener">https://zabbix.notspr.com/</a></p>
<hr>
<p>官方文档：<br><a href="https://www.zabbix.com/cn/download?zabbix=5.0&os_distribution=centos&os_version=7&db=mysql&ws=nginx" target="_blank" rel="noopener">官方 - 下载安装Zabbix</a></p>
<p><a href="https://www.zabbix.com/documentation/5.0/manual/installation/install#installing_frontend" target="_blank" rel="noopener">Zabbix Documentation 5.0</a></p>
]]></content>
      <categories>
        <category>监控</category>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>Zabbix</tag>
        <tag>告警</tag>
        <tag>开源</tag>
        <tag>阿里云</tag>
        <tag>安装部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言之xorm使用实例</title>
    <url>/2020/11/30/go-xorm-sample/</url>
    <content><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>本文为 <strong><em>xorm - Go 语言 ORM</em></strong> 之后，对 <strong><em>xorm</em></strong> 的练习代码。</p>
<p>学习Go语言之初，在 <strong><em>Go语言之顺序编程</em></strong> 这篇文章中，记录了条件、循环、选择、跳转等语句的练习情况。而最近又学到了 <strong><em>xorm - Go 语言 ORM</em></strong> 的内容，我就想把这两部分内容结合起来，实现一个简单的需求场景。</p>
<p>需求具体为：使用shell作为交互界面，sqlite作为数据库，使用xorm实现类似于人员信息或者银行账户的增删改查，里面也会涉及到顺序编程的内容。</p>
<p>你可以在<code>GitHub</code>上找到本次代码：<a href="https://github.com/sususama5555/go-xorm" target="_blank" rel="noopener">https://github.com/sususama5555/go-xorm</a></p>
<a id="more"></a>

<h1 id="实现详情"><a href="#实现详情" class="headerlink" title="实现详情"></a>实现详情</h1><p>以下就是一个简单的人员信息录入的系统：</p>
<h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><p>main.go为项目的主入口，负责shell界面操作者的交互，以及使用主体逻辑的实现。</p>
<p>其中使用<code>fmt.Println</code>和<code>fmt.Scanf</code>作为shell交互的输出和输入，监听操作者键入的操作选项（数字1~6），使用<code>switch</code>区分不同的选项，然后调用<code>models.go</code>中<code>xorm</code>与<code>sqlite</code>数据库交互的公共函数，实现了该需求的主要逻辑。</p>
<h3 id="代码一览"><a href="#代码一览" class="headerlink" title="代码一览"></a>代码一览</h3><p><strong>*<u>以下为<code>main.go</code>主函数的代码：</u>*</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info  = <span class="string">`请输入操作选项</span></span><br><span class="line"><span class="string">1、创建新用户</span></span><br><span class="line"><span class="string">2、查询指定用户</span></span><br><span class="line"><span class="string">3、列出全部用户</span></span><br><span class="line"><span class="string">4、更新指定用户</span></span><br><span class="line"><span class="string">5、删除指定用户</span></span><br><span class="line"><span class="string">6、退出`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"欢迎使用信息录入系统:"</span>)</span><br><span class="line">Exit:</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Println(info)</span><br><span class="line">		<span class="keyword">var</span> input <span class="keyword">int</span></span><br><span class="line">		fmt.Scanf(<span class="string">"%d \n"</span>, &amp;input)</span><br><span class="line">		<span class="keyword">switch</span> input &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">var</span> name, country <span class="keyword">string</span></span><br><span class="line">			fmt.Print(<span class="string">"请输入姓名: "</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s\n"</span>, &amp;name)</span><br><span class="line">			fmt.Print(<span class="string">"请输入所在国家: "</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s\n"</span>, &amp;country)</span><br><span class="line">			<span class="keyword">if</span> err := newAccount(name, country); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"创建失败:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"创建成功"</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"请输入要查询的账号 &lt;id&gt;:"</span>)</span><br><span class="line">			<span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">			fmt.Scanf(<span class="string">"%d\n"</span>, &amp;id)</span><br><span class="line">			data, err := getAccount(id)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"Fail to get account:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"%#v\n"</span>, data)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			fmt.Println(<span class="string">"以下是所有账号信息:"</span>)</span><br><span class="line">			allData, err := getAccountsAscId()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"Fail to get accounts:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> i, a := <span class="keyword">range</span> allData &#123;</span><br><span class="line">					fmt.Printf(<span class="string">"%d: %#v\n"</span>, i+<span class="number">1</span>, a)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			fmt.Println(<span class="string">"请输入要更新的账号 &lt;id&gt;:"</span>)</span><br><span class="line">			<span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">			fmt.Scanf(<span class="string">"%d\n"</span>, &amp;id)</span><br><span class="line">			<span class="keyword">var</span> name,country <span class="keyword">string</span></span><br><span class="line">			fmt.Print(<span class="string">"请输入更新的姓名:"</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s\n"</span>, &amp;name)</span><br><span class="line">			fmt.Print(<span class="string">"请输入更新的国家:"</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s"</span>, &amp;country)</span><br><span class="line">			data, err := updateAccount(id, name, country)</span><br><span class="line">			<span class="keyword">if</span>  err != <span class="literal">nil</span>&#123;</span><br><span class="line">				fmt.Println(<span class="string">"更新失败:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"更新成功 %#v\n"</span>, data)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			fmt.Println(<span class="string">"请输入要删除的账号 &lt;id&gt;:"</span>)</span><br><span class="line">			<span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">			fmt.Scanf(<span class="string">"%d\n"</span>, &amp;id)</span><br><span class="line">			<span class="keyword">if</span> err := deleteAccount(id); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"删除失败:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"删除成功 %d"</span>, &amp;id)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			fmt.Println(<span class="string">"感谢您的使用"</span>)</span><br><span class="line">			<span class="keyword">break</span> Exit</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="models-go"><a href="#models-go" class="headerlink" title="models.go"></a>models.go</h2><p>models.go主要为使用xorm对该项目的数据库进行增删改查，主要是常用函数的封装，我们可以在main.go里面对这些公共方法进行调用。</p>
<h3 id="安装和引入xorm"><a href="#安装和引入xorm" class="headerlink" title="安装和引入xorm"></a>安装和引入xorm</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get xorm.io/xorm</span><br></pre></td></tr></table></figure>

<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>在使用xorm的文件开头，import以下几个包，主要为<code>go-xorm</code>与<code>go-sqlite3</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"errors"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/go-xorm/xorm"</span></span><br><span class="line">	_ <span class="string">"github.com/mattn/go-sqlite3"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h3 id="创建-Engine-引擎"><a href="#创建-Engine-引擎" class="headerlink" title="创建 Engine 引擎"></a>创建 Engine 引擎</h3><p>可以看到，我们按照xorm的操作手册，使用<code>var x *xorm.Engine</code>首先创建了单个ORM引擎，然后使用<code>init</code>函数对基于<code>sqlite</code>的数据库初始化，为了方便，指定了同级目录下的<code>bank.db</code>作为数据表，最后使用<code>x.Sync(new(Account))</code>实现了同步结构体与数据表。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ORM 引擎</span></span><br><span class="line"><span class="keyword">var</span> x *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建 ORM 引擎与数据库</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	x, err = xorm.NewEngine(<span class="string">"sqlite3"</span>, <span class="string">"./bank.db"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to create engine: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 同步结构体与数据表</span></span><br><span class="line">	<span class="keyword">if</span> err = x.Sync(<span class="built_in">new</span>(Account)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to sync database: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义表结构体"><a href="#定义表结构体" class="headerlink" title="定义表结构体"></a>定义表结构体</h3><p>然后是定义表结构体，我们对Column 表的属性进行了定义，创建了一个名为 Account 的结构体，实现了对数据库表的映射。</p>
<p>之后就是增删改查的操作，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 人员信息</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id      <span class="keyword">int64</span></span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xorm:"unique"`</span></span><br><span class="line">	Country <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//Version int `</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//xorm:"version"` // 乐观锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p><code>_, err := x.Insert(&amp;Account{Name: name, Country: country})</code></p>
<p>使用xorm，该语句可以实现插入一条数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建新的账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newAccount</span><span class="params">(name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 对未存在记录进行插入</span></span><br><span class="line">	_, err := x.Insert(&amp;Account&#123;Name: name, Country: country&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>类似于<code>django orm</code>中的<code>create</code>，或者创建实例x后，再<code>x.save()</code>。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h4><p><code>err = x.Find(&amp;as)</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照 ID 正序排序返回所有账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccountsAscId</span><span class="params">()</span> <span class="params">(as []Account, err error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 使用 Find 方法批量获取记录</span></span><br><span class="line">	err = x.Find(&amp;as)</span><br><span class="line">	<span class="keyword">return</span> as, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="单条查询"><a href="#单条查询" class="headerlink" title="单条查询"></a>单条查询</h4><p><code>has, err := x.Id(id).Get(a)</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="params">(*Account, error)</span></span> &#123;</span><br><span class="line">	a := &amp;Account&#123;&#125;</span><br><span class="line">	<span class="comment">// 直接操作 ID 的简便方法</span></span><br><span class="line">	has, err := x.Id(id).Get(a)</span><br><span class="line">	<span class="comment">// 判断操作是否发生错误或对象是否存在</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !has &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"账号不存在"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新数据前，获取到需要变更的记录的<code>Id</code>，然后对其他属性进行修改。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateAccount</span><span class="params">(id <span class="keyword">int64</span>, name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span>  <span class="params">(*Account, error)</span></span>&#123;</span><br><span class="line">	_, err := getAccount(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	data := <span class="built_in">new</span>(Account)</span><br><span class="line">	data.Name = name</span><br><span class="line">	data.Country = country</span><br><span class="line">	<span class="comment">// 对已有记录进行更新</span></span><br><span class="line">	_, err = x.Id(id).Update(data)</span><br><span class="line">	<span class="keyword">return</span> data, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 通过 Delete 方法删除记录</span></span><br><span class="line">	_, err := x.Delete(&amp;Account&#123;Id: id&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码一览-1"><a href="#代码一览-1" class="headerlink" title="代码一览"></a>代码一览</h3><p><strong>*<u>以下为<code>models.go</code>定义数据库交互的公共函数代码：</u>*</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"errors"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/go-xorm/xorm"</span></span><br><span class="line">	_ <span class="string">"github.com/mattn/go-sqlite3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人员信息</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id      <span class="keyword">int64</span></span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xorm:"unique"`</span></span><br><span class="line">	Country <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//Version int `</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//xorm:"version"` // 乐观锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ORM 引擎</span></span><br><span class="line"><span class="keyword">var</span> x *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建 ORM 引擎与数据库</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	x, err = xorm.NewEngine(<span class="string">"sqlite3"</span>, <span class="string">"./bank.db"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to create engine: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 同步结构体与数据表</span></span><br><span class="line">	<span class="keyword">if</span> err = x.Sync(<span class="built_in">new</span>(Account)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to sync database: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newAccount</span><span class="params">(name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 对未存在记录进行插入</span></span><br><span class="line">	_, err := x.Insert(&amp;Account&#123;Name: name, Country: country&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新已有的账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateAccount</span><span class="params">(id <span class="keyword">int64</span>, name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span>  <span class="params">(*Account, error)</span></span>&#123;</span><br><span class="line">	<span class="comment">// TODO 注释方法不能用</span></span><br><span class="line">	<span class="comment">//data, err := getAccount(id)</span></span><br><span class="line">	<span class="comment">//if err != nil &#123;</span></span><br><span class="line">	<span class="comment">//	return nil, err</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//data.Name = name</span></span><br><span class="line">	<span class="comment">//data.Country = country</span></span><br><span class="line">	<span class="comment">//// 对已有记录进行更新</span></span><br><span class="line">	<span class="comment">//_, err = x.Update(data)</span></span><br><span class="line">	<span class="comment">//return data, err</span></span><br><span class="line">	_, err := getAccount(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	data := <span class="built_in">new</span>(Account)</span><br><span class="line">	data.Name = name</span><br><span class="line">	data.Country = country</span><br><span class="line">	<span class="comment">// 对已有记录进行更新</span></span><br><span class="line">	_, err = x.Id(id).Update(data)</span><br><span class="line">	<span class="keyword">return</span> data, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="params">(*Account, error)</span></span> &#123;</span><br><span class="line">	a := &amp;Account&#123;&#125;</span><br><span class="line">	<span class="comment">// 直接操作 ID 的简便方法</span></span><br><span class="line">	has, err := x.Id(id).Get(a)</span><br><span class="line">	<span class="comment">// 判断操作是否发生错误或对象是否存在</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !has &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"账号不存在"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照 ID 正序排序返回所有账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccountsAscId</span><span class="params">()</span> <span class="params">(as []Account, err error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 使用 Find 方法批量获取记录</span></span><br><span class="line">	err = x.Find(&amp;as)</span><br><span class="line">	<span class="keyword">return</span> as, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 通过 Delete 方法删除记录</span></span><br><span class="line">	_, err := x.Delete(&amp;Account&#123;Id: id&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="成果截图"><a href="#成果截图" class="headerlink" title="成果截图"></a>成果截图</h1><p>完成以上代码后，使用go build编译成可执行的二进制文件，不出意外的话，我执行该exe文件，就会得到以下截图的结构：</p>
<h2 id="开始界面"><a href="#开始界面" class="headerlink" title="开始界面"></a>开始界面</h2><p>输入操作的选项</p>
<img data-src="/2020/11/30/go-xorm-sample/start.png" class>

<h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><p>输入表结构的字段，创建一条数据，第一次操作由于name的唯一性没有通过新增要求</p>
<img data-src="/2020/11/30/go-xorm-sample/insert.png" class>

<h2 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h2><p>查询所有和查询单条数据</p>
<img data-src="/2020/11/30/go-xorm-sample/select.png" class>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>对指定Id的数据进行修改</p>
<img data-src="/2020/11/30/go-xorm-sample/update.png" class>

<h2 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h2><img data-src="/2020/11/30/go-xorm-sample/delete.png" class>




<hr>
<p><strong>*<u>参考链接：</u>*</strong></p>
<p>可以参照本人另一篇文章 —— <code>xorm - Go 语言 ORM</code>，或者官方的操作手册：</p>
<p><a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/" target="_blank" rel="noopener">xorm 官方操作手册</a></p>
]]></content>
      <categories>
        <category>Golang</category>
        <category>xorm</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
        <tag>Golang</tag>
        <tag>xorm</tag>
        <tag>实战练习</tag>
      </tags>
  </entry>
  <entry>
    <title>xorm - Go 语言 ORM</title>
    <url>/2020/11/29/go-xorm/</url>
    <content><![CDATA[<blockquote>
<h1 id="xorm简介"><a href="#xorm简介" class="headerlink" title="xorm简介"></a>xorm简介</h1></blockquote>
<p>官方定义：</p>
<p><code>XORM is a Simple &amp; Powerful ORM Framework for Go Programming Language</code></p>
<p>xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。xorm的目标并不是让你完全不去学习SQL，我们认为SQL并不会为ORM所替代，但是ORM将可以解决绝大部分的简单SQL需求。xorm支持两种风格的混用。</p>
<p>本文是xorm的操作手册，后续有原创文章记录xorm实例代码。</p>
<p><strong>*<u>申明：以下大部分内容，是本人在遍历性阅读官方文档时的摘抄，不是本人原创，目的是迁移到自己博客，方便后续学习与查阅。小部分内容为个人代码。</u>*</strong></p>
<a id="more"></a>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li><p>支持 Struct 和数据库表之间的灵活映射，并支持自动同步</p>
</li>
<li><p>事务支持</p>
</li>
<li><p>同时支持原始SQL语句和 ORM 操作的混合执行</p>
</li>
<li><p>使用连写来简化调用</p>
</li>
<li><p>支持使用ID, In, Where, Limit, Join, Having, Table, SQL, Cols等函数和结构体等方式作为条件</p>
</li>
<li><p>支持级联加载 Struct</p>
</li>
<li><p>Schema支持（仅Postgres）</p>
</li>
<li><p>支持缓存</p>
</li>
<li><p>通过 <a href="https://xorm.io/reverse" target="_blank" rel="noopener">xorm.io/reverse</a> 支持根据数据库自动生成 xorm 结构体</p>
</li>
<li><p>支持记录版本（即乐观锁）</p>
</li>
<li><p>通过 <a href="https://xorm.io/builder" target="_blank" rel="noopener">xorm.io/builder</a> 内置 SQL Builder 支持</p>
</li>
<li><p>上下文缓存支持</p>
</li>
<li><p>支持日志上下文</p>
</li>
</ul>
<h2 id="驱动支持"><a href="#驱动支持" class="headerlink" title="驱动支持"></a>驱动支持</h2><p>xorm 当前支持的驱动和数据库如下：</p>
<ul>
<li><a href="https://github.com/mysql/mysql-server/tree/5.7" target="_blank" rel="noopener">Mysql5.*</a> / <a href="https://github.com/mysql/mysql-server" target="_blank" rel="noopener">Mysql8.*</a> / <a href="https://github.com/MariaDB/server" target="_blank" rel="noopener">Mariadb</a> / <a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">Tidb</a><ul>
<li><a href="https://github.com/go-sql-driver/mysql" target="_blank" rel="noopener">github.com/go-sql-driver/mysql</a></li>
<li><a href="https://github.com/ziutek/mymysql/godrv" target="_blank" rel="noopener">github.com/ziutek/mymysql/godrv</a></li>
</ul>
</li>
<li><a href="https://github.com/postgres/postgres" target="_blank" rel="noopener">Postgres</a> / <a href="https://github.com/cockroachdb/cockroach" target="_blank" rel="noopener">Cockroach</a><ul>
<li><a href="https://github.com/lib/pq" target="_blank" rel="noopener">github.com/lib/pq</a></li>
</ul>
</li>
<li><a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a><ul>
<li><a href="https://github.com/mattn/go-sqlite3" target="_blank" rel="noopener">github.com/mattn/go-sqlite3</a></li>
</ul>
</li>
<li>MsSql<ul>
<li><a href="https://github.com/denisenkom/go-mssqldb" target="_blank" rel="noopener">github.com/denisenkom/go-mssqldb</a></li>
</ul>
</li>
<li>Oracle<ul>
<li><a href="https://github.com/mattn/go-oci8" target="_blank" rel="noopener">github.com/mattn/go-oci8</a> (试验性支持)</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get xorm.io/xorm</span><br></pre></td></tr></table></figure>

<h1 id="xorm使用"><a href="#xorm使用" class="headerlink" title="xorm使用"></a>xorm使用</h1><h2 id="创建-Engine-引擎"><a href="#创建-Engine-引擎" class="headerlink" title="创建 Engine 引擎"></a>创建 Engine 引擎</h2><p>单个ORM引擎，也称为Engine。一个 APP 可以同时存在多个 Engine 引擎，一个Engine一般只对应一个数据库。Engine 通过调用 <code>xorm.NewEngine</code> 生成，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"github.com/mattn/go-sqlite3"</span></span><br><span class="line">    <span class="string">"xorm.io/xorm"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> engine *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    engine, err = xorm.NewEngine(<span class="string">"sqlite3"</span>, <span class="string">"./bank.db"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>日志是一个接口，通过设置日志，可以显示SQL，警告以及错误等，默认的显示级别为 INFO。</p>
<ul>
<li><code>engine.ShowSQL(true)</code>，则会在控制台打印出生成的SQL语句；</li>
<li><code>engine.Logger().SetLevel(core.LOG_DEBUG)</code>，则会在控制台打印调试及以上的信息；</li>
</ul>
<p>如果希望将信息不仅打印到控制台，而是保存为文件，那么可以通过类似如下的代码实现，<code>NewSimpleLogger(w io.Writer)</code>接收一个io.Writer接口来将数据写入到对应的设施中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Create(<span class="string">"sql.log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(err.Error())</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">engine.SetLogger(xorm.NewSimpleLogger(f))</span><br></pre></td></tr></table></figure>

<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>engine内部支持连接池接口和对应的函数。</p>
<ul>
<li>如果需要设置连接池的空闲数大小，可以使用 <code>engine.SetMaxIdleConns()</code> 来实现。</li>
<li>如果需要设置最大打开连接数，则可以使用 <code>engine.SetMaxOpenConns()</code> 来实现。</li>
<li>如果需要设置连接的最大生存时间，则可以使用 <code>engine.SetConnMaxLifetime()</code> 来实现。</li>
</ul>
<h2 id="定义表结构体"><a href="#定义表结构体" class="headerlink" title="定义表结构体"></a>定义表结构体</h2><p>xorm支持将一个struct映射为数据库中对应的一张表。</p>
<h3 id="名称映射规则"><a href="#名称映射规则" class="headerlink" title="名称映射规则"></a>名称映射规则</h3><p>跟名称相关的函数包含在 <code>xorm.io/xorm/names</code> 下。名称映射规则主要负责结构体名称到表名和结构体 field 到表字段的名称映射。由 <code>names.Mapper</code> 接口的实现者来管理，xorm 内置了三种 <code>Mapper</code> 实现：<code>names.SnakeMapper</code> ， <code>names.SameMapper</code>和<code>names.GonicMapper</code>。</p>
<ul>
<li>SnakeMapper 支持struct为驼峰式命名，表结构为下划线命名之间的转换，这个是默认的Maper；</li>
<li>SameMapper 支持结构体名称和对应的表名称以及结构体field名称与对应的表字段名称相同的命名；</li>
<li>GonicMapper 和SnakeMapper很类似，但是对于特定词支持更好，比如ID会翻译成id而不是i_d。</li>
</ul>
<p>当前 SnakeMapper 为默认值，如果需要改变时，在 engine 创建完成后使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.SetMapper(names.GonicMapper&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>同时需要注意的是：</p>
<ul>
<li>如果你使用了别的命名规则映射方案，也可以自己实现一个 Mapper。</li>
<li>表名称和字段名称的映射规则默认是相同的，当然也可以设置为不同，如：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.SetTableMapper(names.SameMapper&#123;&#125;)</span><br><span class="line">engine.SetColumnMapper(names.SnakeMapper&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Column-属性定义"><a href="#Column-属性定义" class="headerlink" title="Column 属性定义"></a>Column 属性定义</h3><p>我们在 field 对应的 Tag 中对 Column 的一些属性进行定义，定义的方法基本和我们写SQL定义表结构类似，以下代码为例，使用了sqlite3作为数据库，定义一个银行账户的表结构，与django orm类似，可以指定各字段的名称映射规则，还可以将字段设为唯一标识，添加乐观锁等等，这里不多赘述。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 银行账户</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id      <span class="keyword">int64</span></span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xorm:"unique"`</span></span><br><span class="line">	Country <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//Version int `</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//xorm:"version"` // 乐观锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Go与字段类型对应表"><a href="#Go与字段类型对应表" class="headerlink" title="Go与字段类型对应表"></a>Go与字段类型对应表</h3><p>如果不使用 tag 来定义 field 对应的数据库字段类型，那么系统会自动给出一个默认的字段类型，对应表如下：</p>
<table>
<thead>
<tr>
<th>go type’s kind</th>
<th>value method</th>
<th>xorm type</th>
</tr>
</thead>
<tbody><tr>
<td>implemented Conversion</td>
<td>Conversion.ToDB / Conversion.FromDB</td>
<td>Text</td>
</tr>
<tr>
<td>int, int8, int16, int32, uint, uint8, uint16, uint32</td>
<td></td>
<td>Int</td>
</tr>
<tr>
<td>int64, uint64</td>
<td></td>
<td>BigInt</td>
</tr>
<tr>
<td>float32</td>
<td></td>
<td>Float</td>
</tr>
<tr>
<td>float64</td>
<td></td>
<td>Double</td>
</tr>
<tr>
<td>complex64, complex128</td>
<td>json.Marshal / json.UnMarshal</td>
<td>Varchar(64)</td>
</tr>
<tr>
<td>[]uint8</td>
<td></td>
<td>Blob</td>
</tr>
<tr>
<td>array, slice, map except []uint8</td>
<td>json.Marshal / json.UnMarshal</td>
<td>Text</td>
</tr>
<tr>
<td>bool</td>
<td>1 or 0</td>
<td>Bool</td>
</tr>
<tr>
<td>string</td>
<td></td>
<td>Varchar(255)</td>
</tr>
<tr>
<td>time.Time</td>
<td></td>
<td>DateTime</td>
</tr>
<tr>
<td>cascade struct</td>
<td>primary key field value</td>
<td>BigInt</td>
</tr>
<tr>
<td>struct</td>
<td>json.Marshal / json.UnMarshal</td>
<td>Text</td>
</tr>
<tr>
<td>Others</td>
<td></td>
<td>Text</td>
</tr>
</tbody></table>
<h2 id="表结构操作"><a href="#表结构操作" class="headerlink" title="表结构操作"></a>表结构操作</h2><p>xorm 提供了一些动态获取和修改表结构的方法，通过这些方法可以动态同步数据库结构，导出数据库结构，导入数据库结构。</p>
<h3 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h3><ul>
<li>DBMetas()</li>
</ul>
<p>xorm支持获取表结构信息，通过调用 <code>engine.DBMetas()</code> 可以获取到数据库中所有的表，字段，索引的信息。</p>
<ul>
<li>TableInfo()</li>
</ul>
<p>根据传入的结构体指针及其对应的Tag，提取出模型对应的表结构信息。这里不是数据库当前的表结构信息，而是我们通过struct建模时希望数据库的表的结构信息</p>
<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul>
<li>CreateTables()</li>
</ul>
<p>创建表使用 <code>engine.CreateTables()</code>，参数为一个或多个空的对应Struct的指针。同时可用的方法有 Charset() 和 StoreEngine()，如果对应的数据库支持，这两个方法可以在创建表时指定表的字符编码和使用的引擎。Charset() 和 StoreEngine() 当前仅支持 Mysql 数据库。</p>
<ul>
<li>IsTableEmpty()</li>
</ul>
<p>判断表是否为空，参数和 CreateTables 相同</p>
<ul>
<li>IsTableExist()</li>
</ul>
<p>判断表是否存在</p>
<ul>
<li>DropTables()</li>
</ul>
<p>删除表使用 <code>engine.DropTables()</code>，参数为一个或多个空的对应Struct的指针或者表的名字。如果为string传入，则只删除对应的表，如果传入的为Struct，则删除表的同时还会删除对应的索引。</p>
<h3 id="创建索引和唯一索引"><a href="#创建索引和唯一索引" class="headerlink" title="创建索引和唯一索引"></a>创建索引和唯一索引</h3><ul>
<li>CreateIndexes</li>
</ul>
<p>根据struct中的tag来创建索引</p>
<ul>
<li>CreateUniques</li>
</ul>
<p>根据struct中的tag来创建唯一索引</p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>插入数据使用Insert方法，Insert方法的参数可以是一个或多个Struct的指针，一个或多个Struct的Slice的指针。</p>
<p>如果传入的是Slice并且当数据库支持批量插入时，Insert会使用批量插入的方式进行插入。</p>
<ul>
<li>插入一条数据，此时可以用Insert或者InsertOne</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">affected, err := engine.Insert(user)</span><br><span class="line"><span class="comment">// INSERT INTO user (name) values (?)</span></span><br></pre></td></tr></table></figure>

<p>在插入单条数据成功后，如果该结构体有自增字段(设置为autoincr)，则自增字段会被自动赋值为数据库中的id。这里需要注意的是，如果插入的结构体中，自增字段已经赋值，则该字段会被作为非自增字段插入。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(user.Id)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入同一个表的多条数据，此时如果数据库支持批量插入，那么会进行批量插入，但是这样每条记录就无法被自动赋予id值。如果数据库不支持批量插入，那么就会一条一条插入。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">affected, err := engine.Insert(&amp;users)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用指针Slice插入多条记录，同上</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]*User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>] = <span class="built_in">new</span>(User)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">affected, err := engine.Insert(&amp;users)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入多条记录并且不使用批量插入，此时实际生成多条插入语句，每条记录均会自动赋予Id值。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]*User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>] = <span class="built_in">new</span>(User)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">affected, err := engine.Insert(users...)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入不同表的一条记录</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">question := <span class="built_in">new</span>(Question)</span><br><span class="line">question.Content = <span class="string">"whywhywhwy?"</span></span><br><span class="line">affected, err := engine.Insert(user, question)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入不同表的多条记录</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">questions := <span class="built_in">make</span>([]Question, <span class="number">1</span>)</span><br><span class="line">questions[<span class="number">0</span>].Content = <span class="string">"whywhywhwy?"</span></span><br><span class="line">affected, err := engine.Insert(&amp;users, &amp;questions)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入不同表的一条或多条记录</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">...</span><br><span class="line">questions := <span class="built_in">make</span>([]Question, <span class="number">1</span>)</span><br><span class="line">questions[<span class="number">0</span>].Content = <span class="string">"whywhywhwy?"</span></span><br><span class="line">affected, err := engine.Insert(user, &amp;questions)</span><br></pre></td></tr></table></figure>

<p>这里需要注意以下几点：</p>
<ul>
<li>这里虽然支持同时插入，但这些插入并没有事务关系。因此有可能在中间插入出错后，后面的插入将不会继续。此时前面的插入已经成功，如果需要回滚，请开启事务。</li>
<li>批量插入会自动生成<code>Insert into table values (),(),()</code>的语句，因此各个数据库对SQL语句有长度限制，因此这样的语句有一个最大的记录数，根据经验测算在150条左右。大于150条后，生成的sql语句将太长可能导致执行失败。因此在插入大量数据时，目前需要自行分割成每150条插入一次。</li>
</ul>
<h2 id="查询和统计数据"><a href="#查询和统计数据" class="headerlink" title="查询和统计数据"></a>查询和统计数据</h2><p>所有的查询条件不区分调用顺序，但必须在调用Get，Exist, Sum, Find，Count, Iterate, Rows这几个函数之前调用。同时需要注意的一点是，在调用的参数中，如果采用默认的<code>SnakeMapper</code>所有的字符字段名均为映射后的数据库的字段名，而不是field的名字。</p>
<h3 id="查询条件方法"><a href="#查询条件方法" class="headerlink" title="查询条件方法"></a>查询条件方法</h3><p>查询和统计主要使用<code>Get</code>, <code>Find</code>, <code>Count</code>, <code>Rows</code>, <code>Iterate</code>这几个方法，同时大部分函数在调用<code>Update</code>, <code>Delete</code>时也是可用的。在进行查询时可以使用多个方法来形成查询条件，条件函数如下：</p>
<ul>
<li>Alias(string)</li>
</ul>
<p>给Table设定一个别名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Alias(<span class="string">"o"</span>).Where(<span class="string">"o.name = ?"</span>, name).Get(&amp;order)</span><br></pre></td></tr></table></figure>

<ul>
<li>And(string, …interface{})</li>
</ul>
<p>和Where函数中的条件基本相同，作为条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Where(...).And(...).Get(&amp;order)</span><br></pre></td></tr></table></figure>

<ul>
<li>Asc(…string)</li>
</ul>
<p>指定字段名正序排序，可以组合</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Asc(<span class="string">"id"</span>).Find(&amp;orders)</span><br></pre></td></tr></table></figure>

<ul>
<li>Desc(…string)</li>
</ul>
<p>指定字段名逆序排序，可以组合</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Asc(<span class="string">"id"</span>).Desc(<span class="string">"time"</span>).Find(&amp;orders)</span><br></pre></td></tr></table></figure>

<ul>
<li>ID(interface{})</li>
</ul>
<p>传入一个主键字段的值，作为查询条件，如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.ID(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user Where id = 1</span></span><br></pre></td></tr></table></figure>

<p>如果是复合主键，则可以</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.ID(core.PK&#123;<span class="number">1</span>, <span class="string">"name"</span>&#125;).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user Where id =1 AND name= 'name'</span></span><br></pre></td></tr></table></figure>

<p>传入的两个参数按照struct中pk标记字段出现的顺序赋值。</p>
<ul>
<li>Or(interface{}, …interface{})</li>
</ul>
<p>和Where函数中的条件基本相同，作为条件</p>
<ul>
<li>OrderBy(string)</li>
</ul>
<p>按照指定的顺序进行排序</p>
<ul>
<li>Select(string)</li>
</ul>
<p>指定select语句的字段部分内容，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Select(<span class="string">"a.*, (select name from b limit 1) as name"</span>).Find(&amp;beans)</span><br><span class="line"></span><br><span class="line">engine.Select(<span class="string">"a.*, (select name from b limit 1) as name"</span>).Get(&amp;bean)</span><br></pre></td></tr></table></figure>

<ul>
<li>SQL(string, …interface{})</li>
</ul>
<p>执行指定的Sql语句，并把结果映射到结构体。有时，当选择内容或者条件比较复杂时，可以直接使用Sql，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.SQL(<span class="string">"select * from table"</span>).Find(&amp;beans)</span><br></pre></td></tr></table></figure>

<ul>
<li>Where(string, …interface{})</li>
</ul>
<p>和SQL中Where语句中的条件基本相同，作为条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Where(<span class="string">"a = ? AND b = ?"</span>, <span class="number">1</span>, <span class="number">2</span>).Find(&amp;beans)</span><br><span class="line"></span><br><span class="line">engine.Where(builder.Eq&#123;<span class="string">"a"</span>:<span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;).Find(&amp;beans)</span><br><span class="line"></span><br><span class="line">engine.Where(builder.Eq&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;.Or(builder.Eq&#123;<span class="string">"b"</span>: <span class="number">2</span>&#125;)).Find(&amp;beans)</span><br></pre></td></tr></table></figure>

<ul>
<li>In(string, …interface{})</li>
</ul>
<p>某字段在一些值中，这里需要注意必须是[]interface{}才可以展开，由于Go语言的限制，[]int64等不可以直接展开，而是通过传递一个slice。第二个参数也可以是一个*builder.Builder 指针。示例代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select from table where column in (1,2,3)</span></span><br><span class="line">engine.In(<span class="string">"cloumn"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).Find()</span><br><span class="line"></span><br><span class="line"><span class="comment">// select from table where column in (1,2,3)</span></span><br><span class="line">engine.In(<span class="string">"column"</span>, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Find()</span><br><span class="line"></span><br><span class="line"><span class="comment">// select from table where column in (select column from table2 where a = 1)</span></span><br><span class="line">engine.In(<span class="string">"column"</span>, builder.Select(<span class="string">"column"</span>).From(<span class="string">"table2"</span>).Where(builder.Eq&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;)).Find()</span><br></pre></td></tr></table></figure>

<ul>
<li>Cols(…string)</li>
</ul>
<p>只查询或更新某些指定的字段，默认是查询所有映射的字段或者根据Update的第一个参数来判断更新的字段。例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Cols(<span class="string">"age"</span>, <span class="string">"name"</span>).Get(&amp;usr)</span><br><span class="line"><span class="comment">// SELECT age, name FROM user limit 1</span></span><br><span class="line">engine.Cols(<span class="string">"age"</span>, <span class="string">"name"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT age, name FROM user</span></span><br><span class="line">engine.Cols(<span class="string">"age"</span>, <span class="string">"name"</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET age=? AND name=?</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AllCols()</li>
</ul>
<p>查询或更新所有字段，一般与Update配合使用，因为默认Update只更新非0，非”“，非bool的字段。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.AllCols().Id(<span class="number">1</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET name = ?, age =?, gender =? WHERE id = 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>MustCols(…string)</li>
</ul>
<p>某些字段必须更新，一般与Update配合使用。</p>
<ul>
<li>Omit(…string)</li>
</ul>
<p>和cols相反，此函数指定排除某些指定的字段。注意：此方法和Cols方法不可同时使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1：</span></span><br><span class="line">engine.Omit(<span class="string">"age"</span>, <span class="string">"gender"</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET name = ? AND department = ?</span></span><br><span class="line"><span class="comment">// 例2：</span></span><br><span class="line">engine.Omit(<span class="string">"age, gender"</span>).Insert(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO user (name) values (?) // 这样的话age和gender会给默认值</span></span><br><span class="line"><span class="comment">// 例3：</span></span><br><span class="line">engine.Omit(<span class="string">"age"</span>, <span class="string">"gender"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT name FROM user //只select除age和gender字段的其它字段</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Distinct(…string)</li>
</ul>
<p>按照参数中指定的字段归类结果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Distinct(<span class="string">"age"</span>, <span class="string">"department"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT DISTINCT age, department FROM user</span></span><br></pre></td></tr></table></figure>

<p>注意：当开启了缓存时，此方法的调用将在当前查询中禁用缓存。因为缓存系统当前依赖Id，而此时无法获得Id</p>
<ul>
<li>Table(nameOrStructPtr interface{})</li>
</ul>
<p>传入表名称或者结构体指针，如果传入的是结构体指针，则按照IMapper的规则提取出表名</p>
<ul>
<li>Limit(int, …int)</li>
</ul>
<p>限制获取的数目，第一个参数为条数，第二个参数表示开始位置，如果不传则为0</p>
<ul>
<li>Top(int)</li>
</ul>
<p>相当于Limit(int, 0)</p>
<ul>
<li>Join(string,interface{},string)</li>
</ul>
<p>第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值， 第二个参数为string类型的表名，表对应的结构体指针或者为两个值的[]string，表示表名和别名， 第三个参数为连接条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">详细用法参见 [5.Join的使用](5.join.md)</span><br></pre></td></tr></table></figure>

<ul>
<li>GroupBy(string)</li>
</ul>
<p>Groupby的参数字符串</p>
<ul>
<li>Having(string)</li>
</ul>
<p>Having的参数字符串</p>
<h3 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h3><p>查询单条数据使用<code>Get</code>方法，在调用Get方法时需要传入一个对应结构体的指针，同时结构体中的非空field自动成为查询的条件和前面的方法条件组合在一起查询。</p>
<p>如：</p>
<p>1) 根据Id来获得单条数据:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">has, err := engine.Id(id).Get(user)</span><br><span class="line"><span class="comment">// 复合主键的获取方法</span></span><br><span class="line"><span class="comment">// has, errr := engine.Id(xorm.PK&#123;1,2&#125;).Get(user)</span></span><br></pre></td></tr></table></figure>

<p>2) 根据Where来获得单条数据：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">has, err := engine.Where(<span class="string">"name=?"</span>, <span class="string">"xlw"</span>).Get(user)</span><br></pre></td></tr></table></figure>

<p>3) 根据user结构体中已有的非空数据来获得单条数据：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := &amp;User&#123;Id:<span class="number">1</span>&#125;</span><br><span class="line">has, err := engine.Get(user)</span><br></pre></td></tr></table></figure>

<p>或者其它条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := &amp;User&#123;Name:<span class="string">"xlw"</span>&#125;</span><br><span class="line">has, err := engine.Get(user)</span><br></pre></td></tr></table></figure>

<p>返回的结果为两个参数，一个<code>has</code>为该条记录是否存在，第二个参数<code>err</code>为是否有错误。不管err是否为nil，has都有可能为true或者false。</p>
<h3 id="Exist系列方法"><a href="#Exist系列方法" class="headerlink" title="Exist系列方法"></a>Exist系列方法</h3><p>判断某个记录是否存在可以使用<code>Exist</code>, 相比<code>Get</code>，<code>Exist</code>性能更好。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">has, err := testEngine.Exist(<span class="built_in">new</span>(RecordExist))</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist LIMIT 1</span></span><br><span class="line">has, err = testEngine.Exist(&amp;RecordExist&#123;</span><br><span class="line">		Name: <span class="string">"test1"</span>,</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist WHERE name = ? LIMIT 1</span></span><br><span class="line">has, err = testEngine.Where(<span class="string">"name = ?"</span>, <span class="string">"test1"</span>).Exist(&amp;RecordExist&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist WHERE name = ? LIMIT 1</span></span><br><span class="line">has, err = testEngine.SQL(<span class="string">"select * from record_exist where name = ?"</span>, <span class="string">"test1"</span>).Exist()</span><br><span class="line"><span class="comment">// select * from record_exist where name = ?</span></span><br><span class="line">has, err = testEngine.Table(<span class="string">"record_exist"</span>).Exist()</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist LIMIT 1</span></span><br><span class="line">has, err = testEngine.Table(<span class="string">"record_exist"</span>).Where(<span class="string">"name = ?"</span>, <span class="string">"test1"</span>).Exist()</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist WHERE name = ? LIMIT 1</span></span><br></pre></td></tr></table></figure>

<h4 id="与Get的区别"><a href="#与Get的区别" class="headerlink" title="与Get的区别"></a>与Get的区别</h4><p>Get与Exist方法返回值都为bool和error，如果查询到实体存在，则Get方法会将查到的实体赋值给参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user :&#x3D; &amp;User&#123;Id:1&#125;</span><br><span class="line">has,err :&#x3D; testEngine.Get(user)	&#x2F;&#x2F; 执行结束后，user会被赋值为数据库中Id为1的实体</span><br><span class="line">has,err &#x3D; testEngine.Exist(user)	&#x2F;&#x2F; user中仍然是初始声明的user，不做改变</span><br></pre></td></tr></table></figure>

<h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>如果你的需求是：判断某条记录是否存在，若存在，则返回这条记录。</p>
<p>建议直接使用Get方法。</p>
<p>如果仅仅判断某条记录是否存在，则使用Exist方法，Exist的执行效率要比Get更高。</p>
<h3 id="查询的其他方法"><a href="#查询的其他方法" class="headerlink" title="查询的其他方法"></a>查询的其他方法</h3><h4 id="Find方法"><a href="#Find方法" class="headerlink" title="Find方法"></a>Find方法</h4><p>查询多条数据使用<code>Find</code>方法，Find方法的第一个参数为<code>slice</code>的指针或<code>Map</code>指针，即为查询后返回的结果，第二个参数可选，为查询的条件struct的指针。</p>
<h4 id="Join的使用"><a href="#Join的使用" class="headerlink" title="Join的使用"></a>Join的使用</h4><ul>
<li>Join(string,interface{},string)</li>
</ul>
<p>第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值， 第二个参数为string类型的表名，表对应的结构体指针或者为两个值的[]string，表示表名和别名， 第三个参数为连接条件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">    User <span class="string">`xorm:"extends"`</span></span><br><span class="line">    Group <span class="string">`xorm:"extends"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(UserGroup)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users := <span class="built_in">make</span>([]UserGroup, <span class="number">0</span>)</span><br><span class="line">engine.Join(<span class="string">"INNER"</span>, <span class="string">"group"</span>, <span class="string">"group.id = user.group_id"</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<h4 id="Iterate方法"><a href="#Iterate方法" class="headerlink" title="Iterate方法"></a>Iterate方法</h4><p>Iterate方法提供逐条执行查询到的记录的方法，他所能使用的条件和Find方法完全相同。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := engine.Where(<span class="string">"age &gt; ? or name=?)"</span>, <span class="number">30</span>, <span class="string">"xlw"</span>).Iterate(<span class="built_in">new</span>(Userinfo), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, bean <span class="keyword">interface</span>&#123;&#125;)</span><span class="title">error</span></span>&#123;</span><br><span class="line">    user := bean.(*Userinfo)</span><br><span class="line">    <span class="comment">//do somthing use i and user</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Count方法"><a href="#Count方法" class="headerlink" title="Count方法"></a>Count方法</h4><p>统计数据使用<code>Count</code>方法，Count方法的参数为struct的指针并且成为查询条件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">total, err := engine.Where(<span class="string">"id &gt;?"</span>, <span class="number">1</span>).Count(user)</span><br></pre></td></tr></table></figure>

<h3 id="Rows方法"><a href="#Rows方法" class="headerlink" title="Rows方法"></a>Rows方法</h3><p>Rows方法和Iterate方法类似，提供逐条执行查询到的记录的方法，不过Rows更加灵活好用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">rows, err := engine.Where(<span class="string">"id &gt;?"</span>, <span class="number">1</span>).Rows(user)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    err = rows.Scan(user)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sum系列方法"><a href="#Sum系列方法" class="headerlink" title="Sum系列方法"></a>Sum系列方法</h3><p>求和数据可以使用<code>Sum</code>, <code>SumInt</code>, <code>Sums</code> 和 <code>SumsInt</code> 四个方法，Sums系列方法的参数为struct的指针并且成为查询条件。代码实例参考<a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/chapter-05/9.sums.html" target="_blank" rel="noopener">https://gobook.io/read/gitea.com/xorm/manual-zh-CN/chapter-05/9.sums.html</a></p>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>更新数据使用<code>Update</code>方法，Update方法的第一个参数为需要更新的内容，可以为一个结构体指针或者一个Map[string]interface{}类型。当传入的为结构体指针时，只有非空和0的field才会被作为更新的字段。当传入的为Map类型时，key为数据库Column的名字，value为要更新的内容。</p>
<p><code>Update</code>方法将返回两个参数，第一个为 更新的记录数，需要注意的是 <code>SQLITE</code> 数据库返回的是根据更新条件查询的记录数而不是真正受更新的记录数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">affected, err := engine.Id(id).Update(user)</span><br></pre></td></tr></table></figure>

<p>这里需要注意，Update会自动从user结构体中提取非0和非nil得值作为需要更新的内容，因此，如果需要更新一个值为0，则此种方法将无法实现，因此有两种选择：</p>
<ul>
<li>1.通过添加Cols函数指定需要更新结构体中的哪些值，未指定的将不更新，指定了的即使为0也会更新。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Id(id).Cols(<span class="string">"age"</span>).Update(&amp;user)</span><br></pre></td></tr></table></figure>

<ul>
<li>2.通过传入map[string]interface{}来进行更新，但这时需要额外指定更新到哪个表，因为通过map是无法自动检测更新哪个表的。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Table(<span class="built_in">new</span>(User)).Id(id).Update(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"age"</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="乐观锁Version"><a href="#乐观锁Version" class="headerlink" title="乐观锁Version"></a>乐观锁Version</h3><p>要使用乐观锁，需要使用version标记</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int64</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Version <span class="keyword">int</span> <span class="string">`xorm:"version"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Insert时，version标记的字段将会被设置为1，在Update时，Update的内容必须包含version原来的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.Id(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id = ?</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET ..., version = version + 1 WHERE id = ? AND version = ?</span></span><br></pre></td></tr></table></figure>

<h3 id="更新时间Updated"><a href="#更新时间Updated" class="headerlink" title="更新时间Updated"></a>更新时间Updated</h3><p>Updated可以让您在记录插入或每次记录更新时自动更新数据库中的标记字段为当前时间，需要在xorm标记中使用updated标记，如下所示进行标记，对应的字段可以为time.Time或者自定义的time.Time或者int,int64等int类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int64</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    UpdatedAt time.Time <span class="string">`xorm:"updated"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你希望临时不自动插入时间，则可以组合NoAutoTime()方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.NoAutoTime().Insert(&amp;user)</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除数据<code>Delete</code>方法，参数为struct的指针并且成为查询条件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">affected, err := engine.Id(id).Delete(user)</span><br></pre></td></tr></table></figure>

<p><code>Delete</code>的返回值第一个参数为删除的记录数，第二个参数为错误。</p>
<p>注意：当删除时，如果user中包含有bool,float64或者float32类型，有可能会使删除失败。具体请查看 <a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/chapter-07/index.html#160" target="_blank" rel="noopener">FAQ</a></p>
<h3 id="软删除Deleted"><a href="#软删除Deleted" class="headerlink" title="软删除Deleted"></a>软删除Deleted</h3><p>Deleted可以让您不真正的删除数据，而是标记一个删除时间。使用此特性需要在xorm标记中使用deleted标记，如下所示进行标记，对应的字段必须为time.Time类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int64</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    DeletedAt time.Time <span class="string">`xorm:"deleted"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Delete()时，deleted标记的字段将会被自动更新为当前时间而不是去删除该条记录，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.Id(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id = ?</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Delete(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET ..., deleted_at = ? WHERE id = ?</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// 再次调用Get，此时将返回false, nil，即记录不存在</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Delete(&amp;user)</span><br><span class="line"><span class="comment">// 再次调用删除会返回0, nil，即记录不存在</span></span><br></pre></td></tr></table></figure>

<p>那么如果记录已经被标记为删除后，要真正的获得该条记录或者真正的删除该条记录，需要启用Unscoped，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.Id(<span class="number">1</span>).Unscoped().Get(&amp;user)</span><br><span class="line"><span class="comment">// 此时将可以获得记录</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Unscoped().Delete(&amp;user)</span><br><span class="line"><span class="comment">// 此时将可以真正的删除记录</span></span><br></pre></td></tr></table></figure>

<h2 id="执行SQL查询"><a href="#执行SQL查询" class="headerlink" title="执行SQL查询"></a>执行SQL查询</h2><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>也可以直接执行一个SQL查询，即Select命令。在Postgres中支持原始SQL语句中使用 ` 和 ? 符号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sql := <span class="string">"select * from userinfo"</span></span><br><span class="line">results, err := engine.Query(sql)</span><br></pre></td></tr></table></figure>

<p>当调用 <code>Query</code> 时，第一个返回值 <code>results</code> 为 <code>[]map[string][]byte</code> 的形式。</p>
<p><code>Query</code> 的参数也允许传入 <code>*builder.Buidler</code> 对象</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SELECT * FROM table</span></span><br><span class="line">results, err := engine.Query(builder.Select(<span class="string">"*"</span>).From(<span class="string">"table"</span>))</span><br></pre></td></tr></table></figure>

<h3 id="QueryInterface"><a href="#QueryInterface" class="headerlink" title="QueryInterface"></a>QueryInterface</h3><p>和 <code>Query</code> 类似，但是返回值为 <code>[]map[string]interface{}</code></p>
<h3 id="QueryString"><a href="#QueryString" class="headerlink" title="QueryString"></a>QueryString</h3><p>和 <code>Query</code> 类似，但是返回值为 <code>[]map[string]string</code></p>
<h2 id="执行SQL命令"><a href="#执行SQL命令" class="headerlink" title="执行SQL命令"></a>执行SQL命令</h2><p>也可以直接执行一个SQL命令，即执行Insert， Update， Delete 等操作。此时不管数据库是何种类型，都可以使用 ` 和 ? 符号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">"update `userinfo` set username=? where id=?"</span></span><br><span class="line">res, err := engine.Exec(sql, <span class="string">"xiaolun"</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="简洁版英文手册"><a href="#简洁版英文手册" class="headerlink" title="简洁版英文手册"></a>简洁版英文手册</h1><h2 id="Overview-¶"><a href="#Overview-¶" class="headerlink" title="Overview ¶"></a>Overview <a href="https://pkg.go.dev/xorm.io/xorm#pkg-overview" target="_blank" rel="noopener">¶</a></h2><p>Package xorm is a simple and powerful ORM for Go.</p>
<h3 id="Installation-¶"><a href="#Installation-¶" class="headerlink" title="Installation ¶"></a>Installation <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Installation" target="_blank" rel="noopener">¶</a></h3><p>Make sure you have installed Go 1.11+ and then:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get xorm.io/xorm</span><br></pre></td></tr></table></figure>

<h3 id="Create-Engine-¶"><a href="#Create-Engine-¶" class="headerlink" title="Create Engine ¶"></a>Create Engine <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Create_Engine" target="_blank" rel="noopener">¶</a></h3><p>Firstly, we should new an engine for a database</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine, err := xorm.NewEngine(driverName, dataSourceName)</span><br></pre></td></tr></table></figure>

<p>Method NewEngine’s parameters is the same as sql.Open. It depends drivers’ implementation. Generally, one engine for an application is enough. You can set it as package variable.</p>
<h3 id="Raw-Methods-¶"><a href="#Raw-Methods-¶" class="headerlink" title="Raw Methods ¶"></a>Raw Methods <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Raw_Methods" target="_blank" rel="noopener">¶</a></h3><p>XORM also support raw SQL execution:</p>
<ol>
<li>query a SQL string, the returned results is []map[string][]byte</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">results, err := engine.Query(<span class="string">"select * from user"</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>execute a SQL string, the returned results</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Exec(<span class="string">"update user set .... where ..."</span>)</span><br></pre></td></tr></table></figure>

<h3 id="ORM-Methods-¶"><a href="#ORM-Methods-¶" class="headerlink" title="ORM Methods ¶"></a>ORM Methods <a href="https://pkg.go.dev/xorm.io/xorm#hdr-ORM_Methods" target="_blank" rel="noopener">¶</a></h3><p>There are 8 major ORM methods and many helpful methods to use to operate database.</p>
<ol>
<li>Insert one or multiple records to database</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Insert(&amp;<span class="keyword">struct</span>)</span><br><span class="line"><span class="comment">// INSERT INTO struct () values ()</span></span><br><span class="line">affected, err := engine.Insert(&amp;struct1, &amp;struct2)</span><br><span class="line"><span class="comment">// INSERT INTO struct1 () values ()</span></span><br><span class="line"><span class="comment">// INSERT INTO struct2 () values ()</span></span><br><span class="line">affected, err := engine.Insert(&amp;sliceOfStruct)</span><br><span class="line"><span class="comment">// INSERT INTO struct () values (),(),()</span></span><br><span class="line">affected, err := engine.Insert(&amp;struct1, &amp;sliceOfStruct2)</span><br><span class="line"><span class="comment">// INSERT INTO struct1 () values ()</span></span><br><span class="line"><span class="comment">// INSERT INTO struct2 () values (),(),()</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Query one record or one variable from database</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">has, err := engine.Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">has, err := engine.Table(<span class="string">"user"</span>).Where(<span class="string">"name = ?"</span>, name).Get(&amp;id)</span><br><span class="line"><span class="comment">// SELECT id FROM user WHERE name = ? LIMIT 1</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Query multiple records from database</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sliceOfStructs []Struct</span><br><span class="line">err := engine.Find(&amp;sliceOfStructs)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapOfStructs = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int64</span>]Struct)</span><br><span class="line">err := engine.Find(&amp;mapOfStructs)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> int64s []<span class="keyword">int64</span></span><br><span class="line">err := engine.Table(<span class="string">"user"</span>).Cols(<span class="string">"id"</span>).Find(&amp;int64s)</span><br><span class="line"><span class="comment">// SELECT id FROM user</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Query multiple records and record by record handle, there two methods, one is Iterate, another is Rows</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := engine.Iterate(...)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"></span><br><span class="line">rows, err := engine.Rows(...)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line">bean := <span class="built_in">new</span>(Struct)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    err = rows.Scan(bean)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Update one or more records</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.ID(...).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET ...</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Delete one or more records, Delete MUST has condition</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Where(...).Delete(&amp;user)</span><br><span class="line"><span class="comment">// DELETE FROM user Where ...</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Count records</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">counts, err := engine.Count(&amp;user)</span><br><span class="line"><span class="comment">// SELECT count(*) AS total FROM user</span></span><br><span class="line"></span><br><span class="line">counts, err := engine.SQL(<span class="string">"select count(*) FROM user"</span>).Count()</span><br><span class="line"><span class="comment">// select count(*) FROM user</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>Sum records</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sumFloat64, err := engine.Sum(&amp;user, <span class="string">"id"</span>)</span><br><span class="line"><span class="comment">// SELECT sum(id) from user</span></span><br><span class="line"></span><br><span class="line">sumFloat64s, err := engine.Sums(&amp;user, <span class="string">"id1"</span>, <span class="string">"id2"</span>)</span><br><span class="line"><span class="comment">// SELECT sum(id1), sum(id2) from user</span></span><br><span class="line"></span><br><span class="line">sumInt64s, err := engine.SumsInt(&amp;user, <span class="string">"id1"</span>, <span class="string">"id2"</span>)</span><br><span class="line"><span class="comment">// SELECT sum(id1), sum(id2) from user</span></span><br></pre></td></tr></table></figure>

<h3 id="Conditions-¶"><a href="#Conditions-¶" class="headerlink" title="Conditions ¶"></a>Conditions <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Conditions" target="_blank" rel="noopener">¶</a></h3><p>The above 8 methods could use with condition methods chainable. Attention: the above 8 methods should be the last chainable method.</p>
<ol>
<li>ID, In</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.ID(<span class="number">1</span>).Get(&amp;user) <span class="comment">// for single primary key</span></span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id = 1</span></span><br><span class="line">engine.ID(schemas.PK&#123;<span class="number">1</span>, <span class="number">2</span>&#125;).Get(&amp;user) <span class="comment">// for composite primary keys</span></span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id1 = 1 AND id2 = 2</span></span><br><span class="line">engine.In(<span class="string">"id"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id IN (1, 2, 3)</span></span><br><span class="line">engine.In(<span class="string">"id"</span>, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id IN (1, 2, 3)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Where, And, Or</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Where().And().Or().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE (.. AND ..) OR ...</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>OrderBy, Asc, Desc</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Asc().Desc().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user ORDER BY .. ASC, .. DESC</span></span><br><span class="line">engine.OrderBy().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user ORDER BY ..</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Limit, Top</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Limit().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user LIMIT .. OFFSET ..</span></span><br><span class="line">engine.Top(<span class="number">5</span>).Find()</span><br><span class="line"><span class="comment">// SELECT TOP 5 * FROM user // for mssql</span></span><br><span class="line"><span class="comment">// SELECT * FROM user LIMIT .. OFFSET 0 //for other databases</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>SQL, let you custom SQL</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">engine.SQL(<span class="string">"select * from user"</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Cols, Omit, Distinct</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users []*User</span><br><span class="line">engine.Cols(<span class="string">"col1, col2"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT col1, col2 FROM user</span></span><br><span class="line">engine.Cols(<span class="string">"col1"</span>, <span class="string">"col2"</span>).Where().Update(user)</span><br><span class="line"><span class="comment">// UPDATE user set col1 = ?, col2 = ? Where ...</span></span><br><span class="line">engine.Omit(<span class="string">"col1"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT col2, col3 FROM user</span></span><br><span class="line">engine.Omit(<span class="string">"col1"</span>).Insert(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO table (non-col1) VALUES ()</span></span><br><span class="line">engine.Distinct(<span class="string">"col1"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT DISTINCT col1 FROM user</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Join, GroupBy, Having</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.GroupBy(<span class="string">"name"</span>).Having(<span class="string">"name='xlw'"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//SELECT * FROM user GROUP BY name HAVING name='xlw'</span></span><br><span class="line">engine.Join(<span class="string">"LEFT"</span>, <span class="string">"userdetail"</span>, <span class="string">"user.id=userdetail.id"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//SELECT * FROM user LEFT JOIN userdetail ON user.id=userdetail.id</span></span><br></pre></td></tr></table></figure>

<p>More usage, please visit <a href="http://xorm.io/docs" target="_blank" rel="noopener">http://xorm.io/docs</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XORM是基于Go语言的，功能全面且强大的ORM库。</p>
<p>本文是xorm的操作手册，后续有原创文章描述本人的xorm实例代码。</p>
<p><strong>*<u>申明：以上大部分内容，是本人在遍历性阅读官方文档时的摘抄，不是本人原创，目的是迁移到自己博客，方便后续学习与查阅。小部分内容为个人代码。</u>*</strong></p>
<hr>
<p><u><strong><em>资料来源：</em></strong></u></p>
<p><a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/" target="_blank" rel="noopener">xorm 官方操作手册</a></p>
<p><a href="https://www.kancloud.cn/xormplus/xorm/167077" target="_blank" rel="noopener">xorm 操作指南</a></p>
<p><a href="https://xorm.io/" target="_blank" rel="noopener">xorm 官网</a></p>
<p><a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">github地址：https://github.com/go-xorm/xorm</a></p>
]]></content>
      <categories>
        <category>Golang</category>
        <category>xorm</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
        <tag>Golang</tag>
        <tag>xorm</tag>
        <tag>操作手册</tag>
        <tag>搬运</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6之 async 与 await</title>
    <url>/2020/11/25/es6-async-await/</url>
    <content><![CDATA[<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>async 是 ES6 才有的与异步操作有关的关键字，和 Promise ， Generator 有很大关联的。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, param[, ... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>name: 函数名称。</li>
<li>param: 要传递给函数的参数的名称。</li>
<li>statements: 函数体语句。</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a>，这个promise要么会通过一个由async函数返回的值被解决，要么会通过一个从async函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p>
<a id="more"></a>

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>async函数可能包含0个或者多个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener"><code>await</code></a>表达式。await表达式会暂停整个async函数的执行进程并出让其控制权，只有当其等待的基于promise的异步操作被兑现或被拒绝之后才会恢复进程。promise的解决值会被当作该await表达式的返回值。使用<code>async</code> / <code>await</code>关键字就可以在异步代码中使用普通的<code>try</code> / <code>catch</code>代码块。</p>
<p><code>await</code>关键字只在async函数内有效。如果你在async函数体之外使用它，就会抛出语法错误 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a> 。</p>
<p><code>async</code>/<code>await</code>的目的为了简化使用基于promise的API时所需的语法。<code>async</code>/<code>await</code>的行为就好像搭配使用了生成器和promise。</p>
<p>async函数一定会返回一个promise对象。如果一个async函数的返回值看起来不是promise，那么它将会被隐式地包装在一个promise中。</p>
<p>例如，如下代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>async函数的函数体可以被看作是由0个或者多个await表达式分割开来的。从第一行代码直到（并包括）第一个await表达式（如果有的话）都是同步运行的。这样的话，一个不含await表达式的async函数是会同步运行的。然而，如果函数体内有一个await表达式，async函数就一定会异步执行。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在await表达式之后的代码可以被认为是存在在链式调用的then回调中。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"helloAsync"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(helloAsync())  <span class="comment">// Promise &#123;&lt;resolved&gt;: "helloAsync"&#125;</span></span><br><span class="line"> </span><br><span class="line">helloAsync().then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(v);         <span class="comment">// helloAsync</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</p>
<p>await 关键字仅在 async function 中有效。如果在 async function 函数体外使用 await ，你只会得到一个语法错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> task = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"run task"</span>)&#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask  = debounce(task, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounceTask)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"testAwait"</span>);</span><br><span class="line">          resolve();</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helloAsync"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>



<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>这个函数和generator函数有些类似，从例子中可以看得出来，async函数在function前面有个async作为标识，意思就是异步函数，里面有个await搭配使用，每到await的地方就是程序需要等待执行后面的程序，语义化很强，下面总结一下<strong>async函数的特点</strong>：</p>
<ul>
<li>语义化强</li>
<li>里面的await只能在async函数中使用</li>
<li>await后面的语句可以是promise对象、数字、字符串等</li>
<li>async函数返回的是一个Promsie对象</li>
<li>await语句后的Promise对象变成reject状态时，那么整个async函数会中断，后面的程序不会继续执行</li>
</ul>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>await 操作符用于等待一个 Promise 对象, 它只能在异步函数 async function 内部使用。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[return_value] = <span class="keyword">await</span> expression;</span><br></pre></td></tr></table></figure>

<ul>
<li>expression: 一个 Promise 对象或者任何要等待的值。</li>
</ul>
<h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>await 表达式会暂停当前 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async function</code></a> 的执行，等待 Promise 处理完成。若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async function</code></a>。</p>
<p>若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</p>
<p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</p>
<p>如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">await</span> testAwait (<span class="string">"hello world"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(x); </span><br><span class="line">&#125;</span><br><span class="line">helloAsync ();</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<p>正常情况下，await 命令后面是一个 Promise 对象，它也可以跟其他值，如字符串，布尔值，数值以及普通函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"testAwait"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helloAsync"</span>);</span><br><span class="line">&#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>



<p>await针对所跟不同表达式的处理方式：</p>
<ul>
<li>Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。</li>
<li>非 Promise 对象：直接返回对应的值。</li>
</ul>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><code>AsyncFunction</code> 构造函数</p>
<hr>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">developer.mozilla.org(MDN) - async函数</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">developer.mozilla.org(MDN) - await</a></p>
<p><a href="https://www.runoob.com/w3cnote/es6-async.html" target="_blank" rel="noopener">菜鸟教程 - ES6 async 函数</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>异步</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>ES6</tag>
        <tag>异步函数</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言之Prometheus Exporter开发</title>
    <url>/2020/11/25/go-prometheus-export/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>蓝鲸监控通过 job 部署 prometheus 社区的 Exporter，对目标组件进行性能数据采集。接着 bkmetricbeat 从 Exporter 上周期拉取性能数据并通过数据通道上报。</p>
<h3 id="自定义组件采集导入流程"><a href="#自定义组件采集导入流程" class="headerlink" title="自定义组件采集导入流程"></a>自定义组件采集导入流程</h3><p>蓝鲸监控当前支持使用 go 编写 Exporter</p>
<ul>
<li><p>在社区找到适合自己的 Exporter 或者编写新的 Exporter</p>
</li>
<li><p>将源码编译成二进制文件</p>
</li>
<li><p>将编译的 Exporter 打成 zip 包</p>
</li>
<li><p>上传配置文件</p>
</li>
</ul>
<a id="more"></a>

<h2 id="Exporter-开发"><a href="#Exporter-开发" class="headerlink" title="Exporter 开发"></a>Exporter 开发</h2><h3 id="Exporter-简介"><a href="#Exporter-简介" class="headerlink" title="Exporter 简介"></a>Exporter 简介</h3><ul>
<li>Exporter 本质上就是将收集的数据，转化为对应的⽂本格式，并提供 http 接口，供蓝鲸监控采集器 定期采集数据。</li>
</ul>
<h3 id="Exporter-基础"><a href="#Exporter-基础" class="headerlink" title="Exporter 基础"></a>Exporter 基础</h3><ul>
<li><p>指标介绍 Prometheus 中主要使⽤的四类指标类型，如下所示：</p>
<ul>
<li>Counter (累加指标)</li>
<li>Gauge (测量指标)</li>
<li>Summary (概略图)</li>
<li>Histogram (直方图)</li>
</ul>
<p>最常使用的是 Gauge，Gauge 代表了采集的一个单个数据，这个数据可以增加也可以减少，比如 CPU 使用情况，内存使用量，硬盘当前的空间容量等。 Counter 一个累加指标数据，这个值随着时间只会逐渐的增加，比如程序完成的总任务数量，运行错误发生的总次数等，代表了持续增加的数据包或者传输字节累加值。</p>
<blockquote>
<p>【注】：所有指标的值仅支持 float64 类型。</p>
</blockquote>
</li>
<li><p>文本格式以下面输出为例：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># metric:</span></span><br><span class="line">sample_metric1 12.47</span><br><span class="line">sample_metric2 &#123;partition=<span class="string">"c:"</span>&#125; 0.44</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p>#: 表示注释 sample_metric1 和 sample_metric2 表示指标名称</p>
<p>partition: 表示指标的作⽤维度，例如磁盘分区使⽤率，维度就是磁盘分区，即每个磁盘分区都有⼀个磁盘分区使⽤率的值</p>
<p>c: 表示维度的值，例如磁盘分区的 C 盘 / D 盘等 12.47 和 0.44 表示对应指标的值</p>
<h3 id="Exporter-开发-1"><a href="#Exporter-开发-1" class="headerlink" title="Exporter 开发"></a>Exporter 开发</h3><ul>
<li><p>环境搭建：</p>
<ul>
<li>Golang 安装</li>
<li>apt-get install git</li>
<li>wget <a href="https://dl.google.com/go/go1.10.7.linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.10.7.linux-amd64.tar.gz</a></li>
<li>tar -C /usr/local -xzf go1.10.7.linux-amd64.tar.gz</li>
<li>export PATH=$PATH:/usr/local/go/bin</li>
<li>export GOPATH=<code>你的代码目录</code></li>
</ul>
<blockquote>
<p>不同系统安装介绍：<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md</a></p>
</blockquote>
</li>
<li><p>Prometheus Exporter 开发依赖库</p>
<p>⾸先引⼊ Prometheus 的依赖库</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -v github.com/prometheus/client_golang/prometheus</span><br></pre></td></tr></table></figure>

<ul>
<li>开发示例</li>
</ul>
<ol>
<li>导⼊依赖模块: 本例计划采集主机的内存和磁盘信息，因此引⼊以下依赖库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -v github.com/shirou/gopsutil</span><br><span class="line">go get -v github.com/go-ole/go-ole</span><br><span class="line">go get -v github.com/StackExchange/wmi</span><br><span class="line">go get -v github.com/golang/protobuf/proto</span><br><span class="line">go get -v golang.org/x/sys/unix</span><br></pre></td></tr></table></figure>

<ol>
<li>新建⼀个 Exporter 项⽬： ⼀个 Exporter 只需要⼀个⽂件即可；在 GOPATH 下 src ⽬录下新建⼀个 test_exporter ⽬录和⼀个 test_exporter.go ⽂件: test_exporter.go ⽂件第⼀⾏必须写上 package main 可执⾏的命令必须始终使⽤ package main。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"flag"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/prometheus/client_golang/prometheus"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/client_golang/prometheus/promhttp"</span></span><br><span class="line">	<span class="string">"github.com/shirou/gopsutil/disk"</span></span><br><span class="line">	<span class="string">"github.com/shirou/gopsutil/mem"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol>
<li>定义 Exporter 的版本（Version）、监听地址（listenAddress）、采集 url（metricPath）以及⾸⻚（landingPage）</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Version       = <span class="string">"1.0.0.dev"</span></span><br><span class="line">	listenAddress = flag.String(<span class="string">"web.listen-address"</span>, <span class="string">":9601"</span>, <span class="string">"Address to listen on for web interface and telemetry."</span>)</span><br><span class="line">	metricPath    = flag.String(<span class="string">"web.telemetry-path"</span>, <span class="string">"/metrics"</span>, <span class="string">"Path under which to expose metrics."</span>)</span><br><span class="line">	landingPage   = []<span class="keyword">byte</span>(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Example Exporter"</span> + Version + <span class="string">"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Example Exporter"</span> + Version + <span class="string">"&lt;/h1&gt;&lt;p&gt;&lt;ahref='"</span> + *metricPath + <span class="string">"'&gt;Metrics&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol>
<li>定义 Exporter 结构体</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Exporter <span class="keyword">struct</span> &#123;</span><br><span class="line">	error        prometheus.Gauge</span><br><span class="line">	scrapeErrors *prometheus.CounterVec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义结构体实例化的函数 NewExporter</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewExporter</span><span class="params">()</span> *<span class="title">Exporter</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Exporter&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Describe 函数，传递指标描述符到 channel，这个函数不⽤动，直接使⽤即可，⽤来⽣成采集指标的描述信息。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Exporter)</span> <span class="title">Describe</span><span class="params">(ch <span class="keyword">chan</span>&lt;- *prometheus.Desc)</span></span> &#123;</span><br><span class="line">	metricCh := <span class="built_in">make</span>(<span class="keyword">chan</span> prometheus.Metric)</span><br><span class="line">	doneCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> m := <span class="keyword">range</span> metricCh &#123;</span><br><span class="line">			ch &lt;- m.Desc()</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">close</span>(doneCh)</span><br><span class="line">	&#125;()</span><br><span class="line">	e.Collect(metricCh)</span><br><span class="line">	<span class="built_in">close</span>(metricCh)</span><br><span class="line">	&lt;-doneCh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Collect 函数将执⾏抓取函数并返回数据，返回的数据传递到 channel 中，并且传递的同时绑定原先的指标描述符，以及指标的类型（Guage）；需要将所有的指标获取函数在这⾥写⼊。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//collect 函数，采集数据的⼊⼝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Exporter)</span> <span class="title">Collect</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	<span class="comment">// 每个指标值的采集逻辑，在对应的采集函数中</span></span><br><span class="line">	<span class="keyword">if</span> err = ScrapeMem(ch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		e.scrapeErrors.WithLabelValues(<span class="string">"mem"</span>).Inc()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err = ScrapeDisk(ch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		e.scrapeErrors.WithLabelValues(<span class="string">"disk"</span>).Inc()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>指标仅有单条数据，不带维度信息示例如下：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScrapeMem</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 指标获取逻辑，此处不做具体操作，仅仅赋值进⾏示例</span></span><br><span class="line">	mem_info, _ := mem.VirtualMemory()</span><br><span class="line">	<span class="comment">// ⽣成采集的指标名</span></span><br><span class="line">	metric_name := prometheus.BuildFQName(<span class="string">"sys"</span>, <span class="string">""</span>, <span class="string">"mem_usage"</span>)</span><br><span class="line">	<span class="comment">// ⽣成 NewDesc 类型的数据格式，该指标⽆维度，[] string &#123;&#125; 为空</span></span><br><span class="line">	new_desc := prometheus.NewDesc(metric_name, <span class="string">"Gauge metric with mem_usage"</span>, []<span class="keyword">string</span>&#123;&#125;, <span class="literal">nil</span>)</span><br><span class="line">	<span class="comment">// ⽣成具体的采集信息并写⼊ ch 通道</span></span><br><span class="line">	metric_mes := prometheus.MustNewConstMetric(new_desc,</span><br><span class="line">		prometheus.GaugeValue, mem_info.UsedPercent)</span><br><span class="line">	ch &lt;- metric_mes</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>指标有多条数据，带维度信息示例如下：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScrapeDisk</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	fs, _ := disk.Partitions(<span class="literal">false</span>)</span><br><span class="line">	<span class="keyword">for</span> _, val := <span class="keyword">range</span> fs &#123;</span><br><span class="line">		d, _ := disk.Usage(val.Mountpoint)</span><br><span class="line">		metric_name := prometheus.BuildFQName(<span class="string">"sys"</span>, <span class="string">""</span>, <span class="string">"disk_size"</span>)</span><br><span class="line">		new_desc := prometheus.NewDesc(metric_name, <span class="string">"Gauge metric with disk_usage"</span>, []<span class="keyword">string</span>&#123;<span class="string">"mountpoint"</span>&#125;, <span class="literal">nil</span>)</span><br><span class="line">		metric_mes := prometheus.MustNewConstMetric(new_desc,</span><br><span class="line">			prometheus.GaugeValue, <span class="keyword">float64</span>(d.UsedPercent), val.Mountpoint)</span><br><span class="line">		ch &lt;- metric_mes</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>主函数</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 解析定义的监听端⼝等信息</span></span><br><span class="line">	flag.Parse()</span><br><span class="line">	<span class="comment">// ⽣成⼀个 Exporter 类型的对象，该 exporter 需具有 collect 和 Describe ⽅法</span></span><br><span class="line">	exporter := NewExporter()</span><br><span class="line">	<span class="comment">// 将 exporter 注册⼊ prometheus，prometheus 将定期从 exporter 拉取数据</span></span><br><span class="line">	prometheus.MustRegister(exporter)</span><br><span class="line">	<span class="comment">// 接收 http 请求时，触发 collect 函数，采集数据</span></span><br><span class="line">	http.Handle(*metricPath, promhttp.Handler())</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		w.Write(landingPage)</span><br><span class="line">	&#125;)</span><br><span class="line">	log.Fatal(http.ListenAndServe(*listenAddress, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编译 Exporter</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build test_exporter.go</span><br><span class="line">./test_exporter</span><br></pre></td></tr></table></figure>

<ol>
<li>运⾏起来后，访问 <a href="http://127.0.0.1:9601/metrics" target="_blank" rel="noopener">http://127.0.0.1:9601/metrics</a> 即可验证</li>
</ol>
<p>⾄此 Exporter 开发完成，其中 8，9 两步中的函数是重点，⽬前仅仅写了⼀些数据进⾏示例，其中的监控指标获取数据就是该部分的主要功能，需要编写对应逻辑获取指标的值。</p>
<h2 id="制作⼀键导⼊包"><a href="#制作⼀键导⼊包" class="headerlink" title="制作⼀键导⼊包"></a>制作⼀键导⼊包</h2><h3 id="Exporter-编译"><a href="#Exporter-编译" class="headerlink" title="Exporter 编译"></a>Exporter 编译</h3><p>蓝鲸监控 Exporter 默认只⽀持 64 位机器运⾏ Exporter。</p>
<h4 id="linux-系统"><a href="#linux-系统" class="headerlink" title="linux 系统"></a>linux 系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译 windows exporter</span></span><br><span class="line">env CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o ./exporterwindows.exe test_exporter</span><br><span class="line"><span class="comment"># test_exporter 为 GOPATH 下我们创建的⽬录名</span></span><br><span class="line"><span class="comment"># 编译 linux exporter</span></span><br><span class="line">env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./exporter-linux</span><br><span class="line">test_exporter</span><br></pre></td></tr></table></figure>

<h4 id="windows-系统"><a href="#windows-系统" class="headerlink" title="windows 系统"></a>windows 系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译 windows exporter</span></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=windows</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build -o ./exporter-windows.exe test_exporter</span><br><span class="line"><span class="comment"># 编译 linux exporter</span></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build -o ./exporter-linux test_exporter</span><br></pre></td></tr></table></figure>



<hr>
<p>参考链接：<br><a href="https://bk.tencent.com/docs/document/5.1/19/600" target="_blank" rel="noopener">蓝鲸监控 - Exporter 开发</a></p>
]]></content>
      <categories>
        <category>Golang</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Prometheus</tag>
        <tag>Exporter</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之使用pyvmomi管理VMware</title>
    <url>/2020/11/17/pyvmomi-sample/</url>
    <content><![CDATA[<blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></blockquote>
<p>官方定义：</p>
<p>pyVmomi is the Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter.</p>
<p><a href="https://link.jianshu.com/?t=https://github.com/vmware/pyvmomi/" target="_blank" rel="noopener">pyVmomi</a> 是 VMware vSphere API 的一个 Python sdk，我们可以利用它来管理与交互vCenter、ESX、ESXi，获取我们需要的信息。</p>
<p>由于工作中需要对接vCenter，实现虚拟化平台、数据中心、物理机、物理机和存储的指标采集及监控，也需要通过启停虚拟机网卡来实现灾备切换，所以本文结合了笔者的经验和 pyVmomi 官方案例。</p>
<a id="more"></a>

<p>VMware vSphere 架构图：</p>
<img data-src="/2020/11/17/pyvmomi-sample/vsphere.png" class>

<blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3></blockquote>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>笔者基于 Python3.6.7 与 pyVmomi6.5.0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyVmomi==6.5.0</span><br></pre></td></tr></table></figure>

<p>VMware vSphere 版本：6.5</p>
<h3 id="连接-vSphere"><a href="#连接-vSphere" class="headerlink" title="连接 vSphere"></a>连接 vSphere</h3><p>我这里定义了一个基础的类，使用vCenter的地址、账号（默认管理员为<a href="mailto:administrator@vsphere.local">administrator@vsphere.local</a>）及密码实例化后，可以使用连接、断开连接、根据vSphere中唯一标识获取对应实例，及监控任务结果的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> pyVim <span class="keyword">import</span> connect</span><br><span class="line"><span class="keyword">from</span> ssl <span class="keyword">import</span> SSLEOFError</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vSphereBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    与vCenter交互的基类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user, pwd, host)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.user = user</span><br><span class="line">        self.pwd = pwd</span><br><span class="line">        </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_connect_vc_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 支持SSL连接和非SSL连接 """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)</span><br><span class="line">            context.verify_mode = ssl.CERT_NONE</span><br><span class="line">            si = SmartConnect(host=self.host, user=self.user, pwd=self.pwd, port=<span class="number">443</span>, sslContext=context)</span><br><span class="line">            <span class="keyword">return</span> si, <span class="string">"connect VC success with SSL"</span></span><br><span class="line">        <span class="keyword">except</span> SSLEOFError:</span><br><span class="line">            context = ssl._create_unverified_context()</span><br><span class="line">            context.verify_mode = ssl.CERT_NONE</span><br><span class="line">            si = SmartConnect(host=self.host, user=self.user, pwd=self.pwd, port=<span class="number">443</span>, sslContext=context)</span><br><span class="line">            <span class="keyword">return</span> si, <span class="string">"connect VC success without SSL"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, e</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deconnect_vc</span><span class="params">(self, si)</span>:</span></span><br><span class="line">        connect.Disconnect(si)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_content</span><span class="params">(self)</span>:</span></span><br><span class="line">        si = self._connect_vc()</span><br><span class="line">        content = si.RetrieveContent()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_obj_bymoId</span><span class="params">(self, content, vimtype, moId)</span>:</span></span><br><span class="line">        obj = <span class="literal">None</span></span><br><span class="line">        container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> container.view:</span><br><span class="line">            <span class="keyword">if</span> moId:</span><br><span class="line">                <span class="keyword">if</span> c._moId == moId:</span><br><span class="line">                    obj = c</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                obj = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_obj</span><span class="params">(self, content, vimtype, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return an object by name, if name is None the</span></span><br><span class="line"><span class="string">        first found object is returned</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        obj = <span class="literal">None</span></span><br><span class="line">        container = content.viewManager.CreateContainerView(</span><br><span class="line">            content.rootFolder, vimtype, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> container.view:</span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                <span class="keyword">if</span> c.name == name:</span><br><span class="line">                    obj = c</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                obj = c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_wait_for_task</span><span class="params">(self, task)</span>:</span></span><br><span class="line">        <span class="string">""" wait for a vCenter task to finish """</span></span><br><span class="line">        task_done = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> task_done:</span><br><span class="line">            <span class="keyword">if</span> task.info.state == <span class="string">'success'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">True</span>, <span class="string">"data"</span>: task.info.result&#125;</span><br><span class="line">            <span class="keyword">if</span> task.info.state == <span class="string">'error'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"data"</span>: task.info.error.msg&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Example：虚拟机网卡启停"><a href="#Example：虚拟机网卡启停" class="headerlink" title="Example：虚拟机网卡启停"></a>Example：虚拟机网卡启停</h3><p>以下定义了一个虚拟机的类，继承 vSphere 的基类，在切换虚拟机网络适配器状态的方法中，传入虚拟机的名称、网卡的编号，以及该网卡需要做connect还是disconnect变更，就可以实现该需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"><span class="keyword">from</span> pyVmomi <span class="keyword">import</span> vim</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pyVim.task <span class="keyword">import</span> WaitForTask</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtualMachine</span><span class="params">(vSphereBase)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">change_nic_state</span><span class="params">(self, vmname, unitnumber, state)</span>:</span></span><br><span class="line">        <span class="comment"># 更改虚拟机网络适配器状态</span></span><br><span class="line">        si, message = self._connect_vc_exception_message()</span><br><span class="line">        <span class="keyword">if</span> si <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            logger.error(str(message))</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"message"</span>: str(message)&#125;</span><br><span class="line">        logger.info(str(message))</span><br><span class="line">        <span class="comment"># disconnect vc</span></span><br><span class="line">        atexit.register(Disconnect, si)</span><br><span class="line"></span><br><span class="line">        content = si.RetrieveContent()</span><br><span class="line">        logger.info(<span class="string">'Searching for VM &#123;&#125;'</span>.format(vmname))</span><br><span class="line">        vm_obj = self.get_obj(content, [vim.VirtualMachine], vmname)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> vm_obj:</span><br><span class="line">            result = self.update_virtual_nic_state(vm_obj, unitnumber, state)</span><br><span class="line">            logger.info(<span class="string">'VM NIC &#123;&#125; successfully'</span> \</span><br><span class="line">                        <span class="string">' state changed to &#123;&#125;'</span>.format(unitnumber, state))</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: result&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">'VM not found'</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"message"</span>: <span class="string">"VM not found"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_virtual_nic_state</span><span class="params">(self, vm_obj, nic_number, new_nic_state)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param vm_obj: Virtual Machine Object</span></span><br><span class="line"><span class="string">        :param nic_number: Network Interface Controller Number</span></span><br><span class="line"><span class="string">        :param new_nic_state: Either Connect, Disconnect or Delete</span></span><br><span class="line"><span class="string">        :return: True if success</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nic_prefix_label = <span class="string">'Network adapter '</span></span><br><span class="line">        nic_label = nic_prefix_label + str(nic_number)</span><br><span class="line">        virtual_nic_device = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> vm_obj.config.hardware.device:</span><br><span class="line">            <span class="keyword">if</span> isinstance(dev, vim.vm.device.VirtualEthernetCard) \</span><br><span class="line">                    <span class="keyword">and</span> dev.deviceInfo.label == nic_label:</span><br><span class="line">                virtual_nic_device = dev</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> virtual_nic_device:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Virtual &#123;&#125; could not be found.'</span>.format(nic_label))</span><br><span class="line"></span><br><span class="line">        virtual_nic_spec = vim.vm.device.VirtualDeviceSpec()</span><br><span class="line">        virtual_nic_spec.operation = \</span><br><span class="line">            vim.vm.device.VirtualDeviceSpec.Operation.remove \</span><br><span class="line">                <span class="keyword">if</span> new_nic_state == <span class="string">'delete'</span> \</span><br><span class="line">                <span class="keyword">else</span> vim.vm.device.VirtualDeviceSpec.Operation.edit</span><br><span class="line">        virtual_nic_spec.device = virtual_nic_device</span><br><span class="line">        virtual_nic_spec.device.key = virtual_nic_device.key</span><br><span class="line">        virtual_nic_spec.device.macAddress = virtual_nic_device.macAddress</span><br><span class="line">        virtual_nic_spec.device.backing = virtual_nic_device.backing</span><br><span class="line">        virtual_nic_spec.device.wakeOnLanEnabled = \</span><br><span class="line">            virtual_nic_device.wakeOnLanEnabled</span><br><span class="line">        connectable = vim.vm.device.VirtualDevice.ConnectInfo()</span><br><span class="line">        <span class="keyword">if</span> new_nic_state == <span class="string">'connect'</span>:</span><br><span class="line">            connectable.connected = <span class="literal">True</span></span><br><span class="line">            connectable.startConnected = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> new_nic_state == <span class="string">'disconnect'</span>:</span><br><span class="line">            connectable.connected = <span class="literal">False</span></span><br><span class="line">            connectable.startConnected = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            connectable = virtual_nic_device.connectable</span><br><span class="line">        virtual_nic_spec.device.connectable = connectable</span><br><span class="line">        dev_changes = []</span><br><span class="line">        dev_changes.append(virtual_nic_spec)</span><br><span class="line">        spec = vim.vm.ConfigSpec()</span><br><span class="line">        spec.deviceChange = dev_changes</span><br><span class="line">        task = vm_obj.ReconfigVM_Task(spec=spec)</span><br><span class="line">        WaitForTask(task)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>在上文定义了实例化 vSphere 和切换网卡的方法后，我们使用以下代码进行调用，由于对比简单，这里不进行赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    account = <span class="string">"1.1.1.1"</span></span><br><span class="line">    password = <span class="string">"administrator@vsphere.local"</span></span><br><span class="line">    vc_host = <span class="string">"xxxxxx"</span></span><br><span class="line">    <span class="comment"># 连接vSphere，生成vSphere的实例</span></span><br><span class="line">    vm = vSphereBase(account, password, vc_host)</span><br><span class="line">    <span class="comment"># 对该vSphere中的虚拟机进行网卡变更，返回结果</span></span><br><span class="line">    vm_name = <span class="string">"device-192.168.1.1"</span></span><br><span class="line">    unit_number = <span class="number">1</span></span><br><span class="line">    vm_state = <span class="string">"disconnect"</span></span><br><span class="line">    result = vm.change_nic_state(vm_name, unit_number, vm_state)</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于VMware vSphere中设备众多，且有层级嵌套的关联关系，官方只提供了所有的接口文档和少量案例，更多需求额实现需要自己去开发，就如上文中的描述，首先连接vSphere（vCenter），然后针对需要的概念模型进行数据采集或者操作变更。</p>
<hr>
<p><strong><em>官方文档：</em></strong><br><a href="https://github.com/vmware/pyvmomi/" target="_blank" rel="noopener">Github pyvmomi 官方地址</a><br><a href="https://github.com/vmware/pyvmomi-community-samples/" target="_blank" rel="noopener">Github pyvmomi samples 官方实例</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>VMware vSphere</tag>
        <tag>vCenter</tag>
        <tag>虚拟化</tag>
        <tag>pyvmomi</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中构建MySQL连接池</title>
    <url>/2020/11/09/python-mysql-pool/</url>
    <content><![CDATA[<blockquote>
<p><b>背景：为何要使用连接池</b></p>
</blockquote>
<p>数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。</p>
<a id="more"></a>

<blockquote>
<p><b>连接池的概念</b></p>
</blockquote>
<p>数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对连接池中的连接进行申请，使用，释放。<br>创建数据库连接池是一个很耗时的操作，也容易对数据库造成安全隐患。所以，在程序初始化的时候，集中创建多个数据库连接池，并把他们集中管理，供程序使用，可以保证较快的数据库读写速度，还更加的安全可靠。</p>
<blockquote>
<p><b>影响因素</b></p>
</blockquote>
<p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数制约。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：</p>
<ul>
<li>最小连接数：<br>是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。</li>
<li>最大连接数：<br>是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</li>
<li>最小连接数与最大连接数差距：<br>最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。</li>
</ul>
<blockquote>
<p><b>python实现</b></p>
</blockquote>
<p>使用 python 模块 <kbd style="color:#ff7600">DBUtils</kbd> 来实现</p>
<ul>
<li>mincached: 最小空闲连接数</li>
<li>maxcached: 最大空闲连接数</li>
<li>maxconnections: 最大允许连接数</li>
</ul>
<p><strong><em>数据库配置config.py:</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File  :config.py</span></span><br><span class="line"><span class="string">@Author:Sapphire</span></span><br><span class="line"><span class="string">@Date  :2020/11/9 15:06</span></span><br><span class="line"><span class="string">@Desc  :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">DBHOST = <span class="string">"localhost"</span></span><br><span class="line">DBPORT = <span class="number">3306</span></span><br><span class="line">DBUSER = <span class="string">"root"</span></span><br><span class="line">DBPWD = <span class="string">"xxxxx"</span></span><br><span class="line">DBNAME = <span class="string">"xxxxx"</span></span><br><span class="line">DBCHAR = <span class="string">"utf8"</span></span><br></pre></td></tr></table></figure>

<p><strong><em>连接池实现，与实现mysql查询、插入、更新、删除数据，及事务等功能：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File  :mysql_pool.py</span></span><br><span class="line"><span class="string">@Author:Sapphire</span></span><br><span class="line"><span class="string">@Date  :2020/11/9 15:02</span></span><br><span class="line"><span class="string">@Desc  :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1、执行带参数的SQL时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</span></span><br><span class="line"><span class="string">２、在格式SQL中不需要使用引号指定数据类型，系统会根据输入参数自动识别</span></span><br><span class="line"><span class="string">３、在输入的值中不需要使用转意函数，系统会自动处理</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> MySQLdb.cursors <span class="keyword">import</span> DictCursor</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="comment"># from PooledDB import PooledDB</span></span><br><span class="line"><span class="keyword">import</span> mysql_pool.config <span class="keyword">as</span> Config</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> home_application.models <span class="keyword">import</span> AlarmDBConfig</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class="line"><span class="string">    释放连接对象：conn.close()或del conn</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 连接池对象</span></span><br><span class="line">    __pool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class="line">        self._conn = Mysql.__getConn()</span><br><span class="line">        self._cursor = self._conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getConn</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class="line"><span class="string">        @return MySQLdb.connection</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> Mysql.__pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            __pool = PooledDB(creator=MySQLdb, mincached=<span class="number">1</span>, maxcached=<span class="number">20</span>,</span><br><span class="line">                              host=Config.DBHOST, port=Config.DBPORT,</span><br><span class="line">                              user=Config.DBUSER,</span><br><span class="line">                              passwd=Config.DBPWD, db=Config.DBNAME, use_unicode=<span class="literal">False</span>,</span><br><span class="line">                              charset=Config.DBCHAR, cursorclass=DictCursor)</span><br><span class="line">        <span class="keyword">return</span> __pool.connection()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAll</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出所有结果集</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchall()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出第一条</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchone()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMany</span><span class="params">(self, sql, num, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出num条结果</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param num:取得的结果条数</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchmany(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertOne</span><span class="params">(self, sql, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 向数据表插入一条记录</span></span><br><span class="line"><span class="string">        @param sql:要插入的SQL格式</span></span><br><span class="line"><span class="string">        @param value:要插入的记录数据tuple/list</span></span><br><span class="line"><span class="string">        @return: insertId 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cursor.execute(sql, value)</span><br><span class="line">        <span class="keyword">return</span> self.__getInsertId()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertMany</span><span class="params">(self, sql, values)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 向数据表插入多条记录</span></span><br><span class="line"><span class="string">        @param sql:要插入的SQL格式</span></span><br><span class="line"><span class="string">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = self._cursor.executemany(sql, values)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getInsertId</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取当前连接最后一次插入操作生成的id,如果没有则为０</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cursor.execute(<span class="string">"SELECT @@IDENTITY AS id"</span>)</span><br><span class="line">        result = self._cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>][<span class="string">'id'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__query</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 更新数据表记录</span></span><br><span class="line"><span class="string">        @param sql: SQL格式及条件，使用(%s,%s)</span></span><br><span class="line"><span class="string">        @param param: 要更新的  值 tuple/list</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__query(sql, param)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 删除数据表记录</span></span><br><span class="line"><span class="string">        @param sql: SQL格式及条件，使用(%s,%s)</span></span><br><span class="line"><span class="string">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__query(sql, param)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 开启事务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._conn.autocommit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self, option=<span class="string">'commit'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 结束事务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> option == <span class="string">'commit'</span>:</span><br><span class="line">            self._conn.commit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._conn.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispose</span><span class="params">(self, isEnd=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 释放连接池资源</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isEnd == <span class="number">1</span>:</span><br><span class="line">            self.end(<span class="string">'commit'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.end(<span class="string">'rollback'</span>)</span><br><span class="line">        self._cursor.close()</span><br><span class="line">        self._conn.close()</span><br></pre></td></tr></table></figure>


<p><strong><em>连接池使用示例：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mysql = Mysql()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找数据</span></span><br><span class="line">    search_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    SELECT id, event FROM monitortb WHERE event in &#123;&#125; AND status = 'OP'</span></span><br><span class="line"><span class="string">    """</span>.format(<span class="string">"test"</span>)</span><br><span class="line">    search_result = mysql.getAll(search_sql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新数据</span></span><br><span class="line">    increase_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    UPDATE monitortb SET cnt = cnt + &#123;&#125; WHERE id = &#123;&#125;</span></span><br><span class="line"><span class="string">    """</span>.format([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    insert_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    INSERT INTO monitortb (</span></span><br><span class="line"><span class="string">    intype, innum, level, sysname, pl, clr, cnt, indate, event, status</span></span><br><span class="line"><span class="string">    ) VALUES (</span></span><br><span class="line"><span class="string">    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 需要插入的多条数据的列表 </span></span><br><span class="line">    insert_value_list = []</span><br><span class="line">    mysql.insertMany(insert_sql, insert_value_list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 断开连接池</span></span><br><span class="line">    mysql.dispose()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL修炼</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
        <tag>数据库连接池</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2020/11/01/red-black-tree/</url>
    <content><![CDATA[<p>红黑树其实就是一种数据结构，设计它的目的就是为了高效地进行增删改查，我们可以从二叉查找树逐渐引入到红黑树：</p>
<h3 id="一、二叉查找树"><a href="#一、二叉查找树" class="headerlink" title="一、二叉查找树"></a>一、二叉查找树</h3><p>特性：<br>（1）左子树上所有结点的值均小于或等于它的根结点的值；<br>（2）右子树上所有结点的值均大于或等于它的根结点的值。</p>
<a id="more"></a>

<p>如果想要查找一个数：<br>在查找的时候，先与根节点比较，比根节点大则从右子树查找，比根节点小则从左子树查找，然后重复上面的过程，一直到找到我们需要的元素为止。<br>其实对于添加和删除，原理也是一样的，我们第一步就是找到我们需要插入的位置，然后把元素插入即可。</p>
<p>缺点：<br><strong><em>普通的二叉查找树在极端情况下可退化成链表，此时的增删查效率都会比较低下。</em></strong></p>
<p><img data-src="/picture/Binary_search_tree_2.png" alt="avatar"><br>例如，如果以9位根节点，当依次插入13、15、17、19后，就会发生“一边倒”的情况，二叉查找树的优势完全丧失了。<br>二叉搜索树退化成了链表，搜索的时间复杂度为 O(n)。<br>叉查找树在插入的时候变成了“一条腿”，也就是丧失了平衡，那我们干脆做出一点改进，使用平衡二叉树吧。</p>
<h3 id="二、平衡二叉树"><a href="#二、平衡二叉树" class="headerlink" title="二、平衡二叉树"></a>二、平衡二叉树</h3><p>平衡二叉树，也叫作AVL树，</p>
<p><img data-src="/picture/Balanced_binary_tree.png" alt="avatar"></p>
<p>与二叉查找树相比，拥有以下特性：<br>（1）从任何一个节点出发，左右子树深度之差的绝对值不超过1；<br>（2）左右子树仍然为平衡二叉树。</p>
<p>如果需要插入一个数：<br>如果该树破坏了平衡，则平衡二叉树相应地会发生左旋或者右旋，二叉树就重新回到了平衡。<br>最终会发现一个结论，那就是平衡二叉树在插入时最多只需要两次旋转就会重新恢复平衡。</p>
<p>平衡二叉树在查找时既有着二叉查找树的优越性，在插入时还能通过调整继续保持着。<br>那么为什么还要使用到红黑树呢？我觉得可以从以下两个方面来考虑：<br>（1）删除：对于平衡二叉树来说，在最坏情况下，需要维护从被删节点到根节点这条路径上所有节点的平衡性，旋转的量级是O(logN)。<br>但是红黑树就不一样了，最多只需3次旋转就会重新平衡，旋转的量级是O(1)。<br>（2）保持平衡：平衡二叉树高度平衡，这也就意味着在大量插入和删除节点的场景下，平衡二叉树为了保持平衡需要调整的频率会更高。</p>
<h3 id="三、红黑树"><a href="#三、红黑树" class="headerlink" title="三、红黑树"></a>三、红黑树</h3><p>红黑树是一种自平衡的二叉查找树，是一种高效的查找树；<br>红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作；<br>红黑树和名字一样，里面涉及到两种颜色：红色和黑色。</p>
<p><img data-src="/picture/red_black_tree.png" alt="avatar"></p>
<p><em><strong>如图可知，他有如下重要特征：</strong><br>（1）每个节点只有两种颜色：红色和黑色。<br>（2）根节点是黑色的。<br>（3）每个叶子节点（NIL）都是黑色的空节点。<br>（4）从根节点到叶子节点，不会出现两个连续的红色节点。<br>（5）从任何一个节点出发，到叶子节点，这条路径上都有相同数目的黑色节点。</em><br>这段关于 红黑树 的描述来源于<strong>《算法导论》</strong><br>这五条特征看起来真的很复杂，不过正是由于这些复杂的特征才保证了红黑树的良好特性</p>
<h3 id="四、使用场景："><a href="#四、使用场景：" class="headerlink" title="四、使用场景："></a>四、使用场景：</h3><p>1、java中的HashMap和TreeMap；<br>2、Linux内核中一个常见的数据结构。</p>
<hr>
<p>参考链接：<a href="https://www.zhihu.com/question/312327402/answer/1560653215" target="_blank" rel="noopener">红黑树详解</a>  </p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>B树与B+树</title>
    <url>/2020/10/17/B-B-tree/</url>
    <content><![CDATA[<h2 id="一、B树和B-树的区别"><a href="#一、B树和B-树的区别" class="headerlink" title="一、B树和B+树的区别"></a>一、B树和B+树的区别</h2><p>很明显，我们要想弄清楚原因就要知道B树和B+树的区别。为了不长篇大论。我们直接给出他们的形式总结他们的特点。</p>
<h3 id="1、B树"><a href="#1、B树" class="headerlink" title="1、B树"></a>1、B树</h3><p>B树是一种自平衡的搜索树，形式很简单：</p>
<a id="more"></a>

<p><img data-src="/picture/b_tree.png" alt="avatar"></p>
<p>这就是一颗B树。针对我们这个问题的最核心的特点如下：<br>（1）多路，非二叉树<br>（2）每个节点既保存索引，又保存数据<br>（3）搜索时相当于二分查找<br>在这里我们假定都已经了解了B树相关的结构。</p>
<h3 id="2、B-树"><a href="#2、B-树" class="headerlink" title="2、B+树"></a>2、B+树</h3><p>B+树是B-树的变种：</p>
<p><img data-src="/picture/b+_tree.png" alt="avatar"></p>
<p>最核心的特点如下：<br>（1）多路非二叉<br>（2）只有叶子节点保存数据<br>（3）搜索时相当于二分查找<br>（4）增加了相邻接点的指向指针。<br>从上面我们可以看出最核心的区别主要有俩，一个是数据的保存位置，一个是相邻节点的指向。<br>就是这俩造成了MongoDB和Mysql的差别。为什么呢？</p>
<h3 id="3、B树和B-树的区别"><a href="#3、B树和B-树的区别" class="headerlink" title="3、B树和B+树的区别"></a>3、B树和B+树的区别</h3><p>（1）B+树查询时间复杂度固定是logn，B树查询复杂度最好是 O(1)。<br>（2）B+树相邻接点的指针可以大大增加区间访问性，可使用在范围查询等，而B-树每个节点 key 和 data 在一起，则无法区间查找。<br>（3）B+树更适合外部存储，也就是磁盘存储。由于内节点无 data 域，每个节点能索引的范围更大更精确<br>（4）注意这个区别相当重要，是基于（1）（2）（3）的，B树每个节点即保存数据又保存索引，所以磁盘IO的次数很少，B+树只有叶子节点保存，磁盘IO多，但是区间访问比较好。</p>
<p>有了他们的区别之后，现在我们再来解释这个原因就好多了。</p>
<h2 id="二、原因解释"><a href="#二、原因解释" class="headerlink" title="二、原因解释"></a>二、原因解释</h2><p>想要解释原因，我们还必须要了解一下MongoDB和Mysql的基本概念。</p>
<h4 id="1、MongoDB"><a href="#1、MongoDB" class="headerlink" title="1、MongoDB"></a>1、MongoDB</h4><p>MongoDB 是文档型的数据库，是一种 nosql，它使用类 Json 格式保存数据。比如之前我们的表可能有用户表、订单表、购物篮表等等，还要建立他们之间的外键关联关系。<br>但是类Json就不一样了。我们可以看到这种形式更简单，通俗易懂。那为什么 MongoDB 使用B-树呢？</p>
<p>MongoDB使用B树，所有节点都有Data域，只要找到指定索引就可以进行访问，无疑单次查询平均快于Mysql。</p>
<h4 id="2、Mysql"><a href="#2、Mysql" class="headerlink" title="2、Mysql"></a>2、Mysql</h4><p>Mysql作为一个关系型数据库，数据的关联性是非常强的，区间访问是常见的一种情况，B+树由于数据全部存储在叶子节点，并且通过指针串在一起，这样就很容易的进行区间遍历甚至全部遍历。</p>
<hr>
<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/102628897" target="_blank" rel="noopener">为什么 MongoDB 索引选择B树，而 Mysql 选择B+树</a>  </p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>B树与B+树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列基础及选型</title>
    <url>/2020/10/16/message-queue-basic/</url>
    <content><![CDATA[<blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2></blockquote>
<p>MQ全称为Message Queue，消息队列（MQ）是一种应用程序对应用程序或者模块对模块的通信方法。MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。</p>
<p>可以简单理解为：将要传输的数据放在队列中。</p>
<ul>
<li>把数据放在消息队列的称为生产者。</li>
<li>从消息队列中取数据的称为消费者。</li>
</ul>
<p>目前使用较多的消息队列有<code>ActiveMQ</code>，<code>RabbitMQ</code>，<code>Kafka</code>，<code>RocketMQ</code>。</p>
<p>作者开发中常用的Celery，会选择 <code>RabbitMQ</code> 和<code>Redis</code>作为消息队列 ，蓝鲸平台上也是将<code>kafka</code>作为分布式流处理平台。</p>
<a id="more"></a>

<h2 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h2><h3 id="点对点"><a href="#点对点" class="headerlink" title="点对点"></a>点对点</h3><p>消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。</p>
<p><a href="https://camo.githubusercontent.com/49be931bdfb4a55a0f80ffd7520053d659d8dd91d9a9ccf43a2f621b38de56eb/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f696d6167652d32303139313231323031313235303631332e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/49be931bdfb4a55a0f80ffd7520053d659d8dd91d9a9ccf43a2f621b38de56eb/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f696d6167652d32303139313231323031313235303631332e706e67" alt="img"></a></p>
<h3 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h3><p>消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。</p>
<p><a href="https://camo.githubusercontent.com/e6e010e3204692a0798e4fde10ce694206e14b1a50b336cd57de98ab7c2bafc6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f696d6167652d32303139313231323031313431303337342e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/e6e010e3204692a0798e4fde10ce694206e14b1a50b336cd57de98ab7c2bafc6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f696d6167652d32303139313231323031313431303337342e706e67" alt="img"></a></p>
<p>发布与订阅模式和观察者模式有以下不同：</p>
<ul>
<li>观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，生产者与消费者不知道对方的存在，它们之间通过频道进行通信。</li>
<li>观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，生产者向频道发送一个消息之后，就不需要关心消费者何时去订阅这个消息，可以立即返回。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/9e5b9d72f2a4175954f78f6e9479dba1a2e56373379da6907354b29cb27fd300/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f696d6167652d32303139313231323031313734373936372e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/9e5b9d72f2a4175954f78f6e9479dba1a2e56373379da6907354b29cb27fd300/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f696d6167652d32303139313231323031313734373936372e706e67" alt="img"></a></p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p>
<p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p>
<p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p>
<h3 id="流量削锋"><a href="#流量削锋" class="headerlink" title="流量削锋"></a>流量削锋</h3><p>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p>
<p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p>
<h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p>
<p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p>
<h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p>有了消息队列，我们只需要关心消息是否送达了队列，至于谁希望订阅，是下游的事情，无疑极大地减少了开发和联调的工作量。</p>
<h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><h3 id="发送端的可靠性"><a href="#发送端的可靠性" class="headerlink" title="发送端的可靠性"></a>发送端的可靠性</h3><p>发送端完成操作后一定能将消息成功发送到消息队列中。</p>
<p>实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</p>
<h3 id="接收端的可靠性"><a href="#接收端的可靠性" class="headerlink" title="接收端的可靠性"></a>接收端的可靠性</h3><p>接收端能够从消息队列成功消费一次消息。</p>
<p>两种实现方法：</p>
<ul>
<li>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</li>
<li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li>
</ul>
<h2 id="消息队列比较"><a href="#消息队列比较" class="headerlink" title="消息队列比较"></a>消息队列比较</h2><img data-src="/2020/10/16/message-queue-basic/selection.png" class>

<h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p><strong>优点</strong></p>
<ul>
<li>单机吞吐量：万级</li>
<li>topic数量都吞吐量的影响：</li>
<li>时效性：ms级</li>
<li>可用性：高，基于主从架构实现高可用性</li>
<li>消息可靠性：有较低的概率丢失数据</li>
<li>功能支持：MQ领域的功能极其完备</li>
</ul>
<p><strong>缺点:</strong></p>
<p>官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。</p>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>号称大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开Kafka，这款为大数据而生的消息中间件，以其百万级TPS的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。</p>
<p>Apache Kafka它最初由LinkedIn公司基于独特的设计实现为一个分布式的提交日志系统( a distributed commit log)，之后成为Apache项目的一部分。</p>
<p>目前已经被LinkedIn，Uber, Twitter, Netflix等大公司所采纳。</p>
<p><strong>优点</strong></p>
<ul>
<li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。</li>
<li>时效性：ms级</li>
<li>可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li>
<li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</li>
<li>有优秀的第三方Kafka Web管理界面Kafka-Manager；</li>
<li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li>
<li>功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</li>
</ul>
<p><strong>缺点：</strong></p>
<ol>
<li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li>
<li>使用短轮询方式，实时性取决于轮询间隔时间；</li>
<li>消费失败不支持重试；</li>
<li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li>
<li>社区更新较慢；</li>
</ol>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ 2007年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p>
<p><strong>RabbitMQ优点</strong>：</p>
<ol>
<li>由于erlang语言的特性，mq 性能较好，高并发；</li>
<li>吞吐量到万级，MQ功能比较完备 </li>
<li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</li>
<li>开源提供的管理界面非常棒，用起来很好用</li>
<li>社区活跃度高；</li>
</ol>
<p><strong>RabbitMQ缺点：</strong></p>
<ol>
<li>erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。</li>
<li>RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。</li>
<li>需要学习比较复杂的接口和协议，学习和维护成本较高。</li>
</ol>
<h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>RocketMQ出自 阿里公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。</p>
<p>RocketMQ在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等场景。</p>
<p><strong>RocketMQ优点：</strong></p>
<ol>
<li>单机吞吐量：十万级</li>
<li>可用性：非常高，分布式架构</li>
<li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li>
<li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li>
<li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li>
<li>源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控</li>
</ol>
<p><strong>RocketMQ缺点：</strong></p>
<ol>
<li>支持的客户端语言不多，目前是java及c++，其中c++不成熟；</li>
<li>社区活跃度一般</li>
<li>没有在 mq 核心中去实现JMS等接口，有些系统要迁移需要修改大量代码</li>
</ol>
<h2 id="消息队列选型"><a href="#消息队列选型" class="headerlink" title="消息队列选型"></a>消息队列选型</h2><h3 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h3><p>Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。</p>
<p>大型公司建议可以选用，如果有日志采集功能，肯定是首选kafka了。</p>
<p>例如笔者所用的蓝鲸平台也是如此使用Kafka的。</p>
<h3 id="RocketMQ-1"><a href="#RocketMQ-1" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。</p>
<p>RoketMQ在稳定性上可能更值得信赖，这些业务场景在阿里双11已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择RocketMQ。</p>
<h3 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ结合erlang语言本身的并发优势，性能较好，社区活跃度也比较高，但是不利于做二次开发和维护。不过，RabbitMQ的社区十分活跃，可以解决开发过程中遇到的bug。</p>
<p>如果你的数据量没有那么大，小公司优先选择功能比较完备的RabbitMQ。</p>
<p>例如笔者使用Django开发是SaaS，由于对数据吞吐量要求不高，就会使用RabbitMQ，或者使用成本更低的Redis，利用LIST的两端压入或者弹出元素的特性，来实现消息队列的作用。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://developers-club.com/posts/270339/" target="_blank" rel="noopener">Observer vs Pub-Sub</a></li>
<li><a href="https://blog.csdn.net/lizhitao/article/details/47723105" target="_blank" rel="noopener">消息队列中点对点与发布订阅区别</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.md" target="_blank" rel="noopener">GitHub - CyC2018/CS-Notes</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60288391" target="_blank" rel="noopener">消息队列 - Kafka、RocketMQ、RabbitMQ的优劣势比较</a></li>
</ul>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>RabbitMQ</tag>
        <tag>消息队列</tag>
        <tag>ActiveMQ</tag>
        <tag>Kafka</tag>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware vSphere 之 vCenter 指标采集</title>
    <url>/2020/10/09/vmware-vsphere/</url>
    <content><![CDATA[<blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></blockquote>
<p>VMware vSphere 是 VMware 的虚拟化平台，可将数据中心转换为包括 CPU、存储和网络资源的聚合计算基础架构。vSphere 将这些基础架构作为一个统一的运行环境进行管理，并提供工具来管理加入该环境的数据中心。</p>
<p>在对接或采集VMware vSphere虚拟化平台的场景中，比如配置八爪鱼，需要对其中的虚拟化数据中心、虚拟化集群、物理机、虚拟机、存储等指标进行多方位的采集，我们根据VMware提供的相应sdk接口，对接到蓝鲸的SaaS中。</p>
<a id="more"></a>
<blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3></blockquote>
<h3 id="一-vSphere的模型结构"><a href="#一-vSphere的模型结构" class="headerlink" title="一   vSphere的模型结构"></a>一   vSphere的模型结构</h3><h4 id="1-1-模型及关联关系"><a href="#1-1-模型及关联关系" class="headerlink" title="1.1    模型及关联关系"></a>1.1    模型及关联关系</h4><h5 id="1-1-1-名词解释"><a href="#1-1-1-名词解释" class="headerlink" title="1.1.1   名词解释"></a>1.1.1   名词解释</h5><p>VCenter: 虚拟机管理中心，</p>
<p>DCenter: 虚拟化数据中心，</p>
<p>Cluster: 虚拟化集群</p>
<p>Server: 物理机</p>
<p>Virtual: 虚拟机</p>
<p>Storage: 存储</p>
<h5 id="1-1-2-从属关系"><a href="#1-1-2-从属关系" class="headerlink" title="1.1.2   从属关系"></a>1.1.2   从属关系</h5><p>从属关系: VCenter =&gt; DCenter =&gt; Cluster =&gt; Server =&gt; Virtual &amp; Storage</p>
<h5 id="1-1-3-指标采集"><a href="#1-1-3-指标采集" class="headerlink" title="1.1.3   指标采集"></a>1.1.3   指标采集</h5><p>以上是最常见、最标准的多级结构，管理平台到数据中心，到集群，再到物理机，物理机包含虚拟机和存储单元。但是这并不是固定的，某些情况，我们也可以直接把物理机挂载在数据中心DCenter中，而存储也可以直接关联到集群，这就导致了我们采集各项指标的时候，事先并不知道客户环境是否按照标准化的结构来构建VCenter，关联关系也各不相同，导致采集到的数据与CMDB模型和关联关系不适配。这些问题需要调研的时候确定环境的VCenter结构，并且CMDB建模时与之适配，这才能使得数据采集上报工作正常开展。</p>
<h3 id="二-vSphere采集"><a href="#二-vSphere采集" class="headerlink" title="二   vSphere采集"></a>二   vSphere采集</h3><h4 id="2-1-对接vSphere"><a href="#2-1-对接vSphere" class="headerlink" title="2.1    对接vSphere"></a>2.1    对接vSphere</h4><h5 id="2-1-1-使用VMware官方sdk"><a href="#2-1-1-使用VMware官方sdk" class="headerlink" title="2.1.1   使用VMware官方sdk"></a>2.1.1   使用VMware官方sdk</h5><p>VMware官方提供了多种多种sdk，由于我们使用Django开发SaaS，直接使用pip安装依赖即可，版本号由vSphere版本确定，现最新版为7.0，6.x是最常见的版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyvmomi==6.5</span><br></pre></td></tr></table></figure>



<h5 id="2-1-2-连接vSphere"><a href="#2-1-2-连接vSphere" class="headerlink" title="2.1.2   连接vSphere"></a>2.1.2   连接vSphere</h5><p>采集之前，我们需要提供vSphere的地址，ip或者有DNS的域名都可以，以及需要vSphere的管理员账号和密码，账号通常为<a href="mailto:administrator@vsphere.local">administrator@vsphere.local</a>。有了以上信息后，我们通过ssl模块连接到vSphere，具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_vc</span><span class="params">(vcserver)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1) </span><br><span class="line">        context.verify_mode = ssl.CERT_NONE  </span><br><span class="line">        si = SmartConnect(host=vcserver[<span class="string">"ip"</span>], user=vcserver[<span class="string">"user"</span>], pwd=vcserver[<span class="string">"password"</span>], port=<span class="number">443</span>, sslContext=context)  </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        context = ssl._create_unverified_context()  </span><br><span class="line">        context.verify_mode = ssl.CERT_NONE  </span><br><span class="line">        si = SmartConnect(host=vcserver[<span class="string">"ip"</span>], user=vcserver[<span class="string">"user"</span>], pwd=vcserver[<span class="string">"password"</span>], port=<span class="number">443</span>, sslContext=context)  </span><br><span class="line">    <span class="keyword">return</span> si.RetrieveContent()</span><br></pre></td></tr></table></figure>



<h4 id="2-2-采集模型指标"><a href="#2-2-采集模型指标" class="headerlink" title="2.2    采集模型指标"></a>2.2    采集模型指标</h4><p>由于vSphere是层级结构，我们想要采集某一层的指标，就需要从上往下逐层采集，开发时，我们需要引入vSphere的sdk。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect </span><br><span class="line"><span class="keyword">from</span> pyVmomi <span class="keyword">import</span> vim, vmodl</span><br></pre></td></tr></table></figure>



<h5 id="2-2-1-VCenter"><a href="#2-2-1-VCenter" class="headerlink" title="2.2.1   VCenter"></a>2.2.1   VCenter</h5><p>VCenter是关联关系最上的一层结构，获取VCenter的信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vc_info</span><span class="params">(content)</span>:</span> </span><br><span class="line">    <span class="string">"""获取VC服务器配置信"""</span> </span><br><span class="line">    hostname = content.setting.QueryOptions(<span class="string">"VirtualCenter.FQDN"</span>)[<span class="number">0</span>].value </span><br><span class="line">    ver = content.about.version </span><br><span class="line">    licensesinfo = [&#123;<span class="string">"name"</span>: l.name, <span class="string">"license"</span>: l.licenseKey, <span class="string">"costUnit"</span>: l.costUnit,  <span class="string">"total"</span>: l.total <span class="keyword">if</span> l.total != <span class="number">0</span> <span class="keyword">else</span> <span class="string">"Unlimited"</span>, <span class="string">"used"</span>: l.used&#125; <span class="keyword">for</span> l <span class="keyword">in</span> content.licenseManager.licenses] </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"hostname"</span>: hostname, <span class="string">"version"</span>: ver, <span class="string">"licensesinfo"</span>: licensesinfo&#125;</span><br></pre></td></tr></table></figure>

<p>如上，使用connect_vc连接vSphere返回的content作为参数，实例代码中展示了采集版本和licenses的信息，更多的参数如日志的等级、日志文件大小及数据库信息等，可以自行添加，不做展示。而想要采集该VCenter下有多少DCenter，则需要往下继续采集统计。</p>
<h5 id="2-2-2-DCenter"><a href="#2-2-2-DCenter" class="headerlink" title="2.2.2   DCenter"></a>2.2.2   DCenter</h5><p>同上，由于一个vSphere只有一个VCenter，所以我们可以直接采集到所有DCenter，不需要额外的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dcenter</span><span class="params">(self)</span>:</span></span><br><span class="line">    container = self.connect.viewManager.CreateContainerView(self.connect.rootFolder, [vim.Datacenter], <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> dcenter <span class="keyword">in</span> container.view:</span><br><span class="line">        dcenter_name = dcenter.name</span><br><span class="line">        dcenter_moid = dcenter._moId</span><br><span class="line">    <span class="keyword">return</span> dcenter_moid</span><br></pre></td></tr></table></figure>

<p>self.connect为连接成功vSphere后返回的content，这样我们就采集到了DCenter的名称及moid（唯一标识），同理，需要额外参数可自行添加，官方文档有详细指标说明。</p>
<h5 id="2-2-3-Cluster"><a href="#2-2-3-Cluster" class="headerlink" title="2.2.3   Cluster"></a>2.2.3   Cluster</h5><p>Cluster集群是属于DCenter数据中心下的结构，所以我们需要通过数据中心的moid来获取对应集群信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster</span><span class="params">(self, dcenter_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> dcenter_data <span class="keyword">in</span> dcenter_list:</span><br><span class="line">        moId = dcenter_data[<span class="string">"detail"</span>][<span class="string">"moId"</span>]</span><br><span class="line">        com_info = vm_helper.get_obj_bymoId(self.connect, [vim.Datacenter], moId)</span><br><span class="line">        container = self.connect.viewManager.CreateContainerView(com_info.hostFolder, [vim.ComputeResource], <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> cluster <span class="keyword">in</span> container.view:</span><br><span class="line">            cluster_moid = cluster._moId</span><br><span class="line">            get_cluster_resource(content, cluster_moid)</span><br></pre></td></tr></table></figure>

<p>以上代码通过DCenter的moid获取了属于它的全部Cluster信息，我们使用cluster._moId，便可采集到集群的多项指标，也是最常见的需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster_resource</span><span class="params">(self, content, cluster_moId)</span>:</span></span><br><span class="line">    <span class="string">"""获取群集资源概况"""</span></span><br><span class="line">    cluster = get_obj_bymoId(content, [vim.ClusterComputeResource], cluster_moId)</span><br><span class="line">    summary = cluster.summary</span><br><span class="line">    totalCpuMhz = summary.totalCpu</span><br><span class="line">    totalMemMB = summary.totalMemory</span><br><span class="line">    capacity_list = []</span><br><span class="line">    freeSpace_list = []</span><br><span class="line">    <span class="keyword">for</span> datastore <span class="keyword">in</span> cluster.datastore:</span><br><span class="line">        capacity_list.append(datastore.summary.capacity)</span><br><span class="line">        freeSpace_list.append(datastore.summary.freeSpace)</span><br><span class="line">    totalDiskTB = <span class="string">"%.3f"</span> % (float(sum(capacity_list)) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">    DiskUsedTB = <span class="string">"%.3f"</span> % (float(sum(capacity_list) - sum(freeSpace_list)) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">    resource_quickstats = cluster.resourcePool.summary.quickStats</span><br><span class="line">    cpuUsedMhz = resource_quickstats.overallCpuUsage</span><br><span class="line">    memUsedMB = resource_quickstats.hostMemoryUsage</span><br><span class="line">    <span class="keyword">return</span> cluster</span><br></pre></td></tr></table></figure>

<p>以上代码中，我演示了如何获取集群CPU、内存、磁盘的一些指标，包括总容量和已使用量等，同理，如需更多指标，参照官方文档的字段说明。</p>
<h5 id="2-2-4-Server"><a href="#2-2-4-Server" class="headerlink" title="2.2.4   Server"></a>2.2.4   Server</h5><p>物理机是隶属于集群下的，只需提供集群的moid，便可获取物理机列表，物理机各项指标通过对应物理机的moid获取，参照官方文档字段说明，不多赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_server</span><span class="params">(self, cluster_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> cluster_data <span class="keyword">in</span> cluster_list:</span><br><span class="line">        moId = cluster_data[<span class="string">"detail"</span>][<span class="string">"moId"</span>]</span><br><span class="line">        com_info = vm_helper.get_obj_bymoId(self.connect, [vim.ComputeResource], moId)</span><br><span class="line">        <span class="keyword">for</span> server <span class="keyword">in</span> com_info.host:</span><br><span class="line">            server_name = server.name</span><br><span class="line">            server_moid = server._moId</span><br></pre></td></tr></table></figure>



<h5 id="2-2-5-Virtual-amp-Storage"><a href="#2-2-5-Virtual-amp-Storage" class="headerlink" title="2.2.5   Virtual &amp; Storage"></a>2.2.5   Virtual &amp; Storage</h5><p>虚拟机和存储是挂载在物理机下的，采集方法相同，以下只列出虚拟机的采集方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vm</span><span class="params">(self, server)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> server.vm:</span><br><span class="line">        <span class="keyword">if</span> vm.summary.guest.ipAddress:</span><br><span class="line">            vm_ip = vm.summary.guest.ipAddress</span><br><span class="line">            vm_name = vm.name</span><br><span class="line">            vm_moid = vm.moid</span><br></pre></td></tr></table></figure>

<p>这样就可以采集到虚拟机的ip和名称，适用moid可以同集群一般，采集更多指标。</p>
<h3 id="三-个人总结"><a href="#三-个人总结" class="headerlink" title="三   个人总结"></a>三   个人总结</h3><h4 id="3-1-适用场景分析"><a href="#3-1-适用场景分析" class="headerlink" title="3.1    适用场景分析"></a>3.1    适用场景分析</h4><p>在大多情况下，以上vSphere采集是获取vSphere资产全貌的手段，不推荐作为监控的手段，尤其是在庞大体量的VCenter中，循环且频繁地调用sdk不是长久的方法，或许会对本身产生未知影响。vSphere采集适用的场景为：适用配置八爪鱼获取VCenter下所有层级的实例数据和关联关系，然后录入CMDB，主要为虚拟机的IP，通过IP安装可监控指标的Agent，实现对物理机、虚拟机和存储的指标和健康度。</p>
<hr>
<p>更多指标采集参考官方文档：</p>
<p><a href="https://vdc-download.vmware.com/vmwb-repository/dcr-public/6b586ed2-655c-49d9-9029-bc416323cb22/fa0b429a-a695-4c11-b7d2-2cbc284049dc/doc/index-methods.html" target="_blank" rel="noopener">https://vdc-download.vmware.com/vmwb-repository/dcr-public/6b586ed2-655c-49d9-9029-bc416323cb22/fa0b429a-a695-4c11-b7d2-2cbc284049dc/doc/index-methods.html</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>VMware vSphere</tag>
        <tag>vCenter</tag>
        <tag>虚拟化</tag>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引及优化</title>
    <url>/2020/10/05/mysql-basis/</url>
    <content><![CDATA[<h2 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h2><h3 id="B-Tree-原理"><a href="#B-Tree-原理" class="headerlink" title="B+ Tree 原理"></a>B+ Tree 原理</h3><h4 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h4><p>B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。</p>
<p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p>
<p>在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为 null，则该指针指向节点的所有 key 大于等于 keyi 且小于等于 keyi+1。</p>
<p><a href="https://camo.githubusercontent.com/4d682f9aa8dd74bd32712b7ca85a85b2c213fd4282d62fcc137488dea23ddde9/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f33333537363834392d393237352d343762622d616461372d3864656435663565376337332e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/4d682f9aa8dd74bd32712b7ca85a85b2c213fd4282d62fcc137488dea23ddde9/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f33333537363834392d393237352d343762622d616461372d3864656435663565376337332e706e67" alt="img"></a></p>
<h4 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h4><p>进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p>
<p>插入删除操作会破坏平衡树的平衡性，因此在进行插入删除操作之后，需要对树进行分裂、合并、旋转等操作来维护平衡性。</p>
<h4 id="3-与红黑树的比较"><a href="#3-与红黑树的比较" class="headerlink" title="3. 与红黑树的比较"></a>3. 与红黑树的比较</h4><p>红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，这是因为使用 B+ 树访问磁盘数据有更高的性能。</p>
<p>（一）B+ 树有更低的树高</p>
<p>平衡树的树高 O(h)=O(logdN)，其中 d 为每个节点的出度。红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多。</p>
<p>（二）磁盘访问原理</p>
<p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。</p>
<p>如果数据不在同一个磁盘块上，那么通常需要移动制动手臂进行寻道，而制动手臂因为其物理结构导致了移动效率低下，从而增加磁盘数据读取时间。B+ 树相对于红黑树有更低的树高，进行寻道的次数与树高成正比，在同一个磁盘块上进行访问只需要很短的磁盘旋转时间，所以 B+ 树更适合磁盘数据的读取。</p>
<p>（三）磁盘预读特性</p>
<p>为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。并且可以利用预读特性，相邻的节点也能够被预先载入。</p>
<h3 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h3><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p>
<h4 id="1-B-Tree-索引"><a href="#1-B-Tree-索引" class="headerlink" title="1. B+Tree 索引"></a>1. B+Tree 索引</h4><p>是大多数 MySQL 存储引擎的默认索引类型。</p>
<p>因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。</p>
<p>因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。</p>
<p>可以指定多个列作为索引列，多个索引列共同组成键。</p>
<p>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p>
<p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p>
<p><a href="https://camo.githubusercontent.com/7220f50cca2d4a015b0a23df318b71a4764c6ae8009ba7092938d41045a3cf5b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f34353031366539382d363837392d343730392d383536392d3236326232643664363062392e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/7220f50cca2d4a015b0a23df318b71a4764c6ae8009ba7092938d41045a3cf5b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f34353031366539382d363837392d343730392d383536392d3236326232643664363062392e706e67" alt="img"></a></p>
<p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。</p>
<p><a href="https://camo.githubusercontent.com/4c90ec27dc7dacdb350c31ab4f072685538f1c89dfc4362750fdfa0ca85e7622/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37633334396239312d303530622d346437322d613766382d6563383633323033303765612e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/4c90ec27dc7dacdb350c31ab4f072685538f1c89dfc4362750fdfa0ca85e7622/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37633334396239312d303530622d346437322d613766382d6563383633323033303765612e706e67" alt="img"></a></p>
<h4 id="2-哈希索引"><a href="#2-哈希索引" class="headerlink" title="2. 哈希索引"></a>2. 哈希索引</h4><p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性：</p>
<ul>
<li>无法用于排序与分组；</li>
<li>只支持精确查找，无法用于部分查找和范围查找。</li>
</ul>
<p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p>
<h4 id="3-全文索引"><a href="#3-全文索引" class="headerlink" title="3. 全文索引"></a>3. 全文索引</h4><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</p>
<p>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p>
<p>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</p>
<p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</p>
<h4 id="4-空间数据索引"><a href="#4-空间数据索引" class="headerlink" title="4. 空间数据索引"></a>4. 空间数据索引</h4><p>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p>
<p>必须使用 GIS 相关的函数来维护数据。</p>
<h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><h4 id="1-独立的列"><a href="#1-独立的列" class="headerlink" title="1. 独立的列"></a>1. 独立的列</h4><p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p>
<p>例如下面的查询不能使用 actor_id 列的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT actor_id FROM sakila.actor WHERE actor_id + 1 &#x3D; 5;</span><br></pre></td></tr></table></figure>

<h4 id="2-多列索引"><a href="#2-多列索引" class="headerlink" title="2. 多列索引"></a>2. 多列索引</h4><p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT film_id, actor_ id FROM sakila.film_actor</span><br><span class="line">WHERE actor_id &#x3D; 1 AND film_id &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h4 id="3-索引列的顺序"><a href="#3-索引列的顺序" class="headerlink" title="3. 索引列的顺序"></a>3. 索引列的顺序</h4><p>让选择性最强的索引列放在前面。</p>
<p>索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。</p>
<p>例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT staff_id)&#x2F;COUNT(*) AS staff_id_selectivity,</span><br><span class="line">COUNT(DISTINCT customer_id)&#x2F;COUNT(*) AS customer_id_selectivity,</span><br><span class="line">COUNT(*)</span><br><span class="line">FROM payment;</span><br><span class="line">   staff_id_selectivity: 0.0001</span><br><span class="line">customer_id_selectivity: 0.0373</span><br><span class="line">               COUNT(*): 16049</span><br></pre></td></tr></table></figure>

<h4 id="4-前缀索引"><a href="#4-前缀索引" class="headerlink" title="4. 前缀索引"></a>4. 前缀索引</h4><p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p>
<p>前缀长度的选取需要根据索引选择性来确定。</p>
<h4 id="5-覆盖索引"><a href="#5-覆盖索引" class="headerlink" title="5. 覆盖索引"></a>5. 覆盖索引</h4><p>索引包含所有需要查询的字段的值。</p>
<p>具有以下优点：</p>
<ul>
<li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。</li>
<li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li>
<li>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。</li>
</ul>
<h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ul>
<li>大大减少了服务器需要扫描的数据行数。</li>
<li>帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。</li>
<li>将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。</li>
</ul>
<h3 id="索引的使用条件"><a href="#索引的使用条件" class="headerlink" title="索引的使用条件"></a>索引的使用条件</h3><ul>
<li>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；</li>
<li>对于中到大型的表，索引就非常有效；</li>
<li>但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</li>
</ul>
<h2 id="二、查询性能优化"><a href="#二、查询性能优化" class="headerlink" title="二、查询性能优化"></a>二、查询性能优化</h2><h3 id="使用-Explain-进行分析"><a href="#使用-Explain-进行分析" class="headerlink" title="使用 Explain 进行分析"></a>使用 Explain 进行分析</h3><p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p>
<p>比较重要的字段有：</p>
<ul>
<li>select_type : 查询类型，有简单查询、联合查询、子查询等</li>
<li>key : 使用的索引</li>
<li>rows : 扫描的行数</li>
</ul>
<h3 id="优化数据访问"><a href="#优化数据访问" class="headerlink" title="优化数据访问"></a>优化数据访问</h3><h4 id="1-减少请求的数据量"><a href="#1-减少请求的数据量" class="headerlink" title="1. 减少请求的数据量"></a>1. 减少请求的数据量</h4><ul>
<li>只返回必要的列：最好不要使用 SELECT * 语句。</li>
<li>只返回必要的行：使用 LIMIT 语句来限制返回的数据。</li>
<li>缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li>
</ul>
<h4 id="2-减少服务器端扫描的行数"><a href="#2-减少服务器端扫描的行数" class="headerlink" title="2. 减少服务器端扫描的行数"></a>2. 减少服务器端扫描的行数</h4><p>最有效的方式是使用索引来覆盖查询。</p>
<h3 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h3><h4 id="1-切分大查询"><a href="#1-切分大查询" class="headerlink" title="1. 切分大查询"></a>1. 切分大查询</h4><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM messages WHERE create &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH);</span><br><span class="line">rows_affected &#x3D; 0</span><br><span class="line">do &#123;</span><br><span class="line">    rows_affected &#x3D; do_query(</span><br><span class="line">    &quot;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&quot;)</span><br><span class="line">&#125; while rows_affected &gt; 0</span><br></pre></td></tr></table></figure>

<h4 id="2-分解大连接查询"><a href="#2-分解大连接查询" class="headerlink" title="2. 分解大连接查询"></a>2. 分解大连接查询</h4><p>将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：</p>
<ul>
<li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li>
<li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</li>
<li>减少锁竞争；</li>
<li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。</li>
<li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tag</span><br><span class="line">JOIN tag_post ON tag_post.tag_id&#x3D;tag.id</span><br><span class="line">JOIN post ON tag_post.post_id&#x3D;post.id</span><br><span class="line">WHERE tag.tag&#x3D;&#39;mysql&#39;;</span><br><span class="line">SELECT * FROM tag WHERE tag&#x3D;&#39;mysql&#39;;</span><br><span class="line">SELECT * FROM tag_post WHERE tag_id&#x3D;1234;</span><br><span class="line">SELECT * FROM post WHERE post.id IN (123,456,567,9098,8904);</span><br></pre></td></tr></table></figure>

<h2 id="三、存储引擎"><a href="#三、存储引擎" class="headerlink" title="三、存储引擎"></a>三、存储引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p>
<p>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻影读。</p>
<p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p>
<p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p>
<p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p>
<p>提供了大量的特性，包括压缩表、空间数据索引等。</p>
<p>不支持事务。</p>
<p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p>
<p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p>
<p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ul>
<li>事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。</li>
<li>并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</li>
<li>外键：InnoDB 支持外键。</li>
<li>备份：InnoDB 支持在线热备份。</li>
<li>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</li>
<li>其它特性：MyISAM 支持压缩表和空间数据索引。</li>
</ul>
<h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。</p>
<p>INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p>
<p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p>
<p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p>
<p>在进行存储和检索时，会保留 VARCHAR 末尾的空格，而会删除 CHAR 末尾的空格。</p>
<h3 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h3><p>MySQL 提供了两种相似的日期时间类型：DATETIME 和 TIMESTAMP。</p>
<h4 id="1-DATETIME"><a href="#1-DATETIME" class="headerlink" title="1. DATETIME"></a>1. DATETIME</h4><p>能够保存从 1000 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p>
<p>它与时区无关。</p>
<p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATETIME 值，例如“2008-01-16 22<span>:</span>37<span>:</span>08”，这是 ANSI 标准定义的日期和时间表示方法。</p>
<h4 id="2-TIMESTAMP"><a href="#2-TIMESTAMP" class="headerlink" title="2. TIMESTAMP"></a>2. TIMESTAMP</h4><p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年到 2038 年。</p>
<p>它和时区有关，也就是说一个时间戳在不同的时区所代表的具体时间是不同的。</p>
<p>MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p>
<p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p>
<p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p>
<h2 id="五、切分"><a href="#五、切分" class="headerlink" title="五、切分"></a>五、切分</h2><h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p>
<p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p>
<p><a href="https://camo.githubusercontent.com/29dbc15634de8e798e7ed68f50fd898b923a5fd9ac6fd2a271af9bdd84e96167/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f36336332393039662d306335662d343936662d396665352d6565393137366233316162612e6a7067" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/29dbc15634de8e798e7ed68f50fd898b923a5fd9ac6fd2a271af9bdd84e96167/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f36336332393039662d306335662d343936662d396665352d6565393137366233316162612e6a7067" alt="img"></a></p>
<h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p>
<p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p>
<p><a href="https://camo.githubusercontent.com/eb35b961164a9f970ee6e1da5b6eeefb5610619553494efa9b0a5007524c99d6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65313330653562382d623139612d346631652d623836302d3232333034303532356366362e6a7067" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/eb35b961164a9f970ee6e1da5b6eeefb5610619553494efa9b0a5007524c99d6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65313330653562382d623139612d346631652d623836302d3232333034303532356366362e6a7067" alt="img"></a></p>
<h3 id="Sharding-策略"><a href="#Sharding-策略" class="headerlink" title="Sharding 策略"></a>Sharding 策略</h3><ul>
<li>哈希取模：hash(key) % N；</li>
<li>范围：可以是 ID 范围也可以是时间范围；</li>
<li>映射表：使用单独的一个数据库来存储映射关系。</li>
</ul>
<h3 id="Sharding-存在的问题"><a href="#Sharding-存在的问题" class="headerlink" title="Sharding 存在的问题"></a>Sharding 存在的问题</h3><h4 id="1-事务问题"><a href="#1-事务问题" class="headerlink" title="1. 事务问题"></a>1. 事务问题</h4><p>使用分布式事务来解决，比如 XA 接口。</p>
<h4 id="2-连接"><a href="#2-连接" class="headerlink" title="2. 连接"></a>2. 连接</h4><p>可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。</p>
<h4 id="3-ID-唯一性"><a href="#3-ID-唯一性" class="headerlink" title="3. ID 唯一性"></a>3. ID 唯一性</h4><ul>
<li>使用全局唯一 ID（GUID）</li>
<li>为每个分片指定一个 ID 范围</li>
<li>分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)</li>
</ul>
<h2 id="六、复制"><a href="#六、复制" class="headerlink" title="六、复制"></a>六、复制</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p>
<ul>
<li><strong>binlog 线程</strong> ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</li>
<li><strong>I/O 线程</strong> ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</li>
<li><strong>SQL 线程</strong> ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/e07852d09597a9cfb719ce91e616208a17543d401a114e07ebe6e4d49e2f7dff/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f6d61737465722d736c6176652e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/e07852d09597a9cfb719ce91e616208a17543d401a114e07ebe6e4d49e2f7dff/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f6d61737465722d736c6176652e706e67" alt="img"></a></p>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p>
<p>读写分离能提高性能的原因在于：</p>
<ul>
<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li>
<li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li>
<li>增加冗余，提高可用性。</li>
</ul>
<p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p>
<p><a href="https://camo.githubusercontent.com/7f9279aeb3dd23a8a0a64895594bd76ac9fce2dfb6bc24974a07cc83888c6fc9/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f6d61737465722d736c6176652d70726f78792e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/7f9279aeb3dd23a8a0a64895594bd76ac9fce2dfb6bc24974a07cc83888c6fc9/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f6d61737465722d736c6176652d70726f78792e706e67" alt="img"></a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>BaronScbwartz, PeterZaitsev, VadimTkacbenko, 等. 高性能 MySQL[M]. 电子工业出版社, 2013.</li>
<li>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 [M]. 机械工业出版社, 2011.</li>
<li><a href="https://www.jfox.info/20-tiao-mysql-xing-nen-you-hua-de-zui-jia-jing-yan.html" target="_blank" rel="noopener">20+ 条 MySQL 性能优化的最佳经验</a></li>
<li><a href="http://blog.720ui.com/2017/mysql_core_09_multi_db_table2/" target="_blank" rel="noopener">服务端指南 数据存储篇 | MySQL（09） 分库与分表带来的分布式困境与应对之策</a></li>
<li><a href="https://stackoverflow.com/questions/788829/how-to-create-unique-row-id-in-sharded-databases" target="_blank" rel="noopener">How to create unique row ID in sharded databases?</a></li>
<li><a href="http://geekswithblogs.net/shaunxu/archive/2012/01/07/sql-azure-federation-ndash-introduction.aspx" target="_blank" rel="noopener">SQL Azure Federation – Introduction</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL 索引背后的数据结构及算法原理</a></li>
<li><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">MySQL 性能优化神器 Explain 使用分析</a></li>
<li><a href="https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6" target="_blank" rel="noopener">How Sharding Works</a></li>
<li><a href="https://tech.meituan.com/dianping_order_db_sharding.html" target="_blank" rel="noopener">大众点评订单系统分库分表实践</a></li>
<li><a href="https://zh.wikipedia.org/wiki/B%2B树" target="_blank" rel="noopener">B + 树</a></li>
</ul>
<hr>
<p>转载自GitHub：</p>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md" target="_blank" rel="noopener">CyC2018 - CS-Notes</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL修炼</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>转载</tag>
        <tag>B树与B+树</tag>
        <tag>数据结构</tag>
        <tag>红黑树</tag>
        <tag>存储引擎</tag>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次持续到凌晨两点半的coding</title>
    <url>/2020/09/26/2020-09-26/</url>
    <content><![CDATA[<p><strong>二叉搜索树的后序遍历序列</strong></p>
<p><strong>题干</strong>：<br>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。<br>如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<a id="more"></a>

<p><strong>解题思路</strong>：<br>1、后续遍历的最后一个节点是根节点<br>2、BST(二叉搜索树)特性：<br>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值<br>3、综上，除去末尾根节点，BST的后续遍历中，前面一部分都小于根节点的数是左子树，后一部分都大于根节点的是右子树。<br>不符合则判断不是BST的后序遍历。<br>然后递归剩下的左右子树，直到所有子树都满足以上条件，才判断是BST的后序遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    todo 优化：子树序列长度只需 &lt;= 2，则该子树满足BST的后续遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">VerifySquenceOfBST</span><span class="params">(self, sequence)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sequence:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        root = sequence.pop()</span><br><span class="line">        left = []</span><br><span class="line">        right = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sequence) + <span class="number">1</span>):</span><br><span class="line">            tmp_list = copy.deepcopy(sequence)</span><br><span class="line">            tmp_list.insert(i, root)</span><br><span class="line">            left = tmp_list[:i + <span class="number">1</span>]</span><br><span class="line">            right = tmp_list[i:]</span><br><span class="line">            <span class="keyword">if</span> max(left) &lt;= root &lt;= min(right):</span><br><span class="line">                left.pop()</span><br><span class="line">                right.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(right) &lt;= <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        result_left = self.VerifySquenceOfBST(left) <span class="keyword">if</span> left <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">        result_right = self.VerifySquenceOfBST(right) <span class="keyword">if</span> right <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> result_left <span class="keyword">and</span> result_right</span><br></pre></td></tr></table></figure>
<p>测试用例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">back_list = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">10</span>]</span><br><span class="line">solution = Solution()</span><br><span class="line">print(solution.VerifySquenceOfBST(back_list))</span><br></pre></td></tr></table></figure>

<hr>
<p>原题链接：<a href="https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&&tqId=11176&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二叉搜索树的后序遍历序列</a>  </p>
]]></content>
      <categories>
        <category>算法修炼</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>剑指offer</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言请求蓝鲸ESB示例</title>
    <url>/2020/09/04/go-bk-request/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>之前学了Go语言网络编程，包括HTTP编程、Socket编程，现在我们使用Go实现蓝鲸API接口调用。</p>
<p>总所周知，Python的requests、urllib2都是http请求、爬虫的利器，那么Go语言该怎样做？</p>
<p>话不多说，直接上示例代码。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"bytes"</span></span><br><span class="line">	<span class="string">"encoding/json"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个结构体</span></span><br><span class="line"><span class="keyword">type</span> BkResp <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code       <span class="keyword">int</span>                    <span class="string">`json:"code"`</span></span><br><span class="line">	Permission <span class="keyword">string</span>                 <span class="string">`json:"permission"`</span></span><br><span class="line">	Result     <span class="keyword">bool</span>                   <span class="string">`json:"result"`</span></span><br><span class="line">	RequestId  <span class="keyword">string</span>                 <span class="string">`json:"request_id"`</span></span><br><span class="line">	Message    <span class="keyword">string</span>                 <span class="string">`json:"message"`</span></span><br><span class="line">	Data       <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"data"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	client := http.Client&#123;&#125;</span><br><span class="line">	url := <span class="string">"http://paas.zw.com/api/c/compapi/v2/cc/search_business/"</span></span><br><span class="line">	m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	m1[<span class="string">"bk_app_code"</span>] = <span class="string">"bk_monitor"</span></span><br><span class="line">	m1[<span class="string">"bk_app_secret"</span>] = <span class="string">"7c919c6c-3e07-42b3-b8ea-cc56b6a367d0"</span></span><br><span class="line">	m1[<span class="string">"bk_username"</span>] = <span class="string">"admin"</span></span><br><span class="line">	<span class="comment">// json序列化</span></span><br><span class="line">	params, err1 := json.Marshal(m1)</span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err1.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	req_data := bytes.NewReader(params)</span><br><span class="line">	request, err2 := http.NewRequest(<span class="string">"POST"</span>, url, req_data)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err2.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 设置请求头</span></span><br><span class="line">	request.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">	resp, err3 := client.Do(request)</span><br><span class="line">	<span class="keyword">if</span> err3 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err3.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	respBytes, err4 := ioutil.ReadAll(resp.Body)</span><br><span class="line">	<span class="keyword">if</span> err4 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err4.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//fmt.Println(string(respBytes))</span></span><br><span class="line">	<span class="keyword">var</span> resp_data BkResp</span><br><span class="line">	<span class="comment">// 对响应体进行反序列化</span></span><br><span class="line">	err5 := json.Unmarshal([]<span class="keyword">byte</span>(<span class="keyword">string</span>(respBytes)), &amp;resp_data)</span><br><span class="line">	<span class="keyword">if</span> err5 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err5.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	bk_info_list := resp_data.Data[<span class="string">"info"</span>]</span><br><span class="line">	<span class="comment">//fmt.Println(bk_info_list)</span></span><br><span class="line">	<span class="comment">//fmt.Println(reflect.TypeOf(bk_info_list))</span></span><br><span class="line">	<span class="comment">//for _, v := range bk_info_list.([]interface&#123;&#125;) &#123;</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> bk_info_list.([]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">		fmt.Println(v)</span><br><span class="line">		<span class="comment">//for k1, v1 := range v.(map[string]interface&#123;&#125;) &#123;</span></span><br><span class="line">		<span class="comment">// fmt.Println(k1)</span></span><br><span class="line">		<span class="comment">// fmt.Println(v1)</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>网络编程</tag>
        <tag>请求</tag>
        <tag>蓝鲸ESB</tag>
      </tags>
  </entry>
  <entry>
    <title>企业(政务)微信浏览器的前端开发兼容问题</title>
    <url>/2020/08/20/weixin-app/</url>
    <content><![CDATA[<p><strong>windows版本的企业（政务）微信浏览器基于Chromium 53版本，对ES7某些新特性不兼容</strong></p>
<img data-src="/2020/08/20/weixin-app/weixin_browser.png" class>
<a id="more"></a>

<h3 id="1、不支持Async-Await异步函数"><a href="#1、不支持Async-Await异步函数" class="headerlink" title="1、不支持Async/Await异步函数"></a>1、不支持Async/Await异步函数</h3><p>官方的方法兼容文档：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a> </p>
<img data-src="/2020/08/20/weixin-app/browser_compatibility.png" class>

<h3 id="2、不支持Axios的promise-prototype-finally方法："><a href="#2、不支持Axios的promise-prototype-finally方法：" class="headerlink" title="2、不支持Axios的promise.prototype.finally方法："></a>2、不支持Axios的promise.prototype.finally方法：</h3><img data-src="/2020/08/20/weixin-app/weixin_error.png" class>

<p>解决办法：通过main.js引入依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i promise.prototype.finally</span><br><span class="line">require(&#39;promise.prototype.finally&#39;).shim();</span><br></pre></td></tr></table></figure>

<h3 id="3、本地安装模拟企业（政务）微信内置Chromium-53版本："><a href="#3、本地安装模拟企业（政务）微信内置Chromium-53版本：" class="headerlink" title="3、本地安装模拟企业（政务）微信内置Chromium 53版本："></a>3、本地安装模拟企业（政务）微信内置Chromium 53版本：</h3><h4 id="3-1、下载附件的安装包（Chromium-53版本）"><a href="#3-1、下载附件的安装包（Chromium-53版本）" class="headerlink" title="3.1、下载附件的安装包（Chromium 53版本）"></a>3.1、下载附件的安装包（Chromium 53版本）</h4><p><a href="https://file.tapd.cn/51310665/attachments/download/1151310665001000266/wiki" target="_blank" rel="noopener">点此下载</a>  </p>
<h4 id="3-2、右键解压成Chrome-7z，继续解压成Chrome-bin文件夹"><a href="#3-2、右键解压成Chrome-7z，继续解压成Chrome-bin文件夹" class="headerlink" title="3.2、右键解压成Chrome.7z，继续解压成Chrome-bin文件夹"></a>3.2、右键解压成Chrome.7z，继续解压成Chrome-bin文件夹</h4><img data-src="/2020/08/20/weixin-app/download_file.png" class>

<h4 id="3-3、直接执行Chrome-bin-chrome-exe会跳转到本地最新版的chrome。"><a href="#3-3、直接执行Chrome-bin-chrome-exe会跳转到本地最新版的chrome。" class="headerlink" title="3.3、直接执行Chrome-bin / chrome.exe会跳转到本地最新版的chrome。"></a>3.3、直接执行Chrome-bin / chrome.exe会跳转到本地最新版的chrome。</h4><p>在此目录下编写脚本start.bat，点击脚本即可打开Chromium 53：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start &quot;&quot; &quot;.&#x2F;chrome.exe&quot;  &quot; --user-data-dir&#x3D;User Data&quot;</span><br></pre></td></tr></table></figure>

<img data-src="/2020/08/20/weixin-app/file_setting.png" class>]]></content>
      <categories>
        <category>前端开发指南</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>微信轻应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之Celery</title>
    <url>/2020/08/20/celery/</url>
    <content><![CDATA[<blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3></blockquote>
<ul>
<li>Celery 是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的一系列工具。</li>
<li>Celery 是一款专注于实时处理的异步任务队列，可用于处理实时数据以及任务调度。</li>
</ul>
<h3 id="Celery架构"><a href="#Celery架构" class="headerlink" title="Celery架构"></a>Celery架构</h3><p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p>
<img data-src="/2020/08/20/celery/celery-architecture.png" class>

<a id="more"></a>

<h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ Redis等等</p>
<h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p>
<h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p>
<p>定时任务：定时执行某件事情，比如每天数据统计</p>
<h3 id="Celery的安装配置"><a href="#Celery的安装配置" class="headerlink" title="Celery的安装配置"></a>Celery的安装配置</h3><p><code>pip install celery</code></p>
<p>中间人（Broker）消息中间件：RabbitMQ / Redis</p>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>RabbitMQ 是默认的中间人（Broker），只需要配置连接的URL即可，不需要安装额外的的配置以及初始化配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">broker_url = <span class="string">'amqp://myuser:mypassword@localhost:5672/myvhost'</span></span><br></pre></td></tr></table></figure>

<p>有关 Celery 各种中间人（Broker）的配置列表，请查阅代理设置，并且按照说明设置用户名和密码。</p>
<p><code>RabbitMQ</code>的安装和使用这里不多赘述，有空新开一篇文章讲解</p>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis 的配置非常的简单，只需要配置 Redis 的 URL ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.conf.broker_url &#x3D; &#39;redis:&#x2F;&#x2F;localhost:6379&#x2F;0&#39;</span><br></pre></td></tr></table></figure>

<p>URL 的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis:&#x2F;&#x2F;:password@hostname:port&#x2F;db_number</span><br></pre></td></tr></table></figure>

<p>URL 的所有配置都可以自定义配置的，默认使用的是 localhost 的 6379 端口中 0 数据库。（ Redis 默认有 16 个数据库）</p>
<p>Celery 也可以连接 Redis 哨兵也是非常简单的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.conf.broker_url = <span class="string">'sentinel://localhost:26379;sentinel://localhost:26380;sentinel://localhost:26381'</span></span><br><span class="line">app.conf.broker_transport_options = &#123;<span class="string">'master_name'</span>:<span class="string">'cluster1'</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RabbitMQ-Redis-比较"><a href="#RabbitMQ-Redis-比较" class="headerlink" title="RabbitMQ / Redis 比较"></a>RabbitMQ / Redis 比较</h4><ul>
<li><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> 的功能比较齐全、稳定、便于安装。在生产环境来说是首选的。</p>
</li>
<li><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a> 功能比较全，但是如果突然停止运行或断电会造成数据丢失。</p>
</li>
</ul>
<p>个人比较喜欢Redis作为Broker，Redis安装和使用比较简单，之所以Redis能够用作消息队列，因为其中的列表数据类型，可以存储多个有序的字符串，既然是有序的，就满足消息队列的特点，使用<code>lpush</code>+<code>rpop</code>或者<code>rpush</code>+<code>lpop</code>实现消息队列。除此之外，redis支持阻塞操作，在弹出元素的时候使用阻塞命令来实现阻塞队列。</p>
<p>以上已经在Redis分类的文章中有写到，新版Redis的特性也能更好地支持消息队列，这一块的知识后续新开一个文章进行学习。</p>
<h3 id="Celery异步任务"><a href="#Celery异步任务" class="headerlink" title="Celery异步任务"></a>Celery异步任务</h3><h4 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h4><p>tasks.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">app = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'amqp://guest@localhost//'</span>)</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<h4 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h4><p>需要调用我们创建的实例任务，可以通过 <code>delay()</code> 进行调用。</p>
<p><code>delay()</code> 是 <code>apply_async()</code> 的快捷方法，可以更好的控制任务的执行（详情：<a href><code>调用任务：Calling Tasks</code></a>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h4 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h4><p>如果需要跟踪任务的状态，Celery 需要在某处存储任务的状态信息。Celery 内置了一些后端结果：<a href="https://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy/Django</a> ORM、<a href="http://memcached.org/" target="_blank" rel="noopener">Memcached</a>、<a href="https://redis.io/" target="_blank" rel="noopener">Redis</a>、 RPC (<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a>/AMQP)以及自定义的后端结果存储中间件。</p>
<p>针对本次实例，我们使用 RPC 作为结果后端，将状态信息作为临时消息回传。后端通过 backend 参数指定给 Celery（或者通过配置模块中的 result_backend 选项设定）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Celery(<span class="string">'tasks'</span>, backend=<span class="string">'rpc://'</span>, broker=<span class="string">'pyamqp://'</span>)</span><br></pre></td></tr></table></figure>

<p>例如，可以使用Redis作为Celery结果后端，使用RabbitMQ作为中间人（Broker）可以使用以下配置（这种组合比较流行）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Celery(<span class="string">'tasks'</span>, backend=<span class="string">'redis://localhost'</span>, broker=<span class="string">'pyamqp://'</span>)</span><br></pre></td></tr></table></figure>

<p><code>ready()</code> 可以检测是否已经处理完毕：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.ready()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>整个任务执行过程为异步的，如果一直等待任务完成，会将异步调用转换为同步调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.get(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>如果任务出现异常，<code>get()</code> 会再次引发异常，可以通过 propagate 参数进行覆盖：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.get(propagate=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>如果任务出现异常，可以通过以下命令进行回溯：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.traceback</span><br></pre></td></tr></table></figure>

<h3 id="Celery执行定时任务"><a href="#Celery执行定时任务" class="headerlink" title="Celery执行定时任务"></a>Celery执行定时任务</h3><p><code>celery beat</code> 是一个调度程序；它定期启动任务，然后由集群中的可用节点执行任务。</p>
<h4 id="设定时间让celery执行一个任务"><a href="#设定时间让celery执行一个任务" class="headerlink" title="设定时间让celery执行一个任务"></a>设定时间让celery执行一个任务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">ctime = datetime.now()</span><br><span class="line"><span class="comment"># 默认用utc时间</span></span><br><span class="line">utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">time_delay = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">task_time = utc_ctime + time_delay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply_async并设定时间</span></span><br><span class="line">result = add.apply_async(args=[<span class="number">4</span>, <span class="number">3</span>], eta=task_time)</span><br></pre></td></tr></table></figure>

<h4 id="类似于contab的定时任务"><a href="#类似于contab的定时任务" class="headerlink" title="类似于contab的定时任务"></a>类似于contab的定时任务</h4><p>多任务结构中celery.py配置如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">cel = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://127.0.0.1:6379/1'</span>, backend=<span class="string">'redis://127.0.0.1:6379/2'</span>, include=[</span><br><span class="line">    <span class="string">'celery_task.tasks1'</span>,</span><br><span class="line">    <span class="string">'celery_task.tasks2'</span>,</span><br><span class="line">])</span><br><span class="line">cel.conf.timezone = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">cel.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">cel.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="comment"># 名字随意命名</span></span><br><span class="line">    <span class="string">'add-every-10-seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 执行tasks1下的test_celery函数</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'celery_task.tasks1.test_celery'</span>,</span><br><span class="line">        <span class="comment"># 每隔2秒执行一次</span></span><br><span class="line">        <span class="comment"># 'schedule': 1.0,</span></span><br><span class="line">        <span class="comment"># 'schedule': crontab(minute="*/1"),</span></span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">2</span>),</span><br><span class="line">        <span class="comment"># 传递参数</span></span><br><span class="line">        <span class="string">'args'</span>: (<span class="string">'test'</span>,)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 'add-every-12-seconds': &#123;</span></span><br><span class="line">    <span class="comment">#     'task': 'celery_task.tasks1.test_celery',</span></span><br><span class="line">    <span class="comment">#     每年4月11号，8点42分执行</span></span><br><span class="line">    <span class="comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span></span><br><span class="line">    <span class="comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span></span><br><span class="line">    <span class="comment">#     'args': (16, 16)</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动一个beat：celery beat -A celery_task -l info</p>
<p>启动work执行：celery worker -A celery_task -l info -P  eventlet</p>
<h3 id="Django中使用Celery"><a href="#Django中使用Celery" class="headerlink" title="Django中使用Celery"></a>Django中使用Celery</h3><p>在Django项目中异步任务和周期任务是必不可少的：</p>
<h4 id="添加Celery配置项"><a href="#添加Celery配置项" class="headerlink" title="添加Celery配置项"></a>添加Celery配置项</h4><p>在项目目录下创建celeryconfig.py（也可以写在settings.py中）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> djcelery</span><br><span class="line">djcelery.setup_loader()</span><br><span class="line"><span class="comment"># CELERY 配置，申明任务的文件路径，即包含有 @task 装饰器的函数文件</span></span><br><span class="line">CELERY_IMPORTS=(</span><br><span class="line">    <span class="string">'app01.tasks'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 有些情况可以防止死锁</span></span><br><span class="line">CELERYD_FORCE_EXECV=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置并发worker数量</span></span><br><span class="line">CELERYD_CONCURRENCY=<span class="number">4</span></span><br><span class="line"><span class="comment"># 允许重试</span></span><br><span class="line">CELERY_ACKS_LATE=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 每个worker最多执行100个任务被销毁，可以防止内存泄漏</span></span><br><span class="line">CELERYD_MAX_TASKS_PER_CHILD=<span class="number">100</span></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line">CELERYD_TASK_TIME_LIMIT=<span class="number">12</span>*<span class="number">30</span></span><br><span class="line"></span><br><span class="line">CELERYBEAT_SCHEDULER = <span class="string">"djcelery.schedulers.DatabaseScheduler"</span></span><br></pre></td></tr></table></figure>

<h4 id="在app目录下创建tasks-py"><a href="#在app目录下创建tasks-py" class="headerlink" title="在app目录下创建tasks.py"></a>在app目录下创建tasks.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'a.text'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'a'</span>)</span><br><span class="line">    print(a+b)</span><br></pre></td></tr></table></figure>

<h4 id="视图函数views-py"><a href="#视图函数views-py" class="headerlink" title="视图函数views.py"></a>视图函数views.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01.tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># result=add.delay(2,3)</span></span><br><span class="line">    ctime = datetime.now()</span><br><span class="line">    <span class="comment"># 默认用utc时间</span></span><br><span class="line">    utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())</span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">    time_delay = timedelta(seconds=<span class="number">5</span>)</span><br><span class="line">    task_time = utc_ctime + time_delay</span><br><span class="line">    result = add.apply_async(args=[<span class="number">4</span>, <span class="number">3</span>], eta=task_time)</span><br><span class="line">    print(result.id)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Django的settings-py"><a href="#Django的settings-py" class="headerlink" title="Django的settings.py"></a>Django的settings.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'djcelery'</span>,</span><br><span class="line">    <span class="string">'app'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">from</span> djagocele <span class="keyword">import</span> celeryconfig</span><br><span class="line">BROKER_BACKEND=<span class="string">'redis'</span></span><br><span class="line">BROKER_URL=<span class="string">'redis://127.0.0.1:6379/1'</span></span><br><span class="line">CELERY_RESULT_BACKEND=<span class="string">'redis://127.0.0.1:6379/2'</span></span><br></pre></td></tr></table></figure>

<h4 id="周期任务"><a href="#周期任务" class="headerlink" title="周期任务"></a>周期任务</h4><p>celery beat是用来开启定时任务调度的，一般用法为：启动celery beat，然后启动worker，让beat去调用worker里面的任务。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> celery.task <span class="keyword">import</span> task, periodic_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab设置每天8点</span></span><br><span class="line"><span class="comment"># @periodic_task(run_every=(crontab(minute=0, hour=8)))</span></span><br><span class="line"><span class="comment"># crontab设置每分钟</span></span><br><span class="line"><span class="meta">@periodic_task(run_every=crontab(minute="*/1"))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distribute_task</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 使用周期任务调动异步任务</span></span><br><span class="line">    get_alarm_list.apply_async(args=(now,))</span><br><span class="line">    </span><br><span class="line"><span class="meta">@task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_alarm_list</span><span class="params">(source_time)</span>:</span></span><br><span class="line">    print(source_time)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>写了这么多，从Celery简介、架构，到消息队列选型，再Python中如何使用Celery、Django项目怎么配置集成Celery，也算是Celery的超详细讲解了，用了这么久Celery，总算填了一个坑哈哈。</p>
<p>想要学习Celery更多的设计、调度、优化、路由、并发、信号、调试、测试、扩展等详细内容，可以参考 <a href="https://www.celerycn.io/" target="_blank" rel="noopener">https://www.celerycn.io/</a></p>
<hr>
<p>参考链接：</p>
<p><a href="https://github.com/celery/celery" target="_blank" rel="noopener">Celery 源码 - Github</a></p>
<p><a href="https://github.com/celery/django-celery" target="_blank" rel="noopener">django-celery - Github</a></p>
<p><a href="https://github.com/celery/django-celery-beat" target="_blank" rel="noopener">django-celery-beat 源码 - Github</a></p>
<p><a href="https://www.celerycn.io/" target="_blank" rel="noopener">《Celery 中文手册》</a>  </p>
<p><a href="https://www.jianshu.com/p/620052aadbff" target="_blank" rel="noopener">Celery - 简书</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Celery</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Redis</tag>
        <tag>Celery</tag>
        <tag>Django</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis修炼之使用场景</title>
    <url>/2020/08/16/redis-use-case/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>接着Redis数据类型来说，来谈谈Redis的具体使用场景，首先回顾一下：</p>
<p>Redis是一种基于键值对的NoSQL数据库，它的值主要由string（字符串），hash（哈希），list（列表），set（集合），zset（有序集合）五种基本数据结构构成。那么这些数据结构的使用场景有哪些？以下将用内部编码及使用场景的方式浅析Redis的五种数据类型。</p>
<a id="more"></a>


<blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2></blockquote>
<h3 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一 字符串"></a><strong>一 字符串</strong></h3><p>字符串类型是Redis最基础的数据结构，字符串类型可以是<code>JSON</code>、<code>XML</code>甚至是二进制的图片等数据，但是最大值不能超过512MB。</p>
<h4 id="1-1-内部编码"><a href="#1-1-内部编码" class="headerlink" title="1.1 内部编码"></a><strong>1.1 内部编码</strong></h4><p>Redis会根据当前值的类型和长度决定使用哪种内部编码来实现。</p>
<p>字符串类型的内部编码有3种：</p>
<ul>
<li>int：8个字节的长整型。</li>
<li>embstr：小于等于39个字节的字符串。</li>
<li>raw：大于39个字节的字符串。</li>
</ul>
<h4 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a><strong>1.2 使用场景</strong></h4><h5 id="1-2-1-缓存"><a href="#1-2-1-缓存" class="headerlink" title="1.2.1 缓存"></a>1.2.1 缓存</h5><p>在web服务中，使用MySQL作为数据库，Redis作为缓存。由于Redis具有支撑高并发的特性，通常能起到加速读写和降低后端压力的作用。web端的大多数请求都是从Redis中获取的数据，如果Redis中没有需要的数据，则会从MySQL中去获取，并将获取到的数据写入redis。</p>
<h5 id="1-2-2-计数"><a href="#1-2-2-计数" class="headerlink" title="1.2.2 计数"></a>1.2.2 计数</h5><p>Redis中有一个字符串相关的命令<code>incr key</code>，<code>incr</code>命令对值做自增操作，返回结果分为以下三种情况：</p>
<ul>
<li>值不是整数，返回错误</li>
<li>值是整数，返回自增后的结果</li>
<li>key不存在，默认键为<code>0</code>，返回<code>1</code></li>
</ul>
<p>比如文章的阅读量，视频的播放量等等都会使用redis来计数，每播放一次，对应的播放量就会加1，同时将这些数据异步存储到数据库中达到持久化的目的。</p>
<h5 id="1-2-3-共享Session"><a href="#1-2-3-共享Session" class="headerlink" title="1.2.3 共享Session"></a>1.2.3 共享Session</h5><p>在分布式系统中，用户的每次请求会访问到不同的服务器，这就会导致session不同步的问题，假如一个用来获取用户信息的请求落在A服务器上，获取到用户信息后存入session。下一个请求落在B服务器上，想要从session中获取用户信息就不能正常获取了，因为用户信息的session在服务器A上，为了解决这个问题，使用redis集中管理这些session，将session存入redis，使用的时候直接从redis中获取就可以了。</p>
<h5 id="1-2-4-限速"><a href="#1-2-4-限速" class="headerlink" title="1.2.4 限速"></a>1.2.4 限速</h5><p>为了安全考虑，有些网站会对IP进行限制，限制同一IP在一定时间内访问次数不能超过n次。</p>
<h3 id="二-哈希"><a href="#二-哈希" class="headerlink" title="二 哈希"></a><strong>二 哈希</strong></h3><p>Redis中，哈希类型是指一个键值对的存储结构。</p>
<h4 id="2-1-内部编码"><a href="#2-1-内部编码" class="headerlink" title="2.1 内部编码"></a><strong>2.1 内部编码</strong></h4><p>哈希类型的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置（默认512个）同时所有值都小于<code>hash-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，所以比hashtable更加节省内存。</li>
<li>hashtable（哈希表）：当ziplist不能满足要求时，会使用hashtable。</li>
</ul>
<h4 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a><strong>2.2 使用场景</strong></h4><p>由于hash类型存储的是一个键值对，比如数据库有以下一个用户表结构</p>
<table>
<thead>
<tr>
<th align="left">id</th>
<th align="left">name</th>
<th align="left">age</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">豆豆</td>
<td align="left">24</td>
</tr>
</tbody></table>
<p>将以上信息存入redis，用表明:id作为key，用户属性作为值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset user:1 name 豆豆 age 24</span><br></pre></td></tr></table></figure>

<p>使用哈希存储会比字符串更加方便直观</p>
<h3 id="三-列表"><a href="#三-列表" class="headerlink" title="三 列表"></a><strong>三 列表</strong></h3><p>列表类型用来存储多个<strong>有序</strong>的字符串，一个列表最多可以存储<code>2^32-1</code>个元素，列表的两端都可以插入和弹出元素。</p>
<h4 id="3-1-内部编码"><a href="#3-1-内部编码" class="headerlink" title="3.1 内部编码"></a><strong>3.1 内部编码</strong></h4><p>列表的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当哈希类型元素个数小于<code>list-max-ziplist-entries</code>配置（默认512个）同时所有值都小于<code>list-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，所以比hashtable更加节省内存。</li>
<li>linkedlist（链表）：当ziplist不能满足要求时，会使用linkedlist。</li>
</ul>
<h4 id="3-2-使用场景"><a href="#3-2-使用场景" class="headerlink" title="3.2 使用场景"></a><strong>3.2 使用场景</strong></h4><h5 id="3-2-1-消息队列"><a href="#3-2-1-消息队列" class="headerlink" title="3.2.1 消息队列"></a>3.2.1 消息队列</h5><p>列表用来存储多个有序的字符串，既然是有序的，那么就满足消息队列的特点。使用<code>lpush</code>+<code>rpop</code>或者<code>rpush</code>+<code>lpop</code>实现消息队列。除此之外，redis支持阻塞操作，在弹出元素的时候使用阻塞命令来实现阻塞队列。</p>
<p>在蓝鲸SaaS开发中，Django的Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ、Redis等等。SaaS的本地开发中，Celery也默认选择了Redis作为消息队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Celery 消息队列设置 RabbitMQ</span></span><br><span class="line"><span class="comment"># BROKER_URL = 'amqp://guest:guest@localhost:5672//'</span></span><br><span class="line"><span class="comment"># Celery 消息队列设置 Redis</span></span><br><span class="line">BROKER_URL = <span class="string">"redis://localhost:6379/0"</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2-2-栈"><a href="#3-2-2-栈" class="headerlink" title="3.2.2 栈"></a>3.2.2 栈</h5><p>由于列表存储的是有序字符串，满足队列的特点，也就能满足栈先进后出的特点，使用<code>lpush</code>+<code>lpop</code>或者<code>rpush</code>+<code>rpop</code>实现栈。</p>
<h5 id="3-2-3-文章列表"><a href="#3-2-3-文章列表" class="headerlink" title="3.2.3 文章列表"></a>3.2.3 文章列表</h5><p>因为列表的元素不但是有序的，而且还支持按照索引范围获取元素。因此我们可以使用命令<code>lrange key 0 9</code>分页获取文章列表</p>
<h3 id="四-集合"><a href="#四-集合" class="headerlink" title="四 集合"></a><strong>四 集合</strong></h3><p>集合类型也可以保存多个字符串元素，与列表不同的是，集合中不允许有重复元素并且集合中的元素是无序的。一个集合最多可以存储<code>2^32-1</code>个元素。</p>
<h4 id="4-1-内部编码"><a href="#4-1-内部编码" class="headerlink" title="4.1 内部编码"></a><strong>4.1 内部编码</strong></h4><p>集合类型的内部编码有两种：</p>
<ul>
<li>intset（整数集合）：当集合中的元素都是整数且元素个数小于<code>set-max-intset-entries</code>配置（默认512个）时，redis会选用intset来作为集合的内部实现，从而减少内存的使用。</li>
<li>hashtable（哈希表）：当intset不能满足要求时，会使用hashtable。</li>
</ul>
<h4 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a><strong>4.2 使用场景</strong></h4><h5 id="4-2-1-用户标签"><a href="#4-2-1-用户标签" class="headerlink" title="4.2.1 用户标签"></a>4.2.1 用户标签</h5><p>例如一个用户对篮球、足球感兴趣，另一个用户对橄榄球、乒乓球感兴趣，这些兴趣点就是一个标签。有了这些数据就可以得到喜欢同一个标签的人，以及用户的共同感兴趣的标签。给用户打标签的时候需要①给用户打标签，②给标签加用户，需要给这两个操作增加事务。</p>
<ul>
<li>给用户打标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd user:1:tags tag1 tag2</span><br></pre></td></tr></table></figure>

<ul>
<li>给标签添加用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd tag1:users user:1</span><br><span class="line">sadd tag2:users user:1</span><br></pre></td></tr></table></figure>

<p>使用交集（sinter）求两个user的共同标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinter user:1:tags user:2:tags</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-抽奖功能"><a href="#4-2-2-抽奖功能" class="headerlink" title="4.2.2 抽奖功能"></a>4.2.2 抽奖功能</h5><p>集合有两个命令支持获取随机数，分别是：</p>
<ul>
<li>随机获取count个元素，集合元素个数不变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure>

<ul>
<li>随机弹出count个元素，元素从集合弹出，集合元素个数改变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure>

<p>用户点击抽奖按钮，参数抽奖，将用户编号放入集合，然后抽奖，分别抽一等奖、二等奖，如果已经抽中一等奖的用户不能参数抽二等奖则使用<code>spop</code>，反之使用<code>srandmember</code>。</p>
<h3 id="五-有序集合"><a href="#五-有序集合" class="headerlink" title="五 有序集合"></a><strong>五 有序集合</strong></h3><p>有序集合和集合一样，不能有重复元素。但是可以排序，它给每个元素设置一个score作为排序的依据。最多可以存储<code>2^32-1</code>个元素。</p>
<h4 id="5-1-内部编码"><a href="#5-1-内部编码" class="headerlink" title="5.1 内部编码"></a><strong>5.1 内部编码</strong></h4><p>有序集合类型的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当有序集合的元素个数小于<code>list-max-ziplist-entries</code>配置（默认128个）同时所有值都小于<code>list-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，更加节省内存。</li>
<li>skiplist（跳跃表）：当不满足ziplist的要求时，会使用skiplist。</li>
</ul>
<h4 id="5-2-使用场景"><a href="#5-2-使用场景" class="headerlink" title="5.2 使用场景"></a><strong>5.2 使用场景</strong></h4><h5 id="5-2-1-排行榜"><a href="#5-2-1-排行榜" class="headerlink" title="5.2.1 排行榜"></a>5.2.1 排行榜</h5><p>用户发布了n篇文章，其他人看到文章后给喜欢的文章点赞，使用score来记录点赞数，有序集合会根据score排行。流程如下</p>
<p>用户发布一篇文章，初始点赞数为0，即score为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd user:article 0 a</span><br></pre></td></tr></table></figure>

<p>有人给文章a点赞，递增<code>1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zincrby user:article 1 a</span><br></pre></td></tr></table></figure>

<p>查询点赞前三篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrevrangebyscore user:article 0 2</span><br></pre></td></tr></table></figure>

<p>查询点赞后三篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrangebyscore user:article 0 2</span><br></pre></td></tr></table></figure>

<h5 id="5-2-2-延迟消息队列"><a href="#5-2-2-延迟消息队列" class="headerlink" title="5.2.2 延迟消息队列"></a>5.2.2 延迟消息队列</h5><p>下单系统，下单后需要在15分钟内进行支付，如果15分钟未支付则自动取消订单。将下单后的十五分钟后时间作为score，订单作为value存入redis，消费者轮询去消费，如果消费的大于等于这笔记录的score，则将这笔记录移除队列，取消订单。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>在开发中，字符串类型是用的最多的数据类型，导致我们忽视了redis的其他四种数据类型，在具体场景下选择具体的数据类型对提升redis性能有非常大的帮助。redis虽然支持消息队列的实现，但是并不支持ack。所以redis实现的消息队列不能保证消息的可靠性，除非自己实现消息确认机制，不过这非常麻烦，所以如果是重要的消息还是推荐使用专门的消息队列去做，如RabbitMQ、RocketMQ。</p>
<hr>
<p>参考链接：<a href="https://mp.weixin.qq.com/s/FsL-54ALoNUAPcft-u8Leg?v_p=86&WBAPIAnalysisOriUICodes=10000001_10000002&launchid=10000365--x&wm=3333_2001&aid=01A0GdQv0UejmN65Ntcd4pBeamMWOPan5tHaY8rK5tZGJgPOs.&from=10AA393010" target="_blank" rel="noopener">Redis 五大数据类型使用场景</a>  </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Redis使用场景</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis修炼之数据类型</title>
    <url>/2020/08/12/redis-data-types/</url>
    <content><![CDATA[<blockquote>
<p>一、Redis 数据类型:</p>
</blockquote>
<p><strong>1、String（字符串）</strong><br>string 是 Redis 最基本的类型，理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>
<p><strong>2、Hash（哈希）</strong><br>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>
<a id="more"></a>

<p><strong>3、List（列表）</strong><br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>ps：可以使用List实现简单消息队列</p>
<p><strong>4、Set（集合）</strong><br>Redis 的 Set 是 string 类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
<p><strong>5、zset(sorted set：有序集合)</strong><br>Redis zset 和 set 一样也是string类型元素的集合，且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的，但分数(score)却可以重复。</p>
<blockquote>
<p>二、各个数据类型应用场景:</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>简介</th>
<th>特性</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>String(字符串)</td>
<td>二进制安全</td>
<td>可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512M</td>
<td>- - -</td>
</tr>
<tr>
<td>Hash(字典)</td>
<td>键值对集合，即编程语言中的Map类型</td>
<td>适合存储对象，并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>
<td>存储、读取、修改用户属性</td>
</tr>
<tr>
<td>List(列表)</td>
<td>链表(双向链表)</td>
<td>增删快，提供了操作某一段元素的API</td>
<td>1，最新消息排行等功能(比如朋友圈的时间线) 2，消息队列</td>
</tr>
<tr>
<td>Set(集合)</td>
<td>哈希表实现，元素不重复</td>
<td>1、添加、删除，查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td>
<td>1、共同好友 2、利用唯一性，统计访问网站的所有独立ip 3、好友推荐时，根据tag求交集，大于某个阈值就可以推荐</td>
</tr>
<tr>
<td>Sorted Set(有序集合)</td>
<td>将Set中的元素增加一个权重参数score，元素按score有序排列</td>
<td>数据插入集合时，已经进行天然排序</td>
<td>1、排行榜 2、带权重的消息队列</td>
</tr>
</tbody></table>
<blockquote>
<p>三、注意:</p>
</blockquote>
<p>&emsp;&emsp;Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p>
<p>&emsp;&emsp;Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p>
<p>&emsp;&emsp;每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">redis [1] &gt; GET foo</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;然而这些以数字命名的数据库又与我们理解的数据库有所区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内在只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p>
<hr>
<p>参考链接：<a href="https://www.runoob.com/redis/redis-data-types.html" target="_blank" rel="noopener">菜鸟教程——Redis数据类型</a>  </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 - Zabbix</title>
    <url>/2020/07/02/zabbix-summary/</url>
    <content><![CDATA[<h1 id="Zabbix-介绍"><a href="#Zabbix-介绍" class="headerlink" title="Zabbix 介绍"></a>Zabbix 介绍</h1><ul>
<li>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</li>
<li>Zabbix 是一个企业级分布式开源监控解决方案。</li>
<li>Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</li>
<li>Zabbix 支持主动轮询（polling）和被动捕获（trapping）。Zabbix所有的报表、统计数据和配置参数都可以通过基于 Web 的前端页面进行访问。基于 Web 的前端页面确保您可以在任何地方访问您监控的网络状态和服务器健康状况。适当的配置后，Zabbix 可以在监控 IT 基础设施方面发挥重要作用。无论是对于有少量服务器的小型组织，还是拥有大量服务器的大企业而言，同样适用。</li>
<li>Zabbix 是免费的。Zabbix 是根据 GPL 通用公共许可证的第二版编写和发布的。这意味着产品源代码是免费发布的，可供公共使用。</li>
</ul>
<a id="more"></a>

<h1 id="Zabbix-功能"><a href="#Zabbix-功能" class="headerlink" title="Zabbix 功能"></a>Zabbix 功能</h1><p>Zabbix 是一个高度成熟完善的网络监控解决方案，一个的软件包中包含了多种功能。</p>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/items" target="_blank" rel="noopener">数据采集</a></strong></p>
<ul>
<li>可用性和性能检查；</li>
<li>支持 SNMP（包括主动轮询和被动捕获）、IPMI、JMX、VMware 监控；</li>
<li>自定义检查；</li>
<li>按照自定义的时间间隔采集需要的数据；</li>
<li>通过 Server/Proxy 和 Agents 来执行数据采集。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/triggers" target="_blank" rel="noopener">灵活的阈值定义</a></strong></p>
<ul>
<li>您可以参考后端数据库定义非常灵活的告警阈值，即触发器</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/notifications" target="_blank" rel="noopener">高度可配置化的告警</a></strong></p>
<ul>
<li>可以根据递增计划、接收者、媒介类型自定义发送告警通知；</li>
<li>使用宏变量可以使告警通知变得更加高效有用；</li>
<li>自动操作包含远程执行命令。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/visualisation/graphs/simple" target="_blank" rel="noopener">实时图形</a></strong></p>
<ul>
<li>使用内置图形功能可以将监控项实时绘制成图形。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/web_monitoring" target="_blank" rel="noopener">Web 监控功能</a></strong></p>
<ul>
<li>Zabbix可以追踪模拟鼠标在 Web 网站上的点击操作，来检查 Web 网站的功能和响应时间。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/visualisation" target="_blank" rel="noopener">丰富的可视化选项</a></strong></p>
<ul>
<li>可以组合多个监控项到单个视图中，创建自定义图表；</li>
<li>网络拓扑图；</li>
<li>以仪表盘样式展示自定义聚合图形和幻灯片演示；</li>
<li>报表；</li>
<li>监控资源的更高层次展示视图（业务视图）。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/installation/requirements#database_size" target="_blank" rel="noopener">历史数据存储</a></strong></p>
<ul>
<li>存储在数据库中的数据；</li>
<li>历史配置；</li>
<li>内置数据管理机制（housekeeping）。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/hosts" target="_blank" rel="noopener">配置简单</a></strong></p>
<ul>
<li>将被监控设备添加为主机；</li>
<li>主机一旦添加到数据库中，就会采集数据用于监控；</li>
<li>将模板用于监控设备。</li>
</ul>
<p><strong>使用<a href="https://www.zabbix.com/documentation/4.0/manual/config/templates" target="_blank" rel="noopener">模板</a></strong></p>
<ul>
<li>模板中分组检查；</li>
<li>模板可以关联模板，继承已关联模板的属性。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/discovery" target="_blank" rel="noopener">网络发现</a></strong></p>
<ul>
<li>自动发现网络设备；</li>
<li>Zabbix Agent 发现设备后自动注册；</li>
<li>自动发现文件系统、网络接口和 SNMP OIDs 值。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/web_interface" target="_blank" rel="noopener">快捷的 Web 界面</a></strong></p>
<ul>
<li>基于 PHP 的 Web 前端；</li>
<li>可以从任何地方访问；</li>
<li>您可以定制自己的操作方式；</li>
<li>您可以通过审计日志来查看你的操作。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/api" target="_blank" rel="noopener">Zabbix API</a></strong></p>
<ul>
<li>Zabbix API 为 Zabbix 提供可编程接口，用于批量操作、第三方软件集成和其他用途。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/users_and_usergroups" target="_blank" rel="noopener">权限管理系统</a></strong></p>
<ul>
<li>安全的用户身份验证；</li>
<li>指定的用户只能查看指定的权限范围内的视图。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/agent" target="_blank" rel="noopener">功能强大且易于扩展的 Zabbix Agent</a></strong></p>
<ul>
<li>部署于被监控对象上；</li>
<li>支持 Linux 和 Windows ；</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/server" target="_blank" rel="noopener">二进制守护进程</a></strong></p>
<ul>
<li>为了更好的性能和更少的内存占用，采用 C 语言编写；</li>
<li>便于移植。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/distributed_monitoring" target="_blank" rel="noopener">适应更复杂的环境</a></strong></p>
<ul>
<li>使用 Zabbix Proxy 代理，可以轻松实现分布式远程监控。</li>
</ul>
<h1 id="Zabbix-概述"><a href="#Zabbix-概述" class="headerlink" title="Zabbix 概述"></a>Zabbix 概述</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Zabbix 由几个主要的功能组件组成，其功能介绍如下所示。</p>
<h3 id="SERVER"><a href="#SERVER" class="headerlink" title="SERVER"></a>SERVER</h3><p><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/server" target="_blank" rel="noopener">Zabbix server</a> 是 Zabbix软件的核心组件，agent 向其报告可用性、系统完整性信息和统计信息。server也是存储所有配置信息、统计信息和操作信息的核心存储库。</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>所有配置信息以及 Zabbix 采集到的数据都被存储在数据库中。</p>
<h3 id="WEB-界面"><a href="#WEB-界面" class="headerlink" title="WEB 界面"></a>WEB 界面</h3><p>为了从任何地方和任何平台轻松访问 Zabbix ，我们提供了基于 web 的界面。该界面是 Zabbix server 的一部分，通常（但不一定）和 Zabbix server 运行在同一台物理机器上。</p>
<h3 id="PROXY"><a href="#PROXY" class="headerlink" title="PROXY"></a>PROXY</h3><p><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/proxy" target="_blank" rel="noopener">Zabbix proxy</a> 可以代替 Zabbix server采集性能和可用性数据。Zabbix proxy在Zabbix的部署是可选部分；但是proxy的部署可以很好的分担单个Zabbix server的负载。</p>
<h3 id="AGENT"><a href="#AGENT" class="headerlink" title="AGENT"></a>AGENT</h3><p><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/agent" target="_blank" rel="noopener">Zabbix agents</a> 部署在被监控目标上，用于主动监控本地资源和应用程序，并将收集的数据发送给 Zabbix server。</p>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>另外，回过头来整体的了解下 Zabbix 内部的数据流对Zabbix的使用也很重要。首先，为了创建一个采集数据的监控项，您就必须先创建主机。其次，在任务的另外一端，必须要有监控项才能创建触发器（trigger），必须要有触发器来创建动作（action）。因此，如果您想要收到类似“X个server上CPU负载过高”这样的告警，您必须首先为 <em>Server X</em> 创建一个主机条目，其次创建一个用于监控其 CPU的监控项，最后创建一个触发器，用来触发 CPU负载过高这个动作，并将其发送到您的邮箱里。虽然这些步骤看起来很繁琐，但是使用模板的话，实际操作非常简单。也正是由于这种设计，使得 Zabbix 的配置变得更加灵活易用。</p>
<h1 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h1><p>以下描述来自<strong>开源中国</strong>：</p>
<p>Zabbix 是一个基于 WEB 界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。</p>
<p>zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供柔软的通知机制以让系统管理员快速定位/解决存在的各种问题。</p>
<p><strong>zabbix</strong>由2部分构成，<strong>zabbix server</strong>与可选组件zabbix agent。<br><strong>zabbix server</strong>可以通过SNMP，<strong>zabbix agent</strong>，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux, Solaris, HP-UX, AIX, Free BSD, Open BSD, OS X等平台之上。<br><strong>zabbix agent</strong>需要安装在被监视的目标服务器上，它主要完成对硬件信息或与操作系统有关的内存，CPU等信息的收集。<strong>zabbix agent</strong>可以运行在Linux ,Solaris, HP-UX, AIX, Free BSD, Open BSD, OS X, Tru64/OSF1, Windows NT4.0, Windows 2000/2003/XP/Vista)等系统之上。</p>
<p><strong>zabbix server</strong>可以单独监视远程服务器的服务状态；同时也可以与<strong>zabbix agent</strong>配合，可以轮询<strong>zabbix agent</strong>主动接收监视数据（trapping方式），同时还可被动接收<strong>zabbix agent</strong>发送的数据（trapping方式）。<br>另外<strong>zabbix server</strong>还支持SNMP (v1,v2)，可以与SNMP软件(例如：net-snmp)等配合使用。</p>
<h2 id="zabbix的主要特点"><a href="#zabbix的主要特点" class="headerlink" title="zabbix的主要特点"></a>zabbix的主要特点</h2><ul>
<li>安装与配置简单，学习成本低</li>
<li>支持多语言（包括中文）</li>
<li>免费开源</li>
<li>自动发现服务器与网络设备</li>
<li>分布式监视以及WEB集中管理功能</li>
<li>可以无agent监视</li>
<li>用户安全认证和柔软的授权方式</li>
<li>通过WEB界面设置或查看监视结果</li>
<li>email等通知功能</li>
<li>等等</li>
</ul>
<h2 id="Zabbix主要功能"><a href="#Zabbix主要功能" class="headerlink" title="Zabbix主要功能"></a>Zabbix主要功能</h2><ul>
<li>CPU负荷</li>
<li>内存使用</li>
<li>磁盘使用</li>
<li>网络状况</li>
<li>端口监视</li>
<li>日志监视</li>
</ul>
<hr>
<p><a href="https://www.zabbix.com/documentation/5.0/manual/introduction/about" target="_blank" rel="noopener">Zabbix Documentation 5.0 - Introduction</a></p>
<p><a href="https://www.oschina.net/p/zabbix?hmsr=aladdin1e1" target="_blank" rel="noopener">开源中国- Zabbix软件简介</a></p>
]]></content>
      <categories>
        <category>监控</category>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>Zabbix</tag>
        <tag>告警</tag>
        <tag>开源</tag>
        <tag>初识</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 垃圾回收机制</title>
    <url>/2020/06/26/python-garbage-collection/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>python采用的是<strong>引用计数</strong>机制为主，<strong>标记-清除</strong>和<strong>分代收集</strong>两种机制为辅的策略。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ul>
<li>Python语言默认采用的垃圾收集机制是『引用计数法 <code>Reference Counting</code>』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。</li>
<li>『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数<code>ob_ref</code>加<code>1</code>，每当该对象的引用失效时计数<code>ob_ref</code>减<code>1</code>，一旦对象的引用计数为<code>0</code>，该对象立即被回收，对象占用的内存空间将被释放。</li>
<li>它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</li>
</ul>
<a id="more"></a>

<h3 id="引用计数案例"><a href="#引用计数案例" class="headerlink" title="引用计数案例"></a>引用计数案例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''初始化对象'''</span></span><br><span class="line">        print(<span class="string">'object born id:%s'</span> %str(hex(id(self))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''循环引用变量与删除变量'''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=A()</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(c)</span>:</span></span><br><span class="line">    print(<span class="string">'obejct refcount is: '</span>,sys.getrefcount(c)) <span class="comment">#getrefcount()方法用于返回对象的引用计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="comment">#生成对象</span></span><br><span class="line">    a=A()</span><br><span class="line">    func(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#增加引用</span></span><br><span class="line">    b=a</span><br><span class="line">    func(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#销毁引用对象b</span></span><br><span class="line">    <span class="keyword">del</span> b</span><br><span class="line">    func(a)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">object born id:0x265c56a56d8</span><br><span class="line">obejct refcount is:  4</span><br><span class="line">obejct refcount is:  5</span><br><span class="line">obejct refcount is:  4</span><br></pre></td></tr></table></figure>

<h4 id="导致引用计数-1的情况"><a href="#导致引用计数-1的情况" class="headerlink" title="导致引用计数+1的情况"></a>导致引用计数+1的情况</h4><ul>
<li>对象被创建，例如a=23</li>
<li>对象被引用，例如b=a</li>
<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>
<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code></li>
</ul>
<h4 id="导致引用计数-1的情况-1"><a href="#导致引用计数-1的情况-1" class="headerlink" title="导致引用计数-1的情况"></a>导致引用计数-1的情况</h4><ul>
<li>对象的别名被显式销毁，例如<code>del a</code></li>
<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>
<li>一个对象离开它的作用域，例如f函数执行完毕时，<code>func</code>函数中的局部变量（全局变量不会）</li>
<li>对象所在的容器被销毁，或从容器中删除对象</li>
</ul>
<h3 id="循环引用导致内存泄露"><a href="#循环引用导致内存泄露" class="headerlink" title="循环引用导致内存泄露"></a>循环引用导致内存泄露</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''循环引用'''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=A()</span><br><span class="line">        c2=A()</span><br><span class="line">        c1.t=c2</span><br><span class="line">        c2.t=c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id:0x1feb9f691d0</span><br><span class="line">object born id:0x1feb9f69438</span><br><span class="line">object born id:0x1feb9f690b8</span><br><span class="line">object born id:0x1feb9f69d68</span><br><span class="line">object born id:0x1feb9f690f0</span><br><span class="line">object born id:0x1feb9f694e0</span><br><span class="line">object born id:0x1feb9f69f60</span><br><span class="line">object born id:0x1feb9f69eb8</span><br><span class="line">object born id:0x1feb9f69128</span><br><span class="line">object born id:0x1feb9f69c88</span><br><span class="line">object born id:0x1feb9f69470</span><br><span class="line">object born id:0x1feb9f69e48</span><br><span class="line">object born id:0x1feb9f69ef0</span><br><span class="line">object born id:0x1feb9f69dd8</span><br><span class="line">object born id:0x1feb9f69e10</span><br><span class="line">object born id:0x1feb9f69ac8</span><br><span class="line">object born id:0x1feb9f69198</span><br><span class="line">object born id:0x1feb9f69cf8</span><br><span class="line">object born id:0x1feb9f69da0</span><br><span class="line">object born id:0x1feb9f69c18</span><br><span class="line">object born id:0x1feb9f69d30</span><br><span class="line">object born id:0x1feb9f69ba8</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>创建了<code>c1</code>，<code>c2</code>后，这两个对象的引用计数都是<code>1</code>，执行<code>c1.t=c2</code>和<code>c2.t=c1</code>后，引用计数变成<code>2</code>.</li>
<li>在<code>del c1</code>后，内存<code>c1</code>的对象的引用计数变为<code>1</code>，由于不是为<code>0</code>，所以<code>c1</code>的对象不会被销毁,同理，在<code>del c2</code>后也是一样的。</li>
<li>虽然它们两个的对象都是可以被销毁的，但是由于循环引用，导致垃圾回收器都不会回收它们，所以就会导致内存泄露。</li>
</ul>
<h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><ul>
<li>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。</li>
<li>新创建的对象都会分配在<strong>年轻代</strong>，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到<strong>中年代</strong>去，依此类推，<strong>老年代</strong>中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。</li>
<li>同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</li>
</ul>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>有三种情况会触发垃圾回收：</p>
<ol>
<li>调用<code>gc.collect()</code>,需要先导入<code>gc</code>模块。</li>
<li>当<code>gc</code>模块的计数器达到阀值的时候。</li>
<li>程序退出的时候。</li>
</ol>
<h4 id="gc模块"><a href="#gc模块" class="headerlink" title="gc模块"></a>gc模块</h4><p>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>
<p><strong>常用函数</strong>：</p>
<ol>
<li><code>gc.set_debug(flags)</code> 设置gc的debug日志，一般设置为<code>gc.DEBUG_LEAK</code></li>
<li><code>gc.collect([generation])</code><br>显式进行垃圾回收，可以输入参数，<code>0</code>代表只检查第一代的对象，<code>1</code>代表检查一，二代的对象，<code>2</code>代表检查一，二，三代的对象，如果不传参数，执行一个<code>full collection</code>，也就是等于传2。返回不可达（unreachable objects）对象的数目。</li>
<li><code>gc.set_threshold(threshold0[, threshold1[, threshold2])</code><br>设置自动执行垃圾回收的频率。</li>
<li><code>gc.get_count()</code> 获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>
</ol>
<p>扩展资料：<a href="https://docs.python.org/3.5/library/gc.html" target="_blank" rel="noopener">Garbage Collector interface</a></p>
<h4 id="gc实践案例"><a href="#gc实践案例" class="headerlink" title="gc实践案例"></a>gc实践案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''循环引用'''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=A()</span><br><span class="line">        c2=A()</span><br><span class="line">        c1.t=c2</span><br><span class="line">        c2.t=c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br><span class="line">        <span class="comment">#增加垃圾回收机制</span></span><br><span class="line">        print(gc.garbage)</span><br><span class="line">        print(gc.collect())</span><br><span class="line">        print(gc.garbage)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">object born id:0x21d1a5dc470</span><br><span class="line">object born id:0x21d1a5dc9e8</span><br><span class="line">[]</span><br><span class="line">4</span><br><span class="line">gc: collectable &lt;A 0x0000021D1A5DC470&gt;</span><br><span class="line">[&lt;__main__.A object at 0x0000021D1A5DC470&gt;, &lt;__main__.A object at 0x0000021D1A5DC9E8&gt;, &#123;'t': &lt;__main__.A object at 0x0000021D1A5DC9E8&gt;&#125;, &#123;'t': &lt;__main__.A object at 0x0000021D1A5DC470&gt;&#125;]</span><br><span class="line">gc: collectable &lt;A 0x0000021D1A5DC9E8&gt;</span><br><span class="line">gc: collectable &lt;dict 0x0000021D1A156C88&gt;</span><br><span class="line">gc: collectable &lt;dict 0x0000021D1A5CABC8&gt;</span><br></pre></td></tr></table></figure>



<h3 id="gc模块的自动垃圾回收机制"><a href="#gc模块的自动垃圾回收机制" class="headerlink" title="gc模块的自动垃圾回收机制"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">垃圾回收 = 垃圾检查 + 垃圾回收</span><br></pre></td></tr></table></figure>

<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，改对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>
<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''垃圾自动回收'''</span></span><br><span class="line">    print(gc.get_count())</span><br><span class="line">    a=A()</span><br><span class="line">    print(gc.get_count())</span><br><span class="line">    <span class="keyword">del</span> a</span><br><span class="line">    print(gc.get_count())</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(621, 10, 0)</span><br><span class="line">object born id:0x2ca32a8c588</span><br><span class="line">(624, 10, 0)</span><br><span class="line">(623, 10, 0)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>621</code>指距离上一次<code>一代</code>垃圾检查，Python分配内存的数目减去释放内存的数目，注意:是内存分配，而不是引用计数的增加。</li>
<li><code>10</code>指距离上一次<code>二代</code>垃圾检查，<code>一代</code>垃圾检查的次数。</li>
<li><code>0</code>是指距离上一次<code>三代</code>垃圾检查，<code>二代</code>垃圾检查的次数。</li>
</ul>
<h3 id="自动回收阈值"><a href="#自动回收阈值" class="headerlink" title="自动回收阈值"></a>自动回收阈值</h3><p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器</p>
<p>注意：<br>如果循环引用中，两个对象都定义了<code>__del__</code>方法，gc模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的<code>__del__</code>方法，所以为了安全起见，gc模块会把对象放到<code>gc.garbage</code>中，但是不会销毁对象。</p>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>
<img data-src="/2020/06/26/python-garbage-collection/mark-sweep.svg" class>

<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。 mark-sweepg 在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>
<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://www.memorymanagement.org/mmref/recycle.html#tracing-collectors" target="_blank" rel="noopener">https://www.memorymanagement.org/mmref/recycle.html#tracing-collectors</a></p>
<p><a href="https://foofish.net/python-gc.html" target="_blank" rel="noopener">FOOFISH-PYTHON之禅- Python中的垃圾回收机制</a></p>
<p><a href="https://sutune.me/2018/10/14/python-GC/#comments" target="_blank" rel="noopener">Python 垃圾回收机制</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>基础原理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>垃圾回收</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>理解Python协程(Coroutine)</title>
    <url>/2020/06/22/python-coroutine/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>由于GIL的存在，导致Python多线程性能甚至比单线程更糟。</p>
<blockquote>
<p>GIL: 全局解释器锁（英语：Global Interpreter Lock，缩写GIL），是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。[1]即便在多核心处理器上，使用 GIL 的解释器也只允许同一时间执行一个线程。</p>
</blockquote>
<p>于是出现了协程（Coroutine）这么个东西。</p>
<blockquote>
<p>协程: 协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行.</p>
</blockquote>
<p>协程由于由程序主动控制切换，没有线程切换的开销，所以执行效率极高。对于IO密集型任务非常适用，如果是cpu密集型，推荐多进程+协程的方式。</p>
<p>在Python3.4之前，官方没有对协程的支持，存在一些三方库的实现，比如gevent和Tornado。3.4之后就内置了asyncio标准库，官方真正实现了协程这一特性。</p>
<p>而Python对协程的支持，是通过Generator实现的，协程是遵循某些规则的生成器。因此，我们在了解协程之前，我们先要学习生成器。</p>
<a id="more"></a>

<h2 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器(Generator)"></a>生成器(Generator)</h2><p>我们这里主要讨论<code>yield</code>和<code>yield from</code>这两个表达式，这两个表达式和协程的实现息息相关。</p>
<ul>
<li>Python2.5中引入<code>yield</code>表达式，参见<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0342/">PEP342</a></li>
<li>Python3.3中增加<code>yield from</code>语法，参见<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0380/">PEP380</a>，</li>
</ul>
<p>方法中包含<code>yield</code>表达式后，Python会将其视作generator对象，不再是普通的方法。</p>
<h3 id="yield表达式的使用"><a href="#yield表达式的使用" class="headerlink" title="yield表达式的使用"></a><code>yield</code>表达式的使用</h3><p>我们先来看该表达式的具体使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"generator start"</span>)</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        yield_expression_value = <span class="keyword">yield</span> n</span><br><span class="line">        print(<span class="string">"yield_expression_value = %d"</span> % yield_expression_value)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ①创建generator对象</span></span><br><span class="line">generator = test()</span><br><span class="line">print(type(generator))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---------------\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ②启动generator</span></span><br><span class="line">next_result = generator.__next__()</span><br><span class="line">print(<span class="string">"next_result = %d"</span> % next_result)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---------------\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③发送值给yield表达式</span></span><br><span class="line">send_result = generator.send(<span class="number">666</span>)</span><br><span class="line">print(<span class="string">"send_result = %d"</span> % send_result)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">---------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">generator</span> <span class="title">start</span></span></span><br><span class="line">next_result = 1</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">yield_expression_value = <span class="number">666</span></span><br><span class="line">send_result = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>方法说明：</p>
<ul>
<li><code>__next__()</code>方法: 作用是启动或者恢复generator的执行，相当于send(None)</li>
<li><code>send(value)</code>方法：作用是发送值给yield表达式。启动generator则是调用send(None)</li>
</ul>
<p>执行结果的说明：</p>
<ul>
<li>①创建generator对象：包含yield表达式的函数将不再是一个函数，调用之后将会返回generator对象</li>
<li>②启动generator：使用生成器之前需要先调用<code>__next__</code>或者<code>send(None)</code>，否则将报错。启动generator后，代码将执行到<code>yield</code>出现的位置，也就是执行到<code>yield n</code>，然后将n传递到<code>generator.__next__()</code>这行的返回值。（注意，生成器执行到<code>yield n</code>后将暂停在这里，直到下一次生成器被启动）</li>
<li>③发送值给yield表达式：调用send方法可以发送值给yield表达式，同时恢复生成器的执行。生成器从上次中断的位置继续向下执行，然后遇到下一个<code>yield</code>，生成器再次暂停，切换到主函数打印出send_result。</li>
</ul>
<p>理解这个demo的关键是：生成器启动或恢复执行一次，将会在<code>yield</code>处暂停。上面的第②步仅仅执行到了<code>yield n</code>，并没有执行到赋值语句，到了第③步，生成器恢复执行才给<code>yield_expression_value</code>赋值。</p>
<h3 id="生产者和消费者模型"><a href="#生产者和消费者模型" class="headerlink" title="生产者和消费者模型"></a>生产者和消费者模型</h3><p>上面的例子中，代码中断–&gt;切换执行，体现出了协程的部分特点。</p>
<p>我们再举一个生产者、消费者的例子，这个例子来自<a href="https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090171191d05dae6e129940518d1d6cf6eeaaa969000">廖雪峰的Python教程</a>：</p>
<blockquote>
<p>传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。<br>现在改用协程，生产者生产消息后，直接通过<code>yield</code>跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"[CONSUMER] start"</span>)</span><br><span class="line">    r = <span class="string">'start'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            print(<span class="string">"n is empty"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">"[CONSUMER] Consumer is consuming %s"</span> % n)</span><br><span class="line">        r = <span class="string">"200 ok"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="comment"># 启动generator</span></span><br><span class="line">    start_value = c.send(<span class="literal">None</span>)</span><br><span class="line">    print(start_value)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"[PRODUCER] Producer is producing %d"</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        print(<span class="string">'[PRODUCER] Consumer return: %s'</span> % r)</span><br><span class="line">    <span class="comment"># 关闭generator</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建生成器</span></span><br><span class="line">c = consumer()</span><br><span class="line"><span class="comment"># 传入generator</span></span><br><span class="line">producer(c)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[CONSUMER] start</span><br><span class="line">start</span><br><span class="line">[PRODUCER] producer <span class="keyword">is</span> producing <span class="number">1</span></span><br><span class="line">[CONSUMER] consumer <span class="keyword">is</span> consuming <span class="number">1</span></span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> ok</span><br><span class="line">[PRODUCER] producer <span class="keyword">is</span> producing <span class="number">2</span></span><br><span class="line">[CONSUMER] consumer <span class="keyword">is</span> consuming <span class="number">2</span></span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> ok</span><br><span class="line">[PRODUCER] producer <span class="keyword">is</span> producing <span class="number">3</span></span><br><span class="line">[CONSUMER] consumer <span class="keyword">is</span> consuming <span class="number">3</span></span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> ok</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意到<code>consumer</code>函数是一个<code>generator</code>，把一个<code>consumer</code>传入<code>produce</code>后：</p>
</blockquote>
<ol>
<li>首先调用<code>c.send(None)</code>启动生成器；</li>
<li>然后，一旦生产了东西，通过<code>c.send(n)</code>切换到consumer执行；</li>
<li><code>consumer</code>通过<code>yield</code>拿到消息，处理，又通过<code>yield</code>把结果传回；</li>
<li><code>produce</code>拿到<code>consumer</code>处理的结果，继续生产下一条消息；</li>
<li><code>produce</code>决定不生产了，通过<code>c.close()</code>关闭<code>consumer</code>，整个过程结束。</li>
</ol>
<blockquote>
<p>整个流程无锁，由一个线程执行，<code>produce</code>和<code>consumer</code>协作完成任务，所以称为“协程”，而非线程的抢占式多任务。</p>
</blockquote>
<h3 id="yield-from表达式"><a href="#yield-from表达式" class="headerlink" title="yield from表达式"></a><code>yield from</code>表达式</h3><p>Python3.3版本新增<code>yield from</code>语法，新语法用于将一个生成器部分操作委托给另一个生成器。此外，允许子生成器（即yield from后的“参数”）返回一个值，该值可供委派生成器（即包含yield from的生成器）使用。并且在委派生成器中，可对子生成器进行优化。</p>
<p>我们先来看最简单的应用，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 委派生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"test_yield_from start"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    print(<span class="string">"test_yield_from end"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_yield_from(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_yield_from start</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">test_yield_from end</span><br></pre></td></tr></table></figure>

<p>这里我们仅仅给这个生成器添加了一些打印，如果是正式的代码中，你可以添加正常的执行逻辑。</p>
<p>如果上面的<code>test_yield_from</code>函数中有两个<code>yield from</code>语句，将串行执行。比如将上面的<code>test_yield_from</code>函数改写成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"test_yield_from start"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    print(<span class="string">"test_yield_from doing"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    print(<span class="string">"test_yield_from end"</span>)</span><br></pre></td></tr></table></figure>

<p>将输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_yield_from start</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">test_yield_from doing</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">test_yield_from end</span><br></pre></td></tr></table></figure>

<p>在这里，<code>yield from</code>起到的作用相当于下面写法的简写形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> test(n):</span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<p>看起来这个<code>yield from</code>也没做什么大不了的事，其实它还帮我们处理了异常之类的。具体可以看stackoverflow上的这个问题：<a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/9708902/in-practice-what-are-the-main-uses-for-the-new-yield-from-syntax-in-python-3">In practice, what are the main uses for the new “yield from” syntax in Python 3.3?</a></p>
<h2 id="协程-Coroutine"><a href="#协程-Coroutine" class="headerlink" title="协程(Coroutine)"></a>协程(Coroutine)</h2><ul>
<li>Python3.4开始，新增了asyncio相关的API，语法使用[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>和</code>yield from`实现协程</li>
<li>Python3.5中引入<code>async</code>/<code>await</code>语法，参见<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0492/">PEP492</a></li>
</ul>
<p>我们先来看Python3.4的实现。</p>
<h3 id="asyncio-coroutine-mailto-asyncio-coroutine"><a href="#asyncio-coroutine-mailto-asyncio-coroutine" class="headerlink" title="[@asyncio.coroutine](mailto:@asyncio.coroutine)`"></a>[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`</h3><p>Python3.4中，使用[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`装饰的函数称为协程。不过没有从语法层面进行严格约束。</p>
<blockquote>
<p>对装饰器不了解的小伙伴可以看我的上一篇博客–<a href="https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/ee82b941772a">《理解Python装饰器》</a></p>
</blockquote>
<p>对于Python原生支持的协程来说，Python对协程和生成器做了一些区分，便于消除这两个不同但相关的概念的歧义：</p>
<ul>
<li>标记了[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>装饰器的函数称为协程函数，</code>iscoroutinefunction()`方法返回True</li>
<li>调用协程函数返回的对象称为协程对象，<code>iscoroutine()</code>函数返回True</li>
</ul>
<p>举个栗子，我们给上面<code>yield from</code>的demo中添加[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span><span class="params">(n)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否是协程函数</span></span><br><span class="line">print(asyncio.iscoroutinefunction(test_yield_from))</span><br><span class="line"><span class="comment"># 是否是协程对象</span></span><br><span class="line">print(asyncio.iscoroutine(test_yield_from(<span class="number">3</span>)))</span><br></pre></td></tr></table></figure>

<p>毫无疑问输出结果是True。</p>
<p>可以看下[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`的源码中查看其做了什么，我将其源码简化下，大致如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment"># 判断是否是生成器</span></span><br><span class="line">    <span class="keyword">if</span> inspect.isgeneratorfunction(func):</span><br><span class="line">        coro = func</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 将普通函数变成generator</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">coro</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            res = func(*args, **kw)</span><br><span class="line">            res = <span class="keyword">yield</span> <span class="keyword">from</span> res</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment"># 将generator转换成coroutine</span></span><br><span class="line">    wrapper = types.coroutine(coro)</span><br><span class="line">    <span class="comment"># For iscoroutinefunction().</span></span><br><span class="line">    wrapper._is_coroutine = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>将这个装饰器标记在一个生成器上，就会将其转换成coroutine。</p>
<p>然后，我们来实际使用下[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>和</code>yield from`：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"Compute %s + %s ..."</span> % (x, y))</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    result = <span class="keyword">yield</span> <span class="keyword">from</span> compute(x, y)</span><br><span class="line">    print(<span class="string">"%s + %s = %s"</span> % (x, y, result))</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line"><span class="comment"># 中断调用，直到协程执行结束</span></span><br><span class="line">loop.run_until_complete(print_sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">"end"</span>)</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">Compute <span class="number">1</span> + <span class="number">2</span> ...</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><code>print_sum</code>这个协程中调用了子协程<code>compute</code>，它将等待<code>compute</code>执行结束才返回结果。</p>
<p>这个demo点调用流程如下图：</p>
<p><img data-src="https://pic2.zhimg.com/v2-551d0dabcd42f19f957835b19d2504d9_b.jpg" alt="img"></p>
<p>EventLoop将会把<code>print_sum</code>封装成Task对象</p>
<p>流程图展示了这个demo的控制流程，不过没有展示其全部细节。比如其中“暂停”的1s，实际上创建了一个future对象, 然后通过<code>BaseEventLoop.call_later()</code>在1s后唤醒这个任务。</p>
<p>值得注意的是，[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`将在Python3.10版本中移除。</p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a><code>async</code>/<code>await</code></h3><p>Python3.5开始引入<code>async</code>/<code>await</code>语法（<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0492">PEP 492</a>），用来简化协程的使用并且便于理解。</p>
<p><code>async</code>/<code>await</code>实际上只是[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>和</code>yield from`的语法糖：</p>
<ul>
<li>把[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>替换为</code>async`</li>
<li>把<code>yield from</code>替换为<code>await</code></li>
</ul>
<p>即可。</p>
<p>比如上面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"Compute %s + %s ..."</span> % (x, y))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    result = <span class="keyword">await</span> compute(x, y)</span><br><span class="line">    print(<span class="string">"%s + %s = %s"</span> % (x, y, result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line">loop.run_until_complete(print_sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">"end"</span>)</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>我们再来看一个asyncio中Future的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">future = asyncio.Future()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"wait 1 second"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"set_result"</span>)</span><br><span class="line">    future.set_result(<span class="string">'data'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro2</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="keyword">await</span> future</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait([</span><br><span class="line">    coro1()</span><br><span class="line">    coro2()</span><br><span class="line">]))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait <span class="number">1</span> second</span><br><span class="line">(大约等待<span class="number">1</span>秒)</span><br><span class="line">set_result</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>这里await后面跟随的future对象，协程中yield from或者await后面可以调用future对象，其作用是：暂停协程，直到future执行结束或者返回result或抛出异常。</p>
<p>而在我们的例子中，<code>await future</code>必须要等待<code>future.set_result(&#39;data&#39;)</code>后才能够结束。将<code>coro2()</code>作为第二个协程可能体现得不够明显，可以将协程的调用改成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait([</span><br><span class="line">    <span class="comment"># coro1(),</span></span><br><span class="line">    coro2(),</span><br><span class="line">    coro1()</span><br><span class="line">]))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>输出的结果仍旧与上面相同。</p>
<p>其实，<code>async</code>这个关键字的用法不止能用在函数上，还有<code>async with</code>异步上下文管理器，<code>async for</code>异步迭代器. 对这些感兴趣且觉得有用的可以网上找找资料，这里限于篇幅就不过多展开了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文就生成器和协程做了一些学习、探究和总结，不过并没有做过多深入深入的研究。权且作为入门到一个笔记，之后将会尝试自己实现一下异步API，希望有助于理解学习。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/68043798" target="_blank" rel="noopener">理解<em>Python协程</em>(Coroutine)</a></p>
<p><a href="https://eastlakeside.gitbook.io/interpy-zh/coroutines" target="_blank" rel="noopener">Python进阶 - 协程</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923057403198272" target="_blank" rel="noopener">廖雪峰 - Python协程</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>协程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>协程</tag>
        <tag>生成器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之全局解释器锁GIL</title>
    <url>/2020/06/11/python-GIL/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>GIL(Global Interpreter Lock)，也称为全局解释器，官方解释为：</p>
<blockquote>
<p>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p>
</blockquote>
<p>主要意思为：</p>
<blockquote>
<p>GIL是一个互斥锁，它防止多个线程同时执行Python字节码。这个锁是必要的，主要是因为CPython的内存管理不是线程安全的</p>
</blockquote>
<a id="more"></a>

<h3 id="Python解释器有哪些"><a href="#Python解释器有哪些" class="headerlink" title="Python解释器有哪些"></a>Python解释器有哪些</h3><ol>
<li>CPython: 官方默认版本，使用C语言开发，是Python使用最广泛的解释器，有GIL.</li>
<li>IPython: IPython是基于CPython之上的交互式解释器，其它方面和CPython相同.</li>
<li>PyPy: PyPy采用JIT(Just In Time)也就是即时编译编译器，对Python代码执行动态编译，目的是加快执行速度，有GIL.</li>
<li>Jython: 运行在Java平台上的解释器，把Python代码编译为Java字节码执行，没有GIL.</li>
<li>IronPython: IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码，没有GIL.</li>
</ol>
<h2 id="GIL的背景"><a href="#GIL的背景" class="headerlink" title="GIL的背景"></a>GIL的背景</h2><p>由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据一致性和状态同步的困难。</p>
<p>Python当然也逃不开，为了利用多核，Python开始支持多线程。而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。</p>
<h2 id="GIL为什么会存在？"><a href="#GIL为什么会存在？" class="headerlink" title="GIL为什么会存在？"></a>GIL为什么会存在？</h2><p>GIL的问题其实是由于近十几年来应用程序和操作系统逐步从多任务单核心演进到多任务多核心导致的 , 在一个古老的单核CPU上调度多个线程任务，大家相互共享一个全局锁，谁在CPU执行，谁就占有这把锁，直到这个线程因为IO操作或者Timer Tick到期让出CPU，没有在执行的线程就安静的等待着这把锁（除了等待之外，他们应该也无事可做）。下面这个图演示了一个单核CPU的线程调度方式：</p>
<img data-src="/2020/06/11/python-GIL/python-gil-single.jpg" class>

<p>在一个现代多核心的处理器上，上面的模型就有很大优化空间了，原来只能等待的线程任务，现在可以在其它空闲的核心上调度并发执行。由于古老GIL机制，如果线程2需要在CPU 2 上执行，它需要先等待在CPU 1 上执行的线程1释放GIL（记住：GIL是全局的）。如果线程1是因为 i/o 阻塞让出的GIL，那么线程2必定拿到Gil。但如果线程1是因为timer ticks计数满100让出GIL，那么这个时候线程1和线程2公平竞争。但要命的是，在Python 2.x, 线程1不会动态的调整自身的优先级，所以很大概率下次被选中执行的还是线程1，在很多个这样的选举周期内，线程2只能安静的看着线程1拿着GIL在CPU 1上欢快的执行。</p>
<img data-src="/2020/06/11/python-GIL/python-gil-muti.jpg" class>

<p>在稍微极端一点的情况下，比如线程1使用了while True在CPU 1 上执行，那就真是“一核有难，八核围观”了，如下图所示：</p>
<img data-src="/2020/06/11/python-GIL/python-gil-octo.jpg" class>

<h2 id="GIL的影响"><a href="#GIL的影响" class="headerlink" title="GIL的影响"></a>GIL的影响</h2><p>从上文的介绍和官方的定义来看，GIL无疑就是一把全局排他锁。毫无疑问全局锁的存在会对多线程的效率有不小影响。甚至就几乎等于Python是个单线程的程序。</p>
<h3 id="GIL对多线程Python程序的影响"><a href="#GIL对多线程Python程序的影响" class="headerlink" title="GIL对多线程Python程序的影响"></a>GIL对多线程Python程序的影响</h3><p>程序的性能受到计算密集型(CPU)的程序限制和I/O密集型的程序限制影响，那什么是计算密集型和I/O密集型程序?</p>
<h4 id="计算密集型-CPU"><a href="#计算密集型-CPU" class="headerlink" title="计算密集型(CPU)"></a>计算密集型(CPU)</h4><p>高度使用CPU的程序，例如: 进行数学计算，矩阵运算，搜索，图像处理等.</p>
<h4 id="I-O密集型"><a href="#I-O密集型" class="headerlink" title="I/O密集型"></a>I/O密集型</h4><p>I/0(Input/Output)程序是进行数据传输，例如: 文件操作，数据库，网络数据等</p>
<h3 id="顺序执行单线程和并发执行多线程的效率对比"><a href="#顺序执行单线程和并发执行多线程的效率对比" class="headerlink" title="顺序执行单线程和并发执行多线程的效率对比"></a>顺序执行单线程和并发执行多线程的效率对比</h3><h4 id="顺序执行单线程-single-thread-py"><a href="#顺序执行单线程-single-thread-py" class="headerlink" title="- 顺序执行单线程(single_thread.py)"></a>- 顺序执行单线程(single_thread.py)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t1 = threading.Thread(target=test_counter)</span><br><span class="line">        t1.start()</span><br><span class="line">        t1.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time:&#123;&#125;"</span>.format(end_time-start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Total</span> <span class="selector-tag">time</span>: 11<span class="selector-class">.299654722213745</span></span><br></pre></td></tr></table></figure>



<h4 id="并发执行两个线程-multi-thread-py"><a href="#并发执行两个线程-multi-thread-py" class="headerlink" title="- 并发执行两个线程(multi_thread.py)"></a>- 并发执行两个线程(multi_thread.py)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread_array = &#123;&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=test_counter)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_array[tid] = t</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        thread_array[i].join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time:&#123;&#125;"</span>.format(end_time-start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Total</span> <span class="selector-tag">time</span><span class="selector-pseudo">:13.7098388671875</span></span><br></pre></td></tr></table></figure>

<p>GIL对I/O绑定多线程程序的性能影响不大，因为线程在等待I/O时共享锁.</p>
<p>GIL对计算型绑定多线程程序有影响，例如: 使用线程处理部分图像的程序，不仅会因锁定而成为单线程，而且还会看到执行时间的增加，这种增加是由锁的获取和释放开销的结果.</p>
<h2 id="如何处理Python中的GIL"><a href="#如何处理Python中的GIL" class="headerlink" title="如何处理Python中的GIL"></a>如何处理Python中的GIL</h2><ul>
<li>计算密集型程序<ul>
<li>使用多进程(什么是多进程呢，后续道来)</li>
<li>使用其它语言(将计算密集程序放到其它语言中执行)</li>
<li>替换解释器(可以自己尝试)</li>
<li>等大神解决GIL</li>
</ul>
</li>
<li>I/O密集型程序<ul>
<li>使用多线程</li>
<li>使用多进程</li>
<li>使用多进程 + 多线程</li>
</ul>
</li>
</ul>
<hr>
<p>参考链接：</p>
<p><a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf" target="_blank" rel="noopener">Understanding the Python GIL</a>  </p>
<p><a href="https://realpython.com/python-gil/" target="_blank" rel="noopener">What Is the Python Global Interpreter Lock (GIL)?</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/75780308" target="_blank" rel="noopener">深入理解Python中的GIL（全局解释器锁）</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>GIL</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>多线程</tag>
        <tag>GIL</tag>
        <tag>全局解释器锁</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 uWSGI + Nginx 部署 Django 项目</title>
    <url>/2020/05/20/uWSGI-Nginx-Django/</url>
    <content><![CDATA[<blockquote>
<p>摘要</p>
</blockquote>
<p>在开发<kbd>Django</kbd>框架时，我们通常使用<kbd>python manage.py runserver</kbd>来运行本地服务,但是这只适用开发环境中使用，此时启动的Django项目通过127.0.0.1:8000的本地端口进行转发，也只能在本地环境下进行访问。那么我们基于Django的SaaS是怎样发布在公网、局域网环境下，并且通过域名访问站点的呢？通常的方案是：我们就需要用到<kbd>uWSGI</kbd>配合<kbd>Nginx(Apache)</kbd>进行代理转发。以下是笔者在实践此方案的过程中整理的一些要点。</p>
<a id="more"></a>
<blockquote>
<p>正文</p>
</blockquote>
<h2 id="一、uWSGI简介"><a href="#一、uWSGI简介" class="headerlink" title="一、uWSGI简介"></a>一、uWSGI简介</h2><p>uWSGI是一个快速的、纯C语言开发的、自维护的、对开发者友好的WSGI服务器，旨在提供专业的Python web应用发布和开发。可使用C/C++/Objective-C来为uWSGI编写插件。我们在根目录下的requirements.py中可以找到uWSGI的依赖，Windows环境本地安装依赖的时候一般都会注释掉它，因为uWSGI是运行在Linux上的服务器。可能大家对WSGI、uwsgi、uWSGI这几个概念很头疼，简单地说，WSGI是一个规范协议，定义了Web服务器如何与Python应用程序进行交互；uwsgi和WSGI一样是通信协议，是uWSGI服务器的单独形式，用于自定义传输类型；而uWSGI是重头戏，他是一个web服务器,实现了WSGI协议、uwsgi协议。以下是WSGI，uwsgi，uWSGI的实现过程图解。</p>
<p><img data-src="uwsgi.png" alt="uWSGI"></p>
<h2 id="二、Nginx简介"><a href="#二、Nginx简介" class="headerlink" title="二、Nginx简介"></a>二、Nginx简介</h2><p>相比uWSGI，Nginx的知名度高了许多，它是一个开源的、支持高性能、高并发的代理服务软件，Nginx不但是一个优秀的web服务软件,还可以作为反想代理和负载均衡,以及缓存服务或使用。<br>实际上，一个uWSGI的web服务器，再加上Django这样的web框架，就已经可以实现网站的功能了。那为什么还需要Nginx呢？经过笔者查阅资料，总结有以下几点：</p>
<h3 id="2-1、安全问题："><a href="#2-1、安全问题：" class="headerlink" title="2.1、安全问题："></a>2.1、安全问题：</h3><p>程序不能直接被浏览器访问到，而是通过Nginx只开放某个接口，uWSGI本身是内网接口，这样运维人员在Nginx上加上安全性的限制，可以达到保护程序的作用；</p>
<h3 id="2-2、载均衡问题："><a href="#2-2、载均衡问题：" class="headerlink" title="2.2、载均衡问题："></a>2.2、载均衡问题：</h3><p>一个uWSGI很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了Nginx做代理，一个Nginx可以代理多台uWSGI完成负载均衡；</p>
<h3 id="2-3、静态文件问题："><a href="#2-3、静态文件问题：" class="headerlink" title="2.3、静态文件问题："></a>2.3、静态文件问题：</h3><p>用Django或是uWSGI这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如Nginx好，所以整个静态文件的处理都直接由nginx完成。</p>
<h2 id="三、uWSGI-Nginx-部署-Django-网站的实践"><a href="#三、uWSGI-Nginx-部署-Django-网站的实践" class="headerlink" title="三、uWSGI + Nginx 部署 Django 网站的实践"></a>三、uWSGI + Nginx 部署 Django 网站的实践</h2><p>接下来笔者将使用uWSGI+Nginx搭建Django网站，此方案的架构图如下：<br><img data-src="uwsgi+nginx+django.png" alt="uwsgi+nginx+django"></p>
<h3 id="3-1、安装配置uWSGI："><a href="#3-1、安装配置uWSGI：" class="headerlink" title="3.1、安装配置uWSGI："></a>3.1、安装配置uWSGI：</h3><h4 id="3-1-1安装uWSGI："><a href="#3-1-1安装uWSGI：" class="headerlink" title="3.1.1安装uWSGI："></a>3.1.1安装uWSGI：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>
<p>也可以指定版本安装；</p>
<h4 id="3-1-2-uWSGI配置："><a href="#3-1-2-uWSGI配置：" class="headerlink" title="3.1.2    uWSGI配置："></a>3.1.2    uWSGI配置：</h4><p>实际上，我们可以uwsgi命令配合参数来启动Django项目，但是我们可以把这些参数放在uwsgi9090.ini配置文件中，记录配置并且实现后台运行uWSGI：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket &#x3D; 127.0.0.1:9090</span><br><span class="line">master &#x3D; true         &#x2F;&#x2F;主进程</span><br><span class="line">vhost &#x3D; true          &#x2F;&#x2F;多站模式</span><br><span class="line">no-site &#x3D; true        &#x2F;&#x2F;多站模式时不设置入口模块和文件</span><br><span class="line">workers &#x3D; 2           &#x2F;&#x2F;子进程数</span><br><span class="line">reload-mercy &#x3D; 10     </span><br><span class="line">vacuum &#x3D; true         &#x2F;&#x2F;退出、重启时清理文件</span><br><span class="line">max-requests &#x3D; 1000   </span><br><span class="line">limit-as &#x3D; 512</span><br><span class="line">buffer-size &#x3D; 30000</span><br><span class="line">pidfile &#x3D; &#x2F;var&#x2F;run&#x2F;uwsgi9090.pid    &#x2F;&#x2F;pid文件，用于下面的脚本启动、停止该进程</span><br><span class="line">daemonize &#x3D; &#x2F;website&#x2F;uwsgi9090.log</span><br></pre></td></tr></table></figure>
<p>如上配置，接下来运行uwsgi uwsgi9090.ini即可uWSGI后台启动Django；</p>
<h4 id="3-1-3-Django项目根目录的settings-py中配置收集静态资源："><a href="#3-1-3-Django项目根目录的settings-py中配置收集静态资源：" class="headerlink" title="3.1.3    Django项目根目录的settings.py中配置收集静态资源："></a>3.1.3    Django项目根目录的settings.py中配置收集静态资源：</h4><p>配置完毕后运行python manage.py collectstatic</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态资源访问的起始url</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"><span class="comment"># 指定静态资源所在的目录</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 设置收集静态资源的路径(部署时使用)</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'collect_static/'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-安装配置Nginx："><a href="#3-2-安装配置Nginx：" class="headerlink" title="3.2    安装配置Nginx："></a>3.2    安装配置Nginx：</h3><h4 id="3-2-1、安装编译工具及库文件："><a href="#3-2-1、安装编译工具及库文件：" class="headerlink" title="3.2.1、安装编译工具及库文件："></a>3.2.1、安装编译工具及库文件：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2、编译安装Nginx，版本可自定义："><a href="#3-2-2、编译安装Nginx，版本可自定义：" class="headerlink" title="3.2.2、编译安装Nginx，版本可自定义："></a>3.2.2、编译安装Nginx，版本可自定义：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nginx.org/download/nginx-1.6.2.tar.gz</span><br><span class="line">tar zxvf nginx-1.6.2.tar.gz</span><br><span class="line">cd nginx-1.6.2</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3、找到Nginx的安装目录，打开conf-nginx-conf文件，修改server配置："><a href="#3-2-3、找到Nginx的安装目录，打开conf-nginx-conf文件，修改server配置：" class="headerlink" title="3.2.3、找到Nginx的安装目录，打开conf/nginx.conf文件，修改server配置："></a>3.2.3、找到Nginx的安装目录，打开conf/nginx.conf文件，修改server配置：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 default_server ssl;  &#x2F;&#x2F;https必须用ssl和443端口，http可以用80</span><br><span class="line">        server_name  xxx.xxx.com;     &#x2F;&#x2F;个人的已经注册过的域名</span><br><span class="line">        location &#x2F; &#123;  </span><br><span class="line">		include  uwsgi_params;</span><br><span class="line">            uwsgi_pass  127.0.0.1:9090;              &#x2F;&#x2F;必须和uwsgi中的设置一致</span><br><span class="line">            uwsgi_param UWSGI_SCRIPT demosite.wsgi;  &#x2F;&#x2F;入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录</span><br><span class="line">            uwsgi_param UWSGI_CHDIR &#x2F;demosite;       &#x2F;&#x2F;项目根目录</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            client_max_body_size 35m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-4、使用systemctl-restart-nginx重启Nginx服务器。"><a href="#3-2-4、使用systemctl-restart-nginx重启Nginx服务器。" class="headerlink" title="3.2.4、使用systemctl restart nginx重启Nginx服务器。"></a>3.2.4、使用systemctl restart nginx重启Nginx服务器。</h4><h2 id="四、项目启动及维护"><a href="#四、项目启动及维护" class="headerlink" title="四、项目启动及维护"></a>四、项目启动及维护</h2><p>使用<code>ss -lntpd | grep nginx（uwsgi）</code>和<code>ps -ef | grep nginx（uwsgi）</code>来确认nginx、uwsgi是否启动成功、转发代理的端口是否正确。<br>如果为启动失败，请确认配置是否正确，使用systemctl restart nginx重启nginx，使用killall -9 uwsgi杀死uwsgi服务，使用uwsgi uwsgi9090.ini重启uwsgi和Django项目；如果一切正常，我们可以在浏览器中输入nginx.conf中配置的server_name域名，来访问已启动的Django web项目，这样就实现了uWSGI+Nginx部署Django web项目了。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>技术文章</tag>
        <tag>Django</tag>
        <tag>uWSGI</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言HTTP编程</title>
    <url>/2020/05/15/go-http-basis/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Web工作方式"><a href="#Web工作方式" class="headerlink" title="Web工作方式"></a>Web工作方式</h2><p>我们平时浏览网页的时候，会打开浏览器，输入网址后按下回车键，然后会显示你想要浏览的内容。在这个看似简单的用户行为背后，到底隐藏了些什么呢？？</p>
<p>对于普通的上网过程，过程为：浏览器本身是一个客户端，当输入URL的时候，首先浏览器会去请求<br>DNS服务器。</p>
<p>通过DNS获取相应的域名对应的IP，然后通过IP地址找到IP对应的服务器后，要求建立TCP连接。</p>
<p>等浏览器发送完HTTPRequest(请求)包后，服务器接收到请求包开始处理请求包。服务器调用自身服<br>务，返回HTTPResponse(响应)包。</p>
<p>客户端收到来看服务器的响应后开始渲染这个Response包里的主体(body)，等收到全部的内容随后断开与该服务器之间的TCP连接。</p>
<p>一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(包括手机上的各种客户端))</p>
<p>Web服务器的工作原理可以简单的归纳为：</p>
<ul>
<li>客户端通过TCP/IP协议建立到服务器的TCP连接</li>
<li>客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档</li>
<li>服务器向客户端发送HTTP协议应答包</li>
<li>客户端与服务器断开连接，客户端解释HTML文档，在客户端屏幕上渲染图形结果</li>
</ul>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP协议的全称：超文本传输协议，HyperText Transfer Protocol。</p>
<p>HTTP协议是互联网上应用最为广泛的一种网络协议，详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传递万维网文档的数据传送协议。</p>
<p>HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候就成了常说的<br>HTTPS。</p>
<h2 id="地址-URL"><a href="#地址-URL" class="headerlink" title="地址(URL)"></a>地址(URL)</h2><p>URL全称为：Unique Resource Location，用来表示网络资源，可以理解为网络文件路径。</p>
<p>URL的格式如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://host[":"port][/abs_path]</span></span><br><span class="line"><span class="attribute">http://192.168.1.1/html/index</span></span><br></pre></td></tr></table></figure>

<p>URL的长度有限制，不同的服务器的限制值太太相同，但是不能无限长。</p>
<h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><p>HTTP请求报文由请求行，请求头部，请求包体等组成。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//监听</span></span><br><span class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Listen err = "</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> listener.Close()</span><br><span class="line">	<span class="comment">//阻塞等待用户的连接</span></span><br><span class="line">	conn, err1 := listener.Accept()</span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Accept err1 = "</span>, err1)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	<span class="comment">//接收客户端的数据</span></span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>*<span class="number">4</span>)</span><br><span class="line">	n, err2 := conn.Read(buf)</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Read err = "</span>, err2)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"#%v#"</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序，用浏览器请求URL： <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> ,程序后台打印结果：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">#GET / HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8000</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/65.0.3325.146 Safari/537.36</span><br><span class="line"><span class="attribute">Accept:</span></span><br><span class="line">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,en;q=0.8</span><br></pre></td></tr></table></figure>


<h2 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端编写的业务逻辑处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintln(w, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">"/go"</span>, myHandler)</span><br><span class="line">	<span class="comment">//在指定的地址进行监听，开启一个HTTP</span></span><br><span class="line">	http.ListenAndServe(<span class="string">"127.0.0.1:8000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序，用浏览器请求URL： <a href="http://127.0.0.1:8000/go" target="_blank" rel="noopener">http://127.0.0.1:8000/go</a> ,程序会响应”hello world”在浏览器页面<br>上。</p>
<h2 id="响应报文格式"><a href="#响应报文格式" class="headerlink" title="响应报文格式"></a>响应报文格式</h2><p>服务端代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端编写的业务逻辑处理程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintln(w, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">"/go"</span>, myHandler)</span><br><span class="line">	<span class="comment">//在指定的地址进行监听，开启一个HTTP</span></span><br><span class="line">	http.ListenAndServe(<span class="string">"127.0.0.1:8000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>客户端代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//主动连接服务器</span></span><br><span class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">":8000"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"dial err = "</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	requestBuf := <span class="string">"GET /go HTTP/1.1\r\nAccept: image/gif, image/jpeg,</span></span><br><span class="line"><span class="string">image/pjpeg, application/x-ms-application, application/xaml+xml, application/xms-xbap, */*\r\nAccept-Language: zh-Hans-CN,zh-Hans;q=0.8,enUS;q=0.5,en;q=0.3\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR3.0.30729; .NET CLR 3.5.30729)\r\nAccept-Encoding: gzip, deflate\r\nHost:127.0.0.1:8000\r\nConnection: Keep-Alive\r\n\r\n"</span></span><br><span class="line">	<span class="comment">//先发请求包，服务器才会回响应包</span></span><br><span class="line">	conn.Write([]<span class="keyword">byte</span>(requestBuf))</span><br><span class="line">	<span class="comment">//接收服务器回复的响应包</span></span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>*<span class="number">4</span>)</span><br><span class="line">	n, err1 := conn.Read(buf)</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"Read err = "</span>, err1)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印响应报文</span></span><br><span class="line">	fmt.Printf(<span class="string">"#%v#"</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先运行服务端程序，再运行客户端程序，客户端程序得到结果如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#HTTP/1.1 200 OK</span><br><span class="line"><span class="attribute">Date</span>: Thu, 09 Apr 2020 13:07:35 GMT</span><br><span class="line"><span class="attribute">Content-Length</span>: 12</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain; charset=utf-8</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>状态码由三位数据组成，第一位数据表示响应的类型，常用的状态码有五大类：</p>
<table>
<thead>
<tr>
<th align="left">状态码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1xx</td>
<td>表示服务器已接收到客户端的请求，客户端可继续发送请求</td>
</tr>
<tr>
<td align="left">2xx</td>
<td>表示服务器已成功接收到请求，并进行处理</td>
</tr>
<tr>
<td align="left">3xx</td>
<td>表示服务器要求客户端重定向</td>
</tr>
<tr>
<td align="left">4xx</td>
<td>表示客户端的请求有非法内容</td>
</tr>
<tr>
<td align="left">5xx</td>
<td>表示服务器未能正常处理客户端的请求而出现意外错误</td>
</tr>
</tbody></table>
<p>常见的状态码举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200 OK：客户端请求成功</span><br><span class="line">400 Bad Request：请求报文有语法错误</span><br><span class="line">401 Unauthorized：未授权</span><br><span class="line">403 Forbidden：服务器拒绝服务</span><br><span class="line">404 Not Found：请求资源不存在</span><br><span class="line">500 Internal Server Error：服务器内部错误</span><br><span class="line">502 bad Gateway: 网关错误</span><br><span class="line">503 Server Unavailable：服务器临时不能处理客户端请求</span><br></pre></td></tr></table></figure>

<h1 id="HTTP编程"><a href="#HTTP编程" class="headerlink" title="HTTP编程"></a>HTTP编程</h1><p>Go请求标准库内建提供了net/http包，涵盖了HTTP客户端和服务器的具体实现。<br>使用net/http包可以很方便的编写HTTP客户端或服务端程序。</p>
<h2 id="HTTP服务端"><a href="#HTTP服务端" class="headerlink" title="HTTP服务端"></a>HTTP服务端</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//w, 给客户端回复数据</span></span><br><span class="line"><span class="comment">//r, 读取客户端发送的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandConn</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"r.Method = "</span>, r.Method)</span><br><span class="line">	fmt.Println(<span class="string">"r.URL = "</span>, r.URL)</span><br><span class="line">	fmt.Println(<span class="string">"r.Header = "</span>, r.Header)</span><br><span class="line">	fmt.Println(<span class="string">"r.Body = "</span>, r.Body)</span><br><span class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"hello go"</span>)) <span class="comment">//给客户端回复数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//注册处理函数，用户连接，自动调用指定的处理函数</span></span><br><span class="line">	http.HandleFunc(<span class="string">"/go"</span>, HandConn)</span><br><span class="line">	<span class="comment">//监听绑定</span></span><br><span class="line">	http.ListenAndServe(<span class="string">":8000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序后，用浏览器打开URL： <a href="http://127.0.0.1:8000/go" target="_blank" rel="noopener">http://127.0.0.1:8000/go</a> ,页面显示”hello go”<br>服务端运行结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">r.Method = GET</span><br><span class="line">r.URL = /go</span><br><span class="line">r.Header = map[Connection:[keep-alive] Cache-Control:[max-age=0] UpgradeInsecure-Requests:[1] User-Agent:[Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class="line">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36]</span><br><span class="line"><span class="attribute">Accept:</span></span><br><span class="line">[text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8] Accept-Encoding:[gzip, deflate, br] Accept-Language:[zhCN,zh;q=0.9,en;q=0.8]]</span><br><span class="line">r.Body = &#123;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HTTP客户端"><a href="#HTTP客户端" class="headerlink" title="HTTP客户端"></a>HTTP客户端</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(<span class="string">"http://127.0.0.1:8000/go"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"http.Get err = "</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">	fmt.Println(<span class="string">"Status = "</span>, resp.Status)</span><br><span class="line">	fmt.Println(<span class="string">"StatusCode = "</span>, resp.StatusCode)</span><br><span class="line">	fmt.Println(<span class="string">"Header = "</span>, resp.Header)</span><br><span class="line">	<span class="comment">//fmt.Println("Body = ", resp.Body)</span></span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4</span>*<span class="number">1024</span>)</span><br><span class="line">	<span class="keyword">var</span> tmp <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		n, err := resp.Body.Read(buf)</span><br><span class="line">		<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"read err = "</span>, err)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		tmp += <span class="keyword">string</span>(buf[:n])</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"tmp = "</span>, tmp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行客户端程序，会自动请求”<a href="http://127.0.0.1:8000/go&quot;这个地址，此时客户端后台打印：" target="_blank" rel="noopener">http://127.0.0.1:8000/go&quot;这个地址，此时客户端后台打印：</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Status = 200 OK</span><br><span class="line">StatusCode = 200</span><br><span class="line">Header = map[Date:[Thu, 09 Apr 2020 13:25:54 GMT] Content-Length:[8] ContentType:[text/plain; charset=utf-8]]</span><br><span class="line">read err = EOF</span><br><span class="line">tmp = hello go</span><br></pre></td></tr></table></figure>

<p>此时服务端后台打印结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Method = GET</span><br><span class="line">r.URL = /<span class="keyword">go</span></span><br><span class="line">r.Header = <span class="keyword">map</span>[User-Agent:[Go-http-client/<span class="number">1.1</span>] Accept-Encoding:[gzip]]</span><br><span class="line">r.Body = &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>网络编程</tag>
        <tag>HTTP</tag>
        <tag>代码实践</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝鲸开发框架进阶</title>
    <url>/2020/04/29/bk-django-framework-advanced/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>之前的文章描述了蓝鲸开发框架的基础指南，以下将继续上文，讲述蓝鲸开发框架的进阶使用，包括登陆与用户对接、数据库配置、Django的配置修改，和中间件及公共方法。</p>
<a id="more"></a>

<h1 id="开发框架使用进阶"><a href="#开发框架使用进阶" class="headerlink" title="开发框架使用进阶"></a>开发框架使用进阶</h1><h2 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h2><h3 id="豁免登录"><a href="#豁免登录" class="headerlink" title="豁免登录"></a>豁免登录</h3><p>目前所有的 view 访问全部强制要求登录鉴权, 用户可以豁免一些 view 的登录限制，主要用于对外提供 API。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.account.decorators <span class="keyword">import</span> login_exempt</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myview</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>

<h2 id="User-Model-获取-amp-使用方式"><a href="#User-Model-获取-amp-使用方式" class="headerlink" title="User Model 获取 &amp; 使用方式"></a>User Model 获取 &amp; 使用方式</h2><h3 id="获取-User-Model"><a href="#获取-User-Model" class="headerlink" title="获取 User Model"></a>获取 User Model</h3><p>通过 <code>from blueapps.account import get_user_model</code> 可得到 User Model</p>
<h3 id="User-方法属性说明"><a href="#User-方法属性说明" class="headerlink" title="User 方法属性说明"></a>User 方法属性说明</h3><ul>
<li>username</li>
</ul>
<p>用户唯一标识，如 QQ 号</p>
<ul>
<li>nickname</li>
</ul>
<p>用于前端展示的用户名，如 QQ 昵称</p>
<ul>
<li>avatar_url</li>
</ul>
<p>用户头像 URL</p>
<ul>
<li>get_full_name</li>
</ul>
<p>用于前端展示的完整用户名，如 QQ 昵称</p>
<h3 id="User-扩展属性说明"><a href="#User-扩展属性说明" class="headerlink" title="User 扩展属性说明"></a>User 扩展属性说明</h3><ul>
<li>get_property(key)</li>
</ul>
<p>用户获取水平扩展属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.account <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">user = get_user_model().objects.get(username=xxx)</span><br><span class="line">user.get_property(key)</span><br></pre></td></tr></table></figure>

<ul>
<li>set_property(key,value)</li>
</ul>
<p>用户设置水平扩展属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.account <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">user = get_user_model().objects.get(username=xxx)</span><br><span class="line">user.set_property(key, value)</span><br></pre></td></tr></table></figure>

<h3 id="在模板中使用-User-作为外键"><a href="#在模板中使用-User-作为外键" class="headerlink" title="在模板中使用 User 作为外键"></a>在模板中使用 User 作为外键</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    person = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name=<span class="string">u"用户"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Django-APP-管理员设置"><a href="#Django-APP-管理员设置" class="headerlink" title="Django APP 管理员设置"></a>Django APP 管理员设置</h3><p>修改 config/default.py 的 INIT_SUPERUSER 配置，填写用户名列表，默认值是应用创建人，列表中的人员将拥有预发布环境和正式环境的管理员权限。需要注意的是，该配置需要在首次提测和上线前修改，之后的修改将不会生效。 如果不小心将唯一的管理员权限去掉了，有两种方式新增管理员：</p>
<ul>
<li>通过 migrations 实现</li>
</ul>
<p>在你的 APP 目录下，找到 migrations 文件夹，新建文件 {INDEX}_init_superuser.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    添加用户为管理员</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    User = apps.get_model(<span class="string">"account"</span>, <span class="string">"User"</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> settings.INIT_SUPERUSER:</span><br><span class="line">        User.objects.update_or_create(</span><br><span class="line">            username=name,</span><br><span class="line">            defaults=&#123;<span class="string">'is_staff'</span>: <span class="literal">True</span>, <span class="string">'is_active'</span>: <span class="literal">True</span>, <span class="string">'is_superuser'</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'&#123;APP&#125;'</span>, <span class="string">'&#123;APP_LAST_MIGRATION&#125;'</span>)</span><br><span class="line">    ]</span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(load_data)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>其中，{APP} 表示你的当前 APP，{APP_LAST_MIGRATION} 表示当前 mirgations 文件中最新一个文件名（如 “0003_auto_20180301_1732”），{INDEX} 表示最新一个文件名的前缀数字加 1（如 “0003_auto_20180301_1732” 的前缀数字是 “0003”，那么 {INDEX} 设置为 “0004”）。</p>
<ul>
<li>通过 views 实现</li>
</ul>
<p>在你的 APP 目录的 views 文件中，添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blueapps.account <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    添加用户为管理员</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    User = get_user_model()</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> settings.INIT_SUPERUSER:</span><br><span class="line">        User.objects.update_or_create(</span><br><span class="line">            username=name,</span><br><span class="line">            defaults=&#123;<span class="string">'is_staff'</span>: <span class="literal">True</span>, <span class="string">'is_active'</span>: <span class="literal">True</span>, <span class="string">'is_superuser'</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Success'</span>)</span><br></pre></td></tr></table></figure>

<p>然后配置一条 URL 路由规则到该 view，提测、上线后访问对应 URL 就可以初始化管理员了。</p>
<h2 id="配置修改指引"><a href="#配置修改指引" class="headerlink" title="配置修改指引"></a>配置修改指引</h2><h3 id="settings-主要配置"><a href="#settings-主要配置" class="headerlink" title="settings 主要配置"></a>settings 主要配置</h3><p><strong>注意</strong>：不要修改 settings.py ，配置项修改请在 config 目录下的文件中进行。</p>
<p>其中，如果修改 config/default.py 配置项对所有的运行环境生效（正式环境、预发布环境、本地环境）； 修改 config/prod.py 配置项只会对正式环境生效； 修改 config/stag.py 配置项只会对预发布环境生效； 修改 config/dev.py 配置项只会对本地开发环境生效； 在多人开发时，为了避免 config/dev.py 中的配置互相影响，每个开发者都可以在项目根目录下新增 local_settings.py 文件，来添加各开发者不同的本地开发配置，如 DATABASES，并在提交代码时忽略 local_settings.py 文件。</p>
<ul>
<li>自定义 Django APP</li>
</ul>
<p>请修改 config/default.py 的 INSTALLED_APPS</p>
<ul>
<li>自定义中间件</li>
</ul>
<p>请修改 config/default.py 的 MIDDLEWARE</p>
<ul>
<li>自定义数据库</li>
</ul>
<p>如无必要请不要覆盖默认 default 数据库，正式环境和预发布环境分别修改 config/prod.py 和 config/stag.py，使用 DATABASES.update() 方法。 本地环境请修改 config/dev.py 的 DATABASES。</p>
<ul>
<li>自定义日志级别</li>
</ul>
<p>日志级别默认是 INFO，如需修改：</p>
<ol>
<li><p>所有环境下的日志级别，请在 config/default.py 对应位置修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line"><span class="comment"># load logging settings</span></span><br><span class="line">LOGGING = get_logging_config_dict(locals())</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果只希望针对特定环境进行日志级别设置，则在对应环境配置文件（ config/prod.py（只影响生产环境）、config/stag.py（只影响预发布环境）、config/dev.py（只影响预本地开发环境））中取消对应代码注释并修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义本地环境日志级别</span></span><br><span class="line"><span class="keyword">from</span> blueapps.conf.log <span class="keyword">import</span> set_log_level <span class="comment"># noqa</span></span><br><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line">LOGGING = set_log_level(locals())</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: 这种修改方式依赖 blueapps 版本 &gt;= 3.3.1。</p>
</li>
</ol>
<p>其中，不同配置的含义如下：</p>
<ol>
<li>DEBUG：用于调试目的的底层系统信息</li>
<li>INFO：普通的系统信息</li>
<li>WARNING：表示出现一个较小的问题。</li>
<li>ERROR：表示出现一个较大的问题。</li>
<li>CRITICAL：表示出现一个致命的问题。</li>
</ol>
<ul>
<li>静态资源版本号更新</li>
</ul>
<p>修改 config/default.py 的 STATIC_VERSION。</p>
<ul>
<li>添加 celery 任务</li>
</ul>
<p>把 celery 任务模块加入 config/default.py 的 CELERY_IMPORTS。</p>
<ul>
<li>初始化管理员列表</li>
</ul>
<p>请修改 config/default.py 的 INIT_SUPERUSER，列表中的人员将拥有预发布环境和正式环境的管理员权限。请在首次提测和上线前修改，之后的修改将不会生效。</p>
<ul>
<li>自定义其他 Django 支持的配置</li>
</ul>
<p>请直接在 config/default.py 添加需要的配置覆盖默认值。</p>
<h3 id="使用-settings-配置"><a href="#使用-settings-配置" class="headerlink" title="使用 settings 配置"></a>使用 settings 配置</h3><p>在 Django 应用中，可以通过导入 django.conf.settings 对象来使用设置。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="comment"># Do something</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.settings <span class="keyword">import</span> DEBUG  <span class="comment"># This won't work.</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：你的代码不应该从 config.default.py 或其他设置文件中导入。django.conf.settings 抽象出默认设置和站点特定设置的概念；它表示一个单一的接口。它还可以将代码从你的设置所在的位置解耦出来。</p>
<h2 id="自定义-middleware-中间件"><a href="#自定义-middleware-中间件" class="headerlink" title="自定义 middleware(中间件)"></a>自定义 middleware(中间件)</h2><ul>
<li>default.py 配置如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE += (</span><br><span class="line"><span class="comment"># 你的中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：django1.10 开始，中间件配置项使用 <strong><code>MIDDLEWARE</code></strong> ，1.10 以下版本使用的 MIDDLEWARE_CLASSES 配置项会在 django2.0 后不再被支持。</p>
<ul>
<li>midlleware 开发</li>
</ul>
<p>使用 MIDDLEWARE 配置项开发你的 middleware。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="comment"># 中间件支持的方法依然不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(request)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(request, response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(request, response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(request, exception)</span>:</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 你的 middleware 类必须继承 django 的 MiddlewareMixin，同时你的 middleware 尽量不要去重写 <code>__call__</code> 和 <code>__init__</code> 方法，参考<a href="https://docs.djangoproject.com/en//topics/http/middleware/" target="_blank" rel="noopener">官方文档</a>。</p>
<h2 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h2><h3 id="blueapps-utils-logger"><a href="#blueapps-utils-logger" class="headerlink" title="blueapps.utils.logger"></a>blueapps.utils.logger</h3><p>提供常用的 logger,logger_celery</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger         <span class="comment"># 普通日志</span></span><br><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger_celery  <span class="comment"># celery日志</span></span><br><span class="line">logger.error(<span class="string">'log your info here.'</span>)</span><br></pre></td></tr></table></figure>


<hr>
<p>参考链接：<br><a href="https://bk.tencent.com/docs/document/5.1/19/4318" target="_blank" rel="noopener">腾讯蓝鲸开发框架 2.0 使用进阶</a></p>
]]></content>
      <categories>
        <category>蓝鲸</category>
        <category>开发框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>蓝鲸</tag>
      </tags>
  </entry>
  <entry>
    <title>初识蓝鲸开发框架</title>
    <url>/2020/04/24/bk-django-framework/</url>
    <content><![CDATA[<h2 id="蓝鲸-Python-开发框架简介"><a href="#蓝鲸-Python-开发框架简介" class="headerlink" title="蓝鲸 Python 开发框架简介"></a>蓝鲸 Python 开发框架简介</h2><p>Python 开发框架是集成了蓝鲸系统功能，方便开发者可以快速在蓝鲸 PaaS 平台上开发 SaaS 的 Python 框架。</p>
<p>该开发框架基于 Django 框架架构，并在此基础上进行扩展，增加蓝鲸系统的特有功能，</p>
<p>例如：身份验证、ESB 调用及模板渲染等功能，以便开发者可以更专注于 SaaS 的逻辑开发。</p>
<a id="more"></a>

<h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- blueapps                    <span class="comment"># Python开发框架模块</span></span><br><span class="line">- blueking                    <span class="comment"># ESB调用模块</span></span><br><span class="line">- config                      <span class="comment"># 应用配置目录</span></span><br><span class="line">  - __init__.py               <span class="comment"># 应用 RUN_VER(社区版为open)、APP_CODE 和 SECRET_KEY 等配置</span></span><br><span class="line">  - dev.py                    <span class="comment"># 本地开发配置(开发团队共享)</span></span><br><span class="line">  - default.py                <span class="comment"># 全局配置</span></span><br><span class="line">  - prod.py                   <span class="comment"># 生产环境配置</span></span><br><span class="line">  - stag.py                   <span class="comment"># 预发布环境配置</span></span><br><span class="line">- home_application            <span class="comment"># Django 模板应用样例</span></span><br><span class="line">  - __init__.py</span><br><span class="line">  - admin.py</span><br><span class="line">  - urls.py</span><br><span class="line">  - models.py</span><br><span class="line">  - tests.py</span><br><span class="line">  - views.py</span><br><span class="line">  - templates                 <span class="comment"># Django 模板</span></span><br><span class="line">    - home_application</span><br><span class="line">      - contact.html          <span class="comment"># 联系我们页面</span></span><br><span class="line">      - dev_guide.html        <span class="comment"># 开发指引</span></span><br><span class="line">      - index_home.html       <span class="comment"># 首页</span></span><br><span class="line">- mako_templates              <span class="comment"># mako 公共模板文件</span></span><br><span class="line">  - base.mako                 <span class="comment"># mako 模板基础文件，其他的页面可以从这里继承</span></span><br><span class="line">- mako_application            <span class="comment"># mako 模板应用样例</span></span><br><span class="line">  - __init__.py</span><br><span class="line">  - admin.py</span><br><span class="line">  - urls.py</span><br><span class="line">  - models.py</span><br><span class="line">  - tests.py</span><br><span class="line">  - views.py</span><br><span class="line">  - mako_templates            <span class="comment"># 模板</span></span><br><span class="line">    - mako_application</span><br><span class="line">      - contact.html          <span class="comment"># 联系我们页面</span></span><br><span class="line">      - dev_guide.html        <span class="comment"># 开发指引</span></span><br><span class="line">      - index_home.html       <span class="comment"># 首页</span></span><br><span class="line">- static                      <span class="comment"># 公共静态文件</span></span><br><span class="line">  - js                        <span class="comment"># 公共 js</span></span><br><span class="line">    - csrftoken.js            <span class="comment"># CSRFTOKEN</span></span><br><span class="line">    - settings.js             <span class="comment"># 异常处理</span></span><br><span class="line">- templates                   <span class="comment"># 公共模板文件</span></span><br><span class="line">  - admin                     <span class="comment"># admin 模板文件</span></span><br><span class="line">    - base_site.html</span><br><span class="line">    - login.html</span><br><span class="line">  - base.html                 <span class="comment"># Django 模板基础文件，其他的页面可以从这里继承</span></span><br><span class="line">- manage.py                   <span class="comment"># Django 工程 manage</span></span><br><span class="line">- requirements.txt            <span class="comment"># 依赖的 python 包列表</span></span><br><span class="line">- settings.py                 <span class="comment"># Django 工程 settings</span></span><br><span class="line">- urls.py                     <span class="comment"># Django 工程主路由 URL 配置</span></span><br><span class="line">- wsgi.py                     <span class="comment"># WSGI配置</span></span><br><span class="line">- runtime.txt                 <span class="comment"># Python 版本配置文件，默认指向 Python</span></span><br></pre></td></tr></table></figure>

<h3 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h3><ul>
<li>App 基本信息</li>
</ul>
<p>在 config/<em>*init</em>*.py 可以查看 App 基本信息，请修改：APP_CODE、SECRET_KEY (用于 App 认证)和 BK_URL(蓝鲸 SaaS 平台的 URL)。RUN_VER 是当前 App 运行的 PaaS 版本，请不要修改。</p>
<ul>
<li>App 运行环境</li>
</ul>
<p>在 config/dev.py、config/stag.py、config/prod.py 中都有一个 RUN_MODE 的变量，用来标记 App 运营环境(DEVELOP：本地环境，STAGING：预发布环境，PRODUCT：正式环境)，请不要修改。</p>
<ul>
<li>日志级别和路径</li>
</ul>
<p>开发框架默认配置的日志级别是 INFO，你可以在 config/default.py 修改 LOG_LEVEL 变量，会对所有运行环境生效，你也可以单独修改 config/dev.py、config/stag.py、config/prod.py 文件，详情请参考“<a href="javascript:void(0)">日志使用</a>”。</p>
<p>你不需要关心线上运行环境的日志路径，这些开发框架已经自动帮你配置了；</p>
<p>本地的日志放在和项目根目录同一级的 logs 目录下，以 APP_CODE 命名的文件夹中，其中 {APP_CODE}-django.log 是应用日志，{APP_CODE}-celery.log 是 celery 日志，{APP_CODE}-component.log 是组件日志，{APP_CODE}-mysql.log 是数据库日志。</p>
<ul>
<li>数据库配置</li>
</ul>
<p>本地数据库配置请在 config/dev.py 修改 DATABASES 变量；多人合作开发建议在根目录下新建 local_settings.py 文件，并配置 DATABASES 变量，并且在版本控制中忽略 local_settings.py，这样的好处是防止多人合作开发时本地配置不一致导致代码冲突。</p>
<h2 id="开发环境搭建-Python"><a href="#开发环境搭建-Python" class="headerlink" title="开发环境搭建(Python)"></a>开发环境搭建(Python)</h2><h3 id="安装-Python-3-6"><a href="#安装-Python-3-6" class="headerlink" title="安装 Python(3.6)"></a>安装 Python(3.6)</h3><p>如果系统中已经安装有 Python2 版本，可以参考 Python 版本切换了解<a href="javascript:void(0)">Python3 与 Python2 并存的处理方案</a></p>
<h3 id="安装-MySQL-5-5-以上"><a href="#安装-MySQL-5-5-以上" class="headerlink" title="安装 MySQL(5.5 以上)"></a>安装 MySQL(5.5 以上)</h3><h3 id="安装-setuptools、pip-和项目依赖"><a href="#安装-setuptools、pip-和项目依赖" class="headerlink" title="安装 setuptools、pip 和项目依赖"></a>安装 setuptools、pip 和项目依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于依赖中存在 mysqlclient，该模块存在对 C 环境的依赖，开发者可以参考<a href="https://github.com/PyMySQL/mysqlclient-python#install" target="_blank" rel="noopener">项目主页</a>安装说明</p>
<p>此处不使用 PyMySQL 原因是该模块与 Django2.2 存在兼容<a href="https://github.com/PyMySQL/PyMySQL/issues/790" target="_blank" rel="noopener">问题</a></p>
</blockquote>
<h3 id="安装本地开发工具"><a href="#安装本地开发工具" class="headerlink" title="安装本地开发工具"></a>安装本地开发工具</h3><p>推荐使用 <a href="https://www.jetbrains.com/pycharm/download" target="_blank" rel="noopener">pycharm</a> 进行代码开发，使用 <a href="https://tortoisesvn.net/index.zh.html" target="_blank" rel="noopener">TortoiseSVN</a> 管理 SVN，使用 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a> 管理 GIT。</p>
<h3 id="安装-celery-需要使用后台任务的项目"><a href="#安装-celery-需要使用后台任务的项目" class="headerlink" title="安装 celery(需要使用后台任务的项目)"></a>安装 celery(需要使用后台任务的项目)</h3><p>安装项目依赖时会自动安装 celery==3.1.25 和 django-celery==3.2.1。目前 celery 支持 redis、rabbitmq 作为任务的消息队列，推荐使用 redis。</p>
<ul>
<li>mac 系统 redis 使用指南：</li>
</ul>
<p>安装指令 <code>brew install redis</code>；</p>
<p>启动指令 <code>redis-server</code>；</p>
<p>测试 redis 服务是否正常启动，<code>redis-cli</code> 尝试连接本地的 redis 服务。</p>
<ul>
<li>windows 系统 redis 使用指南</li>
</ul>
<p>下载安装地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></p>
<p>点击安装目录下的 redis-server.exe 启动 redis 服务。</p>
<ul>
<li>配置项(在 config/dev.py 文件中修改消息队列配置)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Celery 消息队列设置 RabbitMQ</span></span><br><span class="line"><span class="comment"># BROKER_URL = 'amqp://guest:guest@localhost:5672//'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery 消息队列设置 Redis</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://localhost:6379/0'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于 redis-3.0 及以后模块存在兼容问题，所以在安装 redis 模块是，请增加上版本控制要求<code>redis&gt;=2.10.6,&lt;3</code></p>
</blockquote>
<h3 id="配置-hosts"><a href="#配置-hosts" class="headerlink" title="配置 hosts"></a>配置 hosts</h3><p>本地需要修改 hosts 文件，添加如下内容：</p>
<blockquote>
<p><strong>注意</strong>： domain_name 应该修改为 PaaS 平台的域名</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 appdev.`&#123;domain_name&#125;`</span><br></pre></td></tr></table></figure>

<h3 id="配置本地数据库"><a href="#配置本地数据库" class="headerlink" title="配置本地数据库"></a>配置本地数据库</h3><p>首先在 MySQL 命令行下创建数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE  `&#123;APP_CODE&#125;` default charset utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>然后配置本地数据库账号密码，需要找到 config/dev.py 中的 DATABASES 配置项，修改 USER 和 PASSWORD。</p>
<h3 id="初始化本地数据库"><a href="#初始化本地数据库" class="headerlink" title="初始化本地数据库"></a>初始化本地数据库</h3><p>在项目根目录下执行如下命令初始化本地数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>如果遇到错误，请先注释掉 config/default.py 的 INSTALLED_APPS 中的 APP 列表，执行命令后再去掉注释。</p>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>在项目根目录下执行如下命令启动项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>接着在浏览器访问 appdev.<code>{domain_name}</code> 就可以访问到项目首页了。</p>
<p><img data-src="https://bkdocs-1252002024.file.myqcloud.com/ZH/5.1/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/SaaS%E5%BC%80%E5%8F%91/assets/usage-index.png" alt="image-20190505204958140"></p>
<h2 id="新建-application"><a href="#新建-application" class="headerlink" title="新建 application"></a>新建 application</h2><p>在根目录下执行 django-admin startapp yourappname</p>
<p>进入 yourappname 目录，新增 urls.py</p>
<p>编写逻辑代码和路由配置代码</p>
<p>把 yourappname 加入 config/default.py 的 INSTALLED_APPS 中</p>
<h2 id="定义-model"><a href="#定义-model" class="headerlink" title="定义 model"></a>定义 model</h2><h3 id="在新建的-application-中-models-py-定义-model"><a href="#在新建的-application-中-models-py-定义-model" class="headerlink" title="在新建的 application 中 models.py 定义 model"></a>在新建的 application 中 models.py 定义 model</h3><p>官方文档：<a href="https://docs.djangoproject.com/en/2.2/topics/db/models/" target="_blank" rel="noopener">Django Models</a></p>
<h3 id="生成数据库变更文件"><a href="#生成数据库变更文件" class="headerlink" title="生成数据库变更文件"></a>生成数据库变更文件</h3><p>在项目根目录下执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations yourappname</span><br></pre></td></tr></table></figure>

<p>执行成功后就会生成数据库变更文件，文件位于新建 APP 的 migrations 目录中。</p>
<h3 id="生效数据库变更"><a href="#生效数据库变更" class="headerlink" title="生效数据库变更"></a>生效数据库变更</h3><p>在项目根目录下执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate yourappname</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：在把 yourappname 加入 config/default.py 的 INSTALLED_APPS 中之前，请先执行 python manage.py migrate 初始化数据库。</p>
</blockquote>
<h2 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h2><p>开发框架支持 Django、 Mako 两种模板渲染引擎，在 Django 工程下每个 App 维护自身的模板文件，以下以 APP_NAME 代表 Django APP 名称。</p>
<h3 id="Django-模板文件使用方式"><a href="#Django-模板文件使用方式" class="headerlink" title="Django 模板文件使用方式"></a>Django 模板文件使用方式</h3><p>请将你的 Django 模板文件 xxx.html 放在 <code>PROJECT_ROOT/APP_NAME/templates/</code> 目录底下，建议在 templates 底下在加上一层目录，取名为 APP_NAME，即最终模板文件存放路径为 <code>PROJECT_ROOT/APP_NAME/templates/APP_NAME</code>，这是为了避免在寻找模板文件的时候，出现覆盖的情况。</p>
<p>使用 Django 原生支持的 render 方法进行模板渲染。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'APP_NAME/index.html'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>render 函数接受三个参数：</p>
<ul>
<li>第一个参数 request 对象。</li>
<li>第二个参数 模板路径，从 APP templates 目录开始写起，此处对应的完整路径为 <code>PROJECT_ROOT/APP_NAME/templates/APP_NAME/index.html</code>，注意不要在前面加 ‘/‘，否则会被识别为绝对路径，找不到对应的模板。</li>
<li>第三个参数 传入的模板上下文，用于替换模板中的变量。</li>
</ul>
<blockquote>
<p>为什么 templates 目录底下还需要再加一层以 APP_NAME 命名的目录？ 假设 settings INSTALLED_APPS = (‘app1’, ‘app2’)，工程目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROJCET_ROOT</span><br><span class="line">|__ app1</span><br><span class="line">|__ __ templates</span><br><span class="line">|__ __ __ index.html</span><br><span class="line">...</span><br><span class="line">|__ app2</span><br><span class="line">|__ __ templates</span><br><span class="line">|__ __ __ index.html</span><br></pre></td></tr></table></figure>

<p>当我们在 app2.views 里使用 <code>render(request, &#39;index.html&#39;, {})</code> 语句进行渲染时，Django 框架默认以 INSTALLED_APPS 安装次序进行模板文件查找，这时候会匹配到 <code>app1/templates/index.html</code> 文件进行渲染，导致得到非预期的结果。所以推荐 <code>PROJECT_ROOT/APP_NAME/templates/APP_NAME</code> 这样的目录设计</p>
</blockquote>
<h3 id="Mako-模板文件使用方式"><a href="#Mako-模板文件使用方式" class="headerlink" title="Mako 模板文件使用方式"></a>Mako 模板文件使用方式</h3><p>Mako 模板文件使用方式大致与 Django 模板文件相同，唯一的区别就是是 Mako 模板文件放在 <code>PROJECT_ROOT/APP_NAME/mako_templates/</code> 目录底下，同样建议在 mako 底下在加上一层目录，取名为 APP_NAME，最终模板文件存放路径为 <code>PROJECT_ROOT/APP_NAME/mako_templates/APP_NAME</code>。</p>
<blockquote>
<p><strong>注意</strong>：出于安全原因，强烈建议用户使用 Django 模板替代 Mako 进行渲染，防止 XSS 攻击。</p>
</blockquote>
<h3 id="Template-Context-平台框架提供的模板变量"><a href="#Template-Context-平台框架提供的模板变量" class="headerlink" title="Template-Context 平台框架提供的模板变量"></a>Template-Context 平台框架提供的模板变量</h3><p>这里列举的模板变量，不需要用户在 render 模板时传入，可直接在模板文件中访问到，直接使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;</span><br><span class="line">    <span class="string">'STATIC_URL'</span>: settings.STATIC_URL,                    <span class="comment"># 本地静态文件访问</span></span><br><span class="line">    <span class="string">'APP_PATH'</span>: request.get_full_path(),                  <span class="comment"># 当前页面，主要为了 login_required 做跳转用</span></span><br><span class="line">    <span class="string">'RUN_MODE'</span>: settings.RUN_MODE,                        <span class="comment"># 运行模式</span></span><br><span class="line">    <span class="string">'APP_CODE'</span>: settings.APP_CODE,                        <span class="comment"># 在蓝鲸系统中注册的 "应用编码"</span></span><br><span class="line">    <span class="string">'SITE_URL'</span>: settings.SITE_URL,                        <span class="comment"># URL前缀</span></span><br><span class="line">    <span class="string">'REMOTE_STATIC_URL'</span>: settings.REMOTE_STATIC_URL,      <span class="comment"># 远程静态资源 url</span></span><br><span class="line">    <span class="string">'STATIC_VERSION'</span>: settings.STATIC_VERSION,            <span class="comment"># 静态资源版本号,用于指示浏览器更新缓存</span></span><br><span class="line">    <span class="string">'BK_URL'</span>: settings.BK_URL,                            <span class="comment"># 蓝鲸平台 URL</span></span><br><span class="line">    <span class="string">'USERNAME'</span>: username,                                 <span class="comment"># 用户名</span></span><br><span class="line">    <span class="string">'NICKNAME'</span>: nickname,                                 <span class="comment"># 用户昵称</span></span><br><span class="line">    <span class="string">'AVATAR_URL'</span>: avatar_url,                             <span class="comment"># 用户头像</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态资源使用规范"><a href="#静态资源使用规范" class="headerlink" title="静态资源使用规范"></a>静态资源使用规范</h2><ul>
<li>静态文件按模块划分，分别放在 Django 工程中每个对应 APP 的 static 目录下</li>
</ul>
<p>请将你的 Django 静态文件 xxx.js 和 xxx.css 放在 PROJECT_ROOT/APP_NAME/static/ 目录底下，建议在 static 底下在加上一层目录，取名为 APP_NAME，即最终模板文件存放路径为 PROJECT_ROOT/APP_NAME/static/APP_NAME[/js 或者/css]，这是为了避免在寻找静态文件的时候，出现覆盖的情况。</p>
<ul>
<li>修改静态文件后要手动运行 python manage.py collectstatic 命令来收集静态文件到根目录的 static 文件夹中。</li>
<li>settings 需要包含 STATIC_ROOT 配置。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'staticfiles'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>框架已配置全局有效的静态目录，可以将所有公共使用的静态资源放置于此。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>其中 BASE_DIR 是工程根目录路径。</p>
<h2 id="celery-使用"><a href="#celery-使用" class="headerlink" title="celery 使用"></a>celery 使用</h2><p>celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。 它是一个专注于实时处理的任务队列，同时也支持任务调度。</p>
<h3 id="打开-Celery-配置"><a href="#打开-Celery-配置" class="headerlink" title="打开 Celery 配置"></a>打开 Celery 配置</h3><p>在 config/default.py 中修改配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IS_USE_CELERY = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="添加-Celery-任务"><a href="#添加-Celery-任务" class="headerlink" title="添加 Celery 任务"></a>添加 Celery 任务</h3><p>在 app 底下创建 tasks.py 文件，添加 @task 任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></figure>

<p>如果 @task 任务函数不在 app/tasks.py 文件中，需要在 config/default.py 中添加配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_IMPORTS = (</span><br><span class="line">    <span class="string">'testapp.tasks'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="启动异步任务服务-celery-worker"><a href="#启动异步任务服务-celery-worker" class="headerlink" title="启动异步任务服务 celery worker"></a>启动异步任务服务 celery worker</h3><p>在根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py celery worker -l info</span><br></pre></td></tr></table></figure>

<h3 id="启动周期性任务服务-celery-beat"><a href="#启动周期性任务服务-celery-beat" class="headerlink" title="启动周期性任务服务 celery beat"></a>启动周期性任务服务 celery beat</h3><p>在根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py celery beat -l info</span><br></pre></td></tr></table></figure>

<h3 id="添加周期任务"><a href="#添加周期任务" class="headerlink" title="添加周期任务"></a>添加周期任务</h3><p>进入 admin，在 DJCELERY-&gt;Periodic_tasks 表中添加一条记录。</p>
<h3 id="如何在平台部署时，自动启动-celery-进程"><a href="#如何在平台部署时，自动启动-celery-进程" class="headerlink" title="如何在平台部署时，自动启动 celery 进程"></a>如何在平台部署时，自动启动 celery 进程</h3><p>修改 IS_USE_CELERY = True，并在提测发布 SaaS 的时候，勾选使用 Celery 任务</p>
<h3 id="调整-celery-worker-并发数"><a href="#调整-celery-worker-并发数" class="headerlink" title="调整 celery worker 并发数"></a>调整 celery worker 并发数</h3><ul>
<li>CELERYD_CONCURRENCY 参数官方说明：<a href="http://docs.celeryproject.org/en/v2.2.4/configuration.html#celeryd-prefetch-multiplier" target="_blank" rel="noopener">官方文档</a></li>
<li>目前开发框架设置的 celery 并发数是 2，如需调整，有 2 种方法：</li>
</ul>
<p>1)在蓝鲸平台的 APP 环境变量新增 KEY 为 CELERYD_CONCURRENCY 的变量，并设置对应的值(调大前建议咨询平台维护同事)。</p>
<p>2)直接修改 APP 中的配置，即修改 config/default.py 文件中如下配置的默认值 2 为你想要设置的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERYD_CONCURRENCY = os.getenv(<span class="string">'BK_CELERYD_CONCURRENCY'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="调整-celery-与-RabbitMQ-心跳包发送时间"><a href="#调整-celery-与-RabbitMQ-心跳包发送时间" class="headerlink" title="调整 celery 与 RabbitMQ 心跳包发送时间"></a>调整 celery 与 RabbitMQ 心跳包发送时间</h3><ul>
<li>BROKER_HEARTBEAT 参数官方说明：<a href="https://docs.celeryproject.org/en/3.1/configuration.html?#std:setting-BROKER_HEARTBEAT" target="_blank" rel="noopener">官方文档</a></li>
<li>目前开发框架设置的 BROKER_HEARTBEAT 发送时间是 60，即每 60 秒发送一个心跳包，如需调整，有以下方法：</li>
</ul>
<p>直接修改 APP 中的配置，即在 config/default.py 文件中添加相应配置，框架默认的配置会被覆盖。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CELERY与RabbitMQ增加60秒心跳设置项</span></span><br><span class="line">BROKER_HEARTBEAT = <span class="number">60</span></span><br></pre></td></tr></table></figure>

<h2 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h2><ul>
<li>日志相关配置方式复用 Django 的配置方式：<a href="https://docs.djangoproject.com/en/2.2/topics/logging/#using-logging" target="_blank" rel="noopener">官方文档</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'app'</span>)       <span class="comment"># 普通日志</span></span><br><span class="line">logger_celery = logging.getLogger(<span class="string">'celery'</span>)   <span class="comment"># celery日志</span></span><br><span class="line">logger.error(<span class="string">'log your info here.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger         <span class="comment"># 普通日志</span></span><br><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger_celery  <span class="comment"># celery日志</span></span><br><span class="line">logger.error(<span class="string">'log your info here.'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>日志输出路径：</li>
</ul>
<p>本地输出路径在和项目根目录平级的 logs 目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- PROJCET_ROOT</span><br><span class="line">- logs</span><br><span class="line">    - APP_CODE</span><br><span class="line">        - APP_CODE-celery.log</span><br><span class="line">        - APP_CODE-component.log</span><br><span class="line">        - APP_CODE-django.log</span><br><span class="line">        - APP_CODE-mysql.log</span><br></pre></td></tr></table></figure>

<ul>
<li>日志级别配置：</li>
</ul>
<p>日志级别默认是 INFO，如需修改：</p>
<ol>
<li><p>所有环境下的日志级别，请在 config/default.py 对应位置修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line"><span class="comment"># load logging settings</span></span><br><span class="line">LOGGING = get_logging_config_dict(locals())</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果只希望针对特定环境进行日志级别设置，则在对应环境配置文件（ config/prod.py（只影响生产环境）、config/stag.py（只影响预发布环境）、config/dev.py（只影响预本地开发环境））中取消对应代码注释并修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义本地环境日志级别</span></span><br><span class="line"><span class="keyword">from</span> blueapps.conf.log <span class="keyword">import</span> set_log_level <span class="comment"># noqa</span></span><br><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line">LOGGING = set_log_level(locals())</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: 这种修改方式依赖 blueapps 版本 &gt;= 3.3.1。</p>
</li>
</ol>
<p>其中，不同配置的含义如下：</p>
<ol>
<li>DEBUG：用于调试目的的底层系统信息</li>
<li>INFO：普通的系统信息</li>
<li>WARNING：表示出现一个较小的问题。</li>
<li>ERROR：表示出现一个较大的问题。</li>
<li>CRITICAL：表示出现一个致命的问题。</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>为了减少代码中判断函数调用的判断逻辑，蓝鲸开发框架提出，开发者应该在异常处直接抛出异常，通过 Django 中间件特性来处理该异常。</p>
<h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.core.exceptions <span class="keyword">import</span> ParamValidationError</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">your_view_func</span><span class="params">(request)</span>:</span></span><br><span class="line">  form = your_form(request.POST)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> form.is_valid():</span><br><span class="line">    <span class="keyword">raise</span> ParamValidationError(<span class="string">u'参数验证失败,请确认后重试'</span>)</span><br><span class="line">  <span class="comment"># do something you want</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：此处只是一个简单的示例。我们强烈的建议开发者应该在任何有错误的地方直接抛出异常，而非返回错误，由上层逻辑处理。</p>
</blockquote>
<h3 id="异常类型介绍"><a href="#异常类型介绍" class="headerlink" title="异常类型介绍"></a>异常类型介绍</h3><p>蓝鲸开发框架异常类主要分为两类：客户端异常及服务端异常，分别对应由于客户端请求引起的错误和后台服务引起的错误。开发者可以根据引起错误的场景来选择需要抛出的异常。</p>
<ul>
<li>异常类所在命名空间<ul>
<li>blueapps.core.exceptionsplainplainplainplainplainplainplainplainplainplainplainplainplainplainplainplainplainplain</li>
</ul>
</li>
<li>服务端异常</li>
</ul>
<table>
<thead>
<tr>
<th>错误类</th>
<th>说明</th>
<th>http 状态码</th>
<th>返回错误码</th>
<th>场景举例</th>
</tr>
</thead>
<tbody><tr>
<td>DatabaseError</td>
<td>数据库异常</td>
<td>501</td>
<td>50110</td>
<td>更新数据库记录失败</td>
</tr>
<tr>
<td>ApiNetworkError</td>
<td>网络异常导致远程服务失效</td>
<td>503</td>
<td>50301</td>
<td>请求第三方接口由于网络连接问题导致失败</td>
</tr>
<tr>
<td>ApiResultError</td>
<td>远程服务请求结果异常</td>
<td>503</td>
<td>50302</td>
<td>请求第三方结果返回 result 结果是 false</td>
</tr>
<tr>
<td>ApiNotAcceptable</td>
<td>远程服务返回结果格式异常</td>
<td>503</td>
<td>50303</td>
<td>第三方接口返回 xml 格式结果，但预期返回 json 格式</td>
</tr>
</tbody></table>
<ul>
<li>客户端异常</li>
</ul>
<table>
<thead>
<tr>
<th>错误类</th>
<th>说明</th>
<th>http 状态码</th>
<th>返回错误码</th>
<th>场景举例</th>
</tr>
</thead>
<tbody><tr>
<td>ParamValidationError</td>
<td>参数验证失败</td>
<td>400</td>
<td>40000</td>
<td>期待为整形的参数，用户提供了一个字符参数</td>
</tr>
<tr>
<td>ParamRequired</td>
<td>请求参数缺失</td>
<td>400</td>
<td>40001</td>
<td>期待的参数找不到</td>
</tr>
<tr>
<td>RioVerifyError</td>
<td>登陆请求经智能网关检测失败</td>
<td>401</td>
<td>40101</td>
<td>用户登录验证</td>
</tr>
<tr>
<td>BkJwtVerifyError</td>
<td>登陆请求经 JWT 检测失败</td>
<td>401</td>
<td>40102</td>
<td>用户登录验证</td>
</tr>
<tr>
<td>AccessForbidden</td>
<td>登陆失败</td>
<td>403</td>
<td>40301</td>
<td>用户身份验证失败</td>
</tr>
<tr>
<td>RequestForbidden</td>
<td>请求拒绝</td>
<td>403</td>
<td>40320</td>
<td>用户企图操作没有权限的任务</td>
</tr>
<tr>
<td>ResourceLock</td>
<td>请求资源被锁定</td>
<td>403</td>
<td>40330</td>
<td>用户企图操作一个已经锁定的任务</td>
</tr>
<tr>
<td>ResourceNotFound</td>
<td>找不到请求的资源</td>
<td>404</td>
<td>40400</td>
<td>找不到用户请求的某个指定 ID 的 model</td>
</tr>
<tr>
<td>MethodError</td>
<td>请求方法不支持</td>
<td>405</td>
<td>40501</td>
<td>用户发送的请求不在预期范围内</td>
</tr>
</tbody></table>
<hr>
<p>参考链接：<br><a href="https://bk.tencent.com/docs/document/5.1/19/576" target="_blank" rel="noopener">腾讯蓝鲸开发框架 2.0 使用说明</a></p>
]]></content>
      <categories>
        <category>蓝鲸</category>
        <category>开发框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>蓝鲸</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言之顺序编程</title>
    <url>/2020/04/23/go-basis-sequence/</url>
    <content><![CDATA[<blockquote>
<h2 id="Go语言之顺序编程"><a href="#Go语言之顺序编程" class="headerlink" title="Go语言之顺序编程"></a>Go语言之顺序编程</h2></blockquote>
<p>以下是笔者学习Go语言基础的代码随笔，本次练习内容为<kbd>条件语句</kbd>与<kbd>循环语句</kbd>。</p>
<h3 id="Go-语言条件语句"><a href="#Go-语言条件语句" class="headerlink" title="Go 语言条件语句"></a>Go 语言条件语句</h3><p>Go 语言提供了以下几种条件判断语句：</p>
<table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-if-statement.html" target="_blank" rel="noopener">if 语句</a></td>
<td align="left"><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-if-else-statement.html" target="_blank" rel="noopener">if…else 语句</a></td>
<td align="left"><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-nested-if-statements.html" target="_blank" rel="noopener">if 嵌套语句</a></td>
<td align="left">你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-switch-statement.html" target="_blank" rel="noopener">switch 语句</a></td>
<td align="left"><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-select-statement.html" target="_blank" rel="noopener">select 语句</a></td>
<td align="left"><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td>
</tr>
</tbody></table>
<p><em>注意：Go 没有三目运算符，所以不支持</em> <strong>?:</strong> <em>形式的条件判断。</em></p>
<a id="more"></a>

<h3 id="Go-语言循环语句"><a href="#Go-语言循环语句" class="headerlink" title="Go 语言循环语句"></a>Go 语言循环语句</h3><p>Go 语言提供了以下几种类型循环处理语句：</p>
<table>
<thead>
<tr>
<th align="left">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-for-loop.html" target="_blank" rel="noopener">for 循环</a></td>
<td align="left">重复执行语句块</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-nested-loops.html" target="_blank" rel="noopener">循环嵌套</a></td>
<td align="left">在 for 循环中嵌套一个或多个 for 循环</td>
</tr>
</tbody></table>
<h4 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h4><p>循环控制语句可以控制循环体内语句的执行过程。</p>
<p>GO 语言支持以下几种循环控制语句：</p>
<table>
<thead>
<tr>
<th align="left">控制语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-break-statement.html" target="_blank" rel="noopener">break 语句</a></td>
<td align="left">经常用于中断当前 for 循环或跳出 switch 语句</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-continue-statement.html" target="_blank" rel="noopener">continue 语句</a></td>
<td align="left">跳过当前循环的剩余语句，然后继续进行下一轮循环。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-goto-statement.html" target="_blank" rel="noopener">goto 语句</a></td>
<td align="left">将控制转移到被标记的语句。</td>
</tr>
</tbody></table>
<h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// ifFn()</span></span><br><span class="line">	<span class="comment">// forFn()</span></span><br><span class="line">	<span class="comment">// switchFn()</span></span><br><span class="line">	loopFn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ifFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">2</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"第一种方式"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> a, b := i, <span class="number">7</span>; a == <span class="number">2</span> &#123;</span><br><span class="line">		fmt.Println(b)</span><br><span class="line">		fmt.Println(<span class="string">"第二种方式"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// s := []int&#123;1, 2, 4, 5, 7&#125;</span></span><br><span class="line">	m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(k, v)</span><br><span class="line">	&#125;</span><br><span class="line">	i := <span class="number">4</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"第一种：无限循环，可通过break结束."</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">		a := <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> a &lt;= <span class="number">2</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"第二种：条件循环，类似while. (a=%v) \n"</span>, a)</span><br><span class="line">			a++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">2</span>; a++ &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"第三种：与第二种相同，带初始化和自增. (a=%v) \n"</span>, a)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">3</span></span><br><span class="line">	<span class="keyword">switch</span> i &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		a := <span class="number">3</span></span><br><span class="line">		<span class="keyword">switch</span> a &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第一种方式, a==1"</span>)</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第一种方式，a==2"</span>)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第一种方式，default"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		a := <span class="number">2</span></span><br><span class="line">		<span class="keyword">switch</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> a == <span class="number">1</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第二种方式, a==1"</span>)</span><br><span class="line">		<span class="keyword">case</span> a == <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第二种方式, a==2"</span>)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第二种方式，default"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">switch</span> a := <span class="number">3</span>; &#123;</span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">1</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=1"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式，default"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loopFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">LABEL2:</span><br><span class="line">	<span class="keyword">goto</span> LABEL</span><br><span class="line">LABEL:</span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> &#123;</span><br><span class="line">				i++</span><br><span class="line">				<span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">"跳过打印i=3"</span>)</span><br><span class="line">					<span class="keyword">continue</span> LABEL</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">"goto一下"</span>)</span><br><span class="line">					<span class="keyword">goto</span> LABEL2</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> i == <span class="number">7</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">"不打印剩下的"</span>)</span><br><span class="line">					<span class="keyword">break</span> LABEL</span><br><span class="line">				&#125;</span><br><span class="line">				fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
        <category>顺序编程</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>基础练习</tag>
        <tag>顺序编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言网络编程</title>
    <url>/2020/04/17/go-network-basis/</url>
    <content><![CDATA[<h1 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h1><p>从应用的角度出发，协议可以理解为”规则”，是数据传输和数据解释的规则。</p>
<p>假设，A和B双方要传输文件，现规定：</p>
<ul>
<li>第一步，传输文件名，接收文接收到文件名，响应OK给传输方；</li>
<li>第二步，发送文件的尺寸，接收方接收到该数据再次响应一个OK；</li>
<li>第三步，传输文件内容，同前两步一样，接收方接收数据完成后响应OK表示文件内容接收成功。</li>
</ul>
<p>由此，无论A和B之间传递何种文件，都是通过三次数据传输来完成。A和B之间形成了一个最简单的数据传输规则。</p>
<p>双方都按此规则发送和接收数据。A和B之间达成的这个相互遵守的规则即为协议。</p>
<p>这种仅在A和B之间被遵守的协议称之为原始协议。</p>
<p>当此协议被更多的人采用，不断的增加，改进，维护和完善，最终形成一个稳定，完整的文件传输协<br>议，被广泛应用于各种文件传输过程中。</p>
<p>该协议就成为一个标准协议。最早的FTP协议就是由此衍生而来的。</p>
<h1 id="分层模型"><a href="#分层模型" class="headerlink" title="分层模型"></a>分层模型</h1><h2 id="网络分层架构"><a href="#网络分层架构" class="headerlink" title="网络分层架构"></a>网络分层架构</h2><p>为了减少协议设计的复杂性，大多数网络模型均采用分层的方式来组织。</p>
<p>每一层都有自己的功能，就像建筑物一样，每一层都靠下面一层支持。每一层利用下一层提供的服务来为上一层提供服务，本层服务的实现细节对上层屏蔽。</p>
<h3 id="OSI七层模型："><a href="#OSI七层模型：" class="headerlink" title="OSI七层模型："></a>OSI七层模型：</h3><ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>链路层</li>
<li>物理层</li>
</ul>
<h3 id="TCP-IP模型："><a href="#TCP-IP模型：" class="headerlink" title="TCP/IP模型："></a>TCP/IP模型：</h3><ul>
<li>链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>应用层</li>
</ul>
<p><strong>*<u>越下面的层，越靠近硬件，越上面的层，越靠近用户。</u>*</strong></p>
<p><strong><code>物理层</code></strong>：主要定义物理设备标准，如网线的接口类型，光纤的接口类型，各种传输介质的传输速率等。其主要作用是传输比特流(就是由0和1转化成的电流强弱来进行传输，到达目的地后再转化成0和1，也就是我们常说的数模转换与模数转换)。这一层的数据叫做比特。</p>
<p><strong><code>数据链路层</code></strong>：定义了如何让格式化数据以帧为单位进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。</p>
<p><strong><code>网络层</code></strong>：在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。</p>
<p><strong><code>传输层</code></strong>：定义了一些传输数据的协议和接口号，比如WWW服务的端口号是80。TCP(传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据)，UDP(用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，比如QQ聊天数据就是通过这种方式传输的)。这一层的数据叫做比特。其主要是将下层接收的数据进行分段和传输，到达目的地址后再进行重组，常常把这一层数据叫做段。</p>
<p><strong><code>会话层</code></strong>：通过传输层(端口号：传输端口与接收端口)建立数据传输的通路。主要在系统之间发起会话请求或者接受会话请求(设备之间需要互相认识，可以是IP地址，也可以是MAC地址或者是主机名)</p>
<p><strong><code>表示层</code></strong>：可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</p>
<p><strong><code>应用层</code></strong>：网络软件</p>
<h2 id="层与协议"><a href="#层与协议" class="headerlink" title="层与协议"></a>层与协议</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链路层：ARP,RARP</span><br><span class="line">网络层：ICMP,IGMP</span><br><span class="line">传输层：TCP,UDP</span><br><span class="line">应用层：FTP,NFS,Telnet,SFTP,TFTP</span><br></pre></td></tr></table></figure>

<h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><h2 id="什么是Socket"><a href="#什么是Socket" class="headerlink" title="什么是Socket"></a>什么是Socket</h2><p>Socket起源于Unix，而Unix基本哲学思想之一就是”一切皆文件”，Unix上所有的文件都可以用”打开<br>open -&gt; 读写write/read -&gt; 关闭close”模式来操作。</p>
<p>Socket就是该模式的一个实现，网络的Socket数据传输是一种特殊的I/O，Socket也是一种文件描述<br>符。</p>
<p>Socket也具有一个类似于找开文件的函数调用：Socket()，该函数返回一个整型的Socket描述符，随后的连接建立，数据传输等操作都是通过该Socket实现的。</p>
<p>常用的Socket类型有两种：流式Socket(SOCK_STREAM)和数据报式Socket(SOCK_DGRAM)。流式是一种面向连接的Socket，针对于面向连接的TCP服务应用；数据报式Socket是一种无连接的Socket，对应于无连接的UDP服务应用。</p>
<h2 id="TCP的架构"><a href="#TCP的架构" class="headerlink" title="TCP的架构"></a>TCP的架构</h2><ul>
<li>B/S架构：浏览器/服务端架构</li>
<li>C/S架构：客户端/服务端架构</li>
</ul>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="服务端程序"><a href="#服务端程序" class="headerlink" title="服务端程序"></a>服务端程序</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//监听</span></span><br><span class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8000"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"err = "</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> listener.Close()</span><br><span class="line">	<span class="comment">//阻塞等待用户链接</span></span><br><span class="line">	conn, err := listener.Accept()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"err = "</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//接收用户的请求</span></span><br><span class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>) <span class="comment">//1024大小的缓冲区</span></span><br><span class="line">	n, err1 := conn.Read(buf)</span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"err1 = "</span>, err1)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"buf = "</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">	<span class="keyword">defer</span> conn.Close() <span class="comment">//关闭当前用户链接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//主动连接服务器</span></span><br><span class="line">	conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8000"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"err = "</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	<span class="comment">//发送数据</span></span><br><span class="line">	conn.Write([]<span class="keyword">byte</span>(<span class="string">"are u ok?"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>网络编程</tag>
        <tag>代码实践</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础练习二</title>
    <url>/2020/04/09/go-basis-exercise-2/</url>
    <content><![CDATA[<blockquote>
<h2 id="Go语言基础练习二"><a href="#Go语言基础练习二" class="headerlink" title="Go语言基础练习二"></a>Go语言基础练习二</h2></blockquote>
<p>以下是笔者学习Go语言基础的代码随笔，延续了练习一中的数据类型、变量常量申明，以及Go 语言的几种运算符。</p>
<h3 id="变量申明"><a href="#变量申明" class="headerlink" title="变量申明"></a>变量申明</h3><p><strong>第一种，指定变量类型，如果没有初始化，则变量默认为零值</strong>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name v_type</span><br><span class="line">v_name = value</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>第二种，根据值自行判定变量类型。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name = value</span><br></pre></td></tr></table></figure>

<p><strong>第三种，省略 var, 注意 \</strong>:=** 左侧如果没有声明新的变量，就产生编译错误，格式：**</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v_name := value</span><br></pre></td></tr></table></figure>

<h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型相同多个变量, 非全局变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br><span class="line">vname1, vname2, vname3 = v1, v2, v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 和 python 很像,不需要显示声明类型，自动推断</span></span><br><span class="line"></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    vname1 v_type1</span><br><span class="line">    vname2 v_type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Go-语言运算符"><a href="#Go-语言运算符" class="headerlink" title="Go 语言运算符"></a>Go 语言运算符</h3><p>运算符用于在程序运行时执行数学或逻辑运算。</p>
<p>Go 语言内置的运算符有：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
<h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// TODO -&gt; 并发、map、切片、类型转换、循环、条件语句</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Go数据类型、变量常量申明 */</span></span><br><span class="line">	<span class="comment">//var a string = "Runoob"</span></span><br><span class="line">	<span class="comment">//var bool bool = true</span></span><br><span class="line">	<span class="comment">//var b string</span></span><br><span class="line">	<span class="comment">//b = "sapphire"</span></span><br><span class="line">	<span class="comment">//var c = "spr"</span></span><br><span class="line">	fmt.Println(<span class="string">"first Go: "</span> + <span class="string">"hello world!"</span>)</span><br><span class="line">	<span class="comment">//fmt.Print(c)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//const申明常量</span></span><br><span class="line">	<span class="keyword">const</span> a, b = <span class="number">100</span>, <span class="string">"gogogo"</span></span><br><span class="line">	fmt.Println(b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明一个变量并初始化方式</span></span><br><span class="line">	<span class="comment">//方式1</span></span><br><span class="line">	<span class="keyword">var</span> test_1 = <span class="string">"RUNOOB"</span></span><br><span class="line">	fmt.Println(test_1)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 没有初始化就为零值</span></span><br><span class="line">	<span class="keyword">var</span> test_2 <span class="keyword">int</span></span><br><span class="line">	fmt.Println(test_2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bool 零值为 false</span></span><br><span class="line">	<span class="keyword">var</span> test_3 <span class="keyword">bool</span></span><br><span class="line">	fmt.Println(test_3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 = (自动判断类型)</span></span><br><span class="line">	<span class="keyword">var</span> test_4 = <span class="literal">true</span></span><br><span class="line">	fmt.Println(test_4)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3 := (必须申明新变量)</span></span><br><span class="line">	test_5 := <span class="string">"申明变量"</span></span><br><span class="line">	fmt.Println(test_5)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//iota，特殊常量，const每申明一次iota+=1</span></span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		aa = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">		bb          <span class="comment">//1</span></span><br><span class="line">		cc          <span class="comment">//2</span></span><br><span class="line">		dd = <span class="string">"ha"</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">		ee          <span class="comment">//"ha"   iota += 1</span></span><br><span class="line">		ff = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">		gg          <span class="comment">//100  iota +=1</span></span><br><span class="line">		hh = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">		ii          <span class="comment">//8</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(aa,bb,cc,dd,ee,ff,gg,hh,ii)</span><br><span class="line">	<span class="comment">// 输出：0 1 2 ha ha 100 100 7 8</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 运算符 */</span></span><br><span class="line">	<span class="comment">// 加+ 减- 乘* 除/ 余% 自增++ 自减--</span></span><br><span class="line">	<span class="keyword">var</span> operator <span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">	operator++</span><br><span class="line">	fmt.Printf(<span class="string">"operator 的值为 %d\n"</span>, operator )</span><br><span class="line">	operator--</span><br><span class="line">	fmt.Printf(<span class="string">"operator 的值为 %d\n"</span>, operator )</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 关系运算符 判断 */</span></span><br><span class="line">	<span class="comment">// 相等== 不等!= 大于&gt; 小于&lt; 大于等于&gt;= 小于等于&lt;=</span></span><br><span class="line">	fmt.Println(<span class="number">21</span> == <span class="number">22</span>)</span><br><span class="line">	fmt.Println(<span class="number">21</span> != <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 逻辑运算符 */</span></span><br><span class="line">	<span class="comment">// 与(逻辑and)&amp;&amp; 或(逻辑or)|| 非(逻辑not)!</span></span><br><span class="line">	and1, and2 := <span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line">	<span class="keyword">if</span> (and1 &amp;&amp; and2) &#123;</span><br><span class="line">		fmt.Println(<span class="string">"条件为true"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (and1 || and2) &#123;</span><br><span class="line">		fmt.Println(<span class="string">"条件为true"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 位运算符 */</span></span><br><span class="line">	<span class="comment">// 按位与&amp; 按位或| 按位异或^ 左移&lt;&lt; 右移&gt;&gt;</span></span><br><span class="line">	<span class="keyword">var</span> example <span class="keyword">uint</span> = <span class="number">13</span> <span class="comment">// 13二进制 1101</span></span><br><span class="line">	fmt.Println(example &gt;&gt; <span class="number">1</span>) <span class="comment">// 右移1位 -&gt; 0110</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 赋值运算符</span></span><br><span class="line"><span class="comment">	运算符	描述	          实例</span></span><br><span class="line"><span class="comment">	=		简单的赋值运算符 C = A + B 将 A + B 表达式结果赋值给 C</span></span><br><span class="line"><span class="comment">	+=		相加后再赋值	  C += A 等于 C = C + A</span></span><br><span class="line"><span class="comment">	-=		相减后再赋值	  C -= A 等于 C = C - A</span></span><br><span class="line"><span class="comment">	*=		相乘后再赋值	  C *= A 等于 C = C * A</span></span><br><span class="line"><span class="comment">	/=		相除后再赋值	  C /= A 等于 C = C / A</span></span><br><span class="line"><span class="comment">	%=		求余后再赋值	  C %= A 等于 C = C % A</span></span><br><span class="line"><span class="comment">	&lt;&lt;=		左移后赋值	  C &lt;&lt;= 2 等于 C = C &lt;&lt; 2</span></span><br><span class="line"><span class="comment">	&gt;&gt;=		右移后赋值	  C &gt;&gt;= 2 等于 C = C &gt;&gt; 2</span></span><br><span class="line"><span class="comment">	&amp;=		按位与后赋值	  C &amp;= 2 等于 C = C &amp; 2</span></span><br><span class="line"><span class="comment">	^=		按位异或后赋值	  C ^= 2 等于 C = C ^ 2</span></span><br><span class="line"><span class="comment">	|=		按位或后赋值	  C |= 2 等于 C = C | 2</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 其他运算符</span></span><br><span class="line">	<span class="comment">// &amp;返回变量储存地址 *指针变量</span></span><br><span class="line">	var_tmp := <span class="number">99</span></span><br><span class="line">	fmt.Println(&amp;var_tmp) <span class="comment">// 指针地址</span></span><br><span class="line">	fmt.Println(*(&amp;var_tmp)) <span class="comment">// 指针的值</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">"谁大一点:"</span>, max(<span class="number">100</span>,<span class="number">99</span>))</span><br><span class="line"></span><br><span class="line">	swap_a ,swap_b := swap(<span class="string">"lang"</span>, <span class="string">"go"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"交换顺序"</span>, swap_a ,swap_b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 数组</span></span><br><span class="line">	<span class="keyword">var</span> balance1 [<span class="number">10</span>] <span class="keyword">float32</span></span><br><span class="line">	<span class="comment">// 赋值</span></span><br><span class="line">	<span class="keyword">var</span> balance2 = [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">	fmt.Println(balance1, balance2)</span><br><span class="line">	<span class="keyword">var</span> salary <span class="keyword">float32</span> = balance2[<span class="number">3</span>]</span><br><span class="line">	fmt.Println(salary)</span><br><span class="line"></span><br><span class="line">	array()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> book1 Books</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 结构体</span></span><br><span class="line">	book1.title = <span class="string">"三国演义"</span></span><br><span class="line">	book1.bookId = <span class="number">1</span></span><br><span class="line">	book1.author = <span class="string">"罗贯中"</span></span><br><span class="line">	book1.subject = <span class="string">"历史"</span></span><br><span class="line">	fmt.Println(book1)</span><br><span class="line">	<span class="comment">// 结构体指针</span></span><br><span class="line">	<span class="keyword">var</span> book_pointer *Books</span><br><span class="line">	book_pointer = &amp;book1</span><br><span class="line">	fmt.Println(book_pointer)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">/* 声明局部变量 */</span></span><br><span class="line">	<span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">		result = num1</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result = num2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值有多个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> n [<span class="number">10</span>]<span class="keyword">int</span> <span class="comment">/* n 是一个长度为 10 的数组 */</span></span><br><span class="line">	<span class="keyword">var</span> i,j <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为数组 n 初始化元素 */</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		n[i] = i + <span class="number">100</span> <span class="comment">/* 设置元素为 i + 100 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">	<span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Element[%d] = %d\n"</span>, j, n[j] )</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结构体 */</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">	title   <span class="keyword">string</span></span><br><span class="line">	author  <span class="keyword">string</span></span><br><span class="line">	subject <span class="keyword">string</span></span><br><span class="line">	bookId  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
        <category>基础练习</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>基础练习</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础练习一</title>
    <url>/2020/04/03/go-basis-exercise-1/</url>
    <content><![CDATA[<blockquote>
<h2 id="Go语言基础练习一"><a href="#Go语言基础练习一" class="headerlink" title="Go语言基础练习一"></a>Go语言基础练习一</h2></blockquote>
<p>以下是笔者学习Go语言基础的代码随笔，主要为数据类型与变量申明。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p>
<p>Go 语言按类别有以下几种数据类型：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">类型和描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	aa = <span class="literal">iota</span></span><br><span class="line">	bb = <span class="literal">iota</span></span><br><span class="line">	cc = <span class="literal">iota</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">test</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> test1 <span class="keyword">int16</span> = <span class="number">99</span></span><br><span class="line">	<span class="keyword">var</span> str1, str2 = <span class="string">"hhh"</span>, <span class="string">"eee"</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="literal">true</span></span><br><span class="line">	b := <span class="string">"sapphire"</span></span><br><span class="line">	c, d, e := <span class="string">"office"</span>, <span class="string">"word"</span>, <span class="string">"ppt"</span></span><br><span class="line">	fmt.Println(test1)</span><br><span class="line">	fmt.Println(str1)</span><br><span class="line">	fmt.Println(str2)</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	pointer := &amp;b</span><br><span class="line">	fmt.Println(&amp;b)</span><br><span class="line">	fmt.Println(c + d + e)</span><br><span class="line">	fmt.Println(pointer, <span class="string">"gogogo"</span>)</span><br><span class="line">	<span class="keyword">const</span> spr = <span class="string">"sapphire"</span></span><br><span class="line">	fmt.Println(<span class="string">"my name is:"</span>, spr)</span><br><span class="line">	fmt.Println(unsafe.Sizeof(spr))</span><br><span class="line">	fmt.Println(unsafe.Sizeof(test1))</span><br><span class="line">	fmt.Println(bb)</span><br><span class="line">	<span class="keyword">if</span> bb != <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"bb is not 0"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">uint</span> = <span class="number">60</span>      <span class="comment">/* 60 = 0011 1100 */</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">uint</span> = <span class="number">13</span>      <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">uint</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	c = a &amp; b       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第一行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a | b       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第二行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a ^ b       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第三行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a &lt;&lt; <span class="number">2</span>     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第四行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a &gt;&gt; <span class="number">2</span>     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第五行 - c 的值为 %d\n"</span>, c )</span><br><span class="line">	test3()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line">	str1 := <span class="string">"sapphire"</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">int32</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">float32</span></span><br><span class="line">	<span class="keyword">var</span> ptr *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 运算符实例 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第 1 行 - a 变量类型为 = %T\n"</span>, a )</span><br><span class="line">	fmt.Printf(<span class="string">"第 2 行 - b 变量类型为 = %T\n"</span>, b )</span><br><span class="line">	fmt.Printf(<span class="string">"第 3 行 - c 变量类型为 = %T\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*  &amp; 和 * 运算符实例 */</span></span><br><span class="line">	ptr = &amp;a     <span class="comment">/* 'ptr' 包含了 'a' 变量的地址 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"a 的值为  %d\n"</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">"*ptr 为 %d\n"</span>, *ptr)</span><br><span class="line">	fmt.Printf(<span class="string">"name 为 %s\n"</span>, str1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
        <category>基础练习</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>数据类型</tag>
        <tag>基础练习</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之ORM操作</title>
    <url>/2020/03/21/django-orm/</url>
    <content><![CDATA[<blockquote>
<h1 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h1></blockquote>
<p>Django 模型使用自带的 ORM。</p>
<p><kbd>对象关系映射</kbd>（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p>
<p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p>
<p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p>
<img data-src="/2020/03/21/django-orm/django-orm1.png" class>

<a id="more"></a>

<h2 id="使用-ORM-的好处："><a href="#使用-ORM-的好处：" class="headerlink" title="使用 ORM 的好处："></a>使用 ORM 的好处：</h2><ul>
<li>提高开发效率。</li>
<li>不同数据库可以平滑切换。</li>
</ul>
<h2 id="使用-ORM-的缺点："><a href="#使用-ORM-的缺点：" class="headerlink" title="使用 ORM 的缺点："></a>使用 ORM 的缺点：</h2><ul>
<li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li>
<li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li>
</ul>
<h2 id="ORM-解析过程"><a href="#ORM-解析过程" class="headerlink" title="ORM 解析过程:"></a>ORM 解析过程:</h2><ul>
<li>1、ORM 会将 Python 代码转成为 SQL 语句。</li>
<li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li>
<li>3、在数据库中执行 SQL 语句并将结果返回。</li>
</ul>
<h2 id="ORM-对应关系表："><a href="#ORM-对应关系表：" class="headerlink" title="ORM 对应关系表："></a>ORM 对应关系表：</h2><img data-src="/2020/03/21/django-orm/orm-object.png" class>

<h1 id="查询类操作"><a href="#查询类操作" class="headerlink" title="查询类操作"></a>查询类操作</h1><h2 id="查询所有的结果"><a href="#查询所有的结果" class="headerlink" title="查询所有的结果"></a>查询所有的结果</h2><p>相当sql中的select * from</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = Test.objects.all()</span><br></pre></td></tr></table></figure>

<h2 id="条件查询filter相关sql中的where"><a href="#条件查询filter相关sql中的where" class="headerlink" title="条件查询filter相关sql中的where"></a>条件查询filter相关sql中的where</h2><p>用于过滤查询结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = Test.objects.filter(id=<span class="number">1</span>, name=’test’) <span class="comment"># 传多个参数</span></span><br></pre></td></tr></table></figure>

<p>如果多条件与查询，直接用逗号隔开，filter函数里面的参数都是Test Model中的字段</p>
<h2 id="获取单个对象"><a href="#获取单个对象" class="headerlink" title="获取单个对象"></a>获取单个对象</h2><p>get方法的参数一般为Model的主键，如果找不到会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_obj = Test.objects.get(id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="限制返回的结果数据的数量"><a href="#限制返回的结果数据的数量" class="headerlink" title="限制返回的结果数据的数量"></a>限制返回的结果数据的数量</h2><p>相当于sql中的limit，其中order_by是用于排序，如果根据字段a倒序排序，就是order_by(“-time”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.order_by(<span class="string">'name'</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(name=’test’).order_by(“-ctime”)</span><br></pre></td></tr></table></figure>

<h2 id="多条件参数查询"><a href="#多条件参数查询" class="headerlink" title="多条件参数查询"></a>多条件参数查询</h2><p>传字典，构造查询条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = Test.objects.filter(**query_dict).order_by(“-ctime”).values</span><br></pre></td></tr></table></figure>

<p>其中query_dict为一个字典，key为条件字段，value为条件值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query_dict = &#123;<span class="string">'id'</span>:<span class="number">123</span>,<span class="string">'name'</span>:’yyp’&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传Q对象"><a href="#传Q对象" class="headerlink" title="传Q对象"></a>传Q对象</h2><h3 id="构造查询条件"><a href="#构造查询条件" class="headerlink" title="构造查询条件"></a>构造查询条件</h3><ol>
<li><p>在 filter() 等函式中关键字参数彼此之间都是 “and” 关系。但是要执行更复杂的查询(比如，实现筛选条件的 or 关系)，可以使用 Q 对象。</p>
</li>
<li><p>Q对象包括 AND 关系和OR 关系</p>
</li>
<li><p>Q 对象可以用&amp;和 | 运算符进行连接。当某个操作连接两个 Q 对象时，就会产生一个新的等价的 Q 对象。</p>
<ul>
<li>第一步，构造Q对象：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Q(name__startswith=’h’) | Q(name__startswith=’p’)</span><br></pre></td></tr></table></figure></li>
<li>第二步，Q对象以查询参数方式使用，多个Q对象是and关系:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(</span><br><span class="line">Q(date=’<span class="number">2018</span><span class="number">-10</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>’),</span><br><span class="line">Q(name__startswith=’h’) | Q(name__startswith=’p’)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<blockquote>
<p>filter() 等函数可以接受 Q对象和条件参数，但Q对象必须放在条件参数前面 </p>
</blockquote>
<h3 id="传入条件查询"><a href="#传入条件查询" class="headerlink" title="传入条件查询"></a>传入条件查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q1 = Q()</span><br><span class="line">q1.connector = <span class="string">'OR'</span>              <span class="comment">#连接方式</span></span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">1</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">2</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">models.Tb1.objects.filter(q1)</span><br></pre></td></tr></table></figure>



<h3 id="合并条件查询"><a href="#合并条件查询" class="headerlink" title="合并条件查询"></a>合并条件查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">con = Q()</span><br><span class="line"></span><br><span class="line">q1 = Q()</span><br><span class="line">q1.connector = <span class="string">'OR'</span></span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">1</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">2</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">q2 = Q()</span><br><span class="line">q2.connector = <span class="string">'OR'</span></span><br><span class="line">q2.children.append((<span class="string">'status'</span>, <span class="string">'在线'</span>))</span><br><span class="line"></span><br><span class="line">con.add(q1, <span class="string">'AND'</span>)</span><br><span class="line">con.add(q2, <span class="string">'AND'</span>)</span><br><span class="line"></span><br><span class="line">models.Tb1.objects.filter(con)</span><br></pre></td></tr></table></figure>



<h2 id="过滤不满足条件的操作"><a href="#过滤不满足条件的操作" class="headerlink" title="过滤不满足条件的操作"></a>过滤不满足条件的操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = Test.objects.exclude(id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h1 id="增加类操作"><a href="#增加类操作" class="headerlink" title="增加类操作"></a>增加类操作</h1><h2 id="新增一条记录"><a href="#新增一条记录" class="headerlink" title="新增一条记录"></a>新增一条记录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1 = Test(name=<span class="string">'yyp'</span>)</span><br><span class="line">test1.save()</span><br></pre></td></tr></table></figure>



<h1 id="更新类操作"><a href="#更新类操作" class="headerlink" title="更新类操作"></a>更新类操作</h1><h2 id="先查询获取对象，再修改对象的值，再保存"><a href="#先查询获取对象，再修改对象的值，再保存" class="headerlink" title="先查询获取对象，再修改对象的值，再保存"></a>先查询获取对象，再修改对象的值，再保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1 = Test.objects.get(id=<span class="number">1</span>)</span><br><span class="line">test1.name = <span class="string">'Google'</span></span><br><span class="line">test1.save()</span><br></pre></td></tr></table></figure>



<h2 id="条件链式更新"><a href="#条件链式更新" class="headerlink" title="条件链式更新"></a>条件链式更新</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(id=<span class="number">1</span>).update(name=‘Google’)</span><br></pre></td></tr></table></figure>



<h1 id="删除类操作"><a href="#删除类操作" class="headerlink" title="删除类操作"></a>删除类操作</h1><h2 id="先查询获取要删除的对象，然后直接delete操作"><a href="#先查询获取要删除的对象，然后直接delete操作" class="headerlink" title="先查询获取要删除的对象，然后直接delete操作"></a>先查询获取要删除的对象，然后直接delete操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除id=1的数据</span></span><br><span class="line">test1 = Test.objects.get(id=<span class="number">1</span>)</span><br><span class="line">test1.delete()</span><br></pre></td></tr></table></figure>

<h2 id="条件删除："><a href="#条件删除：" class="headerlink" title="条件删除："></a>条件删除：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(id=<span class="number">1</span>).delete()</span><br></pre></td></tr></table></figure>

<h2 id="QuerySet相关"><a href="#QuerySet相关" class="headerlink" title="QuerySet相关"></a>QuerySet相关</h2><p>Django中model查询出来的结构类型为QuerySet，本质是一个查询对象集。</p>
<h2 id="将多个查询结果转换为字典列表"><a href="#将多个查询结果转换为字典列表" class="headerlink" title="将多个查询结果转换为字典列表"></a>将多个查询结果转换为字典列表</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># all()方法查询出来的是QuerySet，用values方法转成字典集</span></span><br><span class="line">data= Test.objects.all().values()</span><br><span class="line">data_dict_list = list(data)</span><br><span class="line">&lt;QuerySet [&lt;Test:  test&gt;]&gt;    ----&gt;&lt;QuerySet [&#123;“id”:XXX, “name”:XXX&#125;]&gt;</span><br></pre></td></tr></table></figure>



<h2 id="QuerySet对象转换成字典对象"><a href="#QuerySet对象转换成字典对象" class="headerlink" title="QuerySet对象转换成字典对象"></a>QuerySet对象转换成字典对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fromdjango.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line">data = Test.objects.get(id=<span class="number">1</span>)</span><br><span class="line">data_dict = model_to_dict(data)</span><br></pre></td></tr></table></figure>

<h2 id="序列化成json数据"><a href="#序列化成json数据" class="headerlink" title="序列化成json数据"></a>序列化成json数据</h2><p>对于很多web开发接口的时候，要返回的是json数据，而django从DB查询出来的是对象集，可以考虑django-rest-framework 库的serializers类，具体可参考：<a href="https://q1mi.github.io/Django-REST-framework-documentation/tutorial/1-serialization_zh/" target="_blank" rel="noopener"><strong>Tutorial 1: 序列化</strong></a></p>
<h1 id="查询条件总结"><a href="#查询条件总结" class="headerlink" title="查询条件总结"></a>查询条件总结</h1><h2 id="字段名-op"><a href="#字段名-op" class="headerlink" title="字段名__op:"></a>字段名__op:</h2><p>__exact 精确等于 like ‘aaa’</p>
<p>__iexact精确等于忽略大小写ilike‘aaa’</p>
<p>__contains 包含 like ‘%aaa%’</p>
<p>__icontains包含忽略大小写ilike‘%aaa%’，但是对于sqlite来说，contains的作用效果等同于icontains。</p>
<p>__gt大于</p>
<p>__gte大于等于</p>
<p>__lt小于</p>
<p>__lte小于等于</p>
<p>__in 存在于一个list范围内</p>
<p>__startswith以…开头</p>
<p>__istartswith以…开头忽略大小写</p>
<p>__endswith以…结尾</p>
<p>__iendswith以…结尾，忽略大小写</p>
<p>__range 在…范围内</p>
<p>__year 日期字段的年份</p>
<p>__month 日期字段的月份</p>
<p>__day 日期字段的日</p>
<p>__isnull=True/False</p>
<h2 id="使用sql语句进行查询："><a href="#使用sql语句进行查询：" class="headerlink" title="使用sql语句进行查询："></a>使用sql语句进行查询：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fromdjango.db <span class="keyword">import</span> connection</span><br><span class="line">cursor = connection.cursor()</span><br><span class="line">cursor.execute(“select * <span class="keyword">from</span> Test where name = %s”, <span class="string">"yyp"</span>)</span><br><span class="line">row = cursor.fetchone()</span><br></pre></td></tr></table></figure>



<hr>
<p>参考链接：<br><a href="https://mp.weixin.qq.com/s/okaGAbNkFLhwZXvZV7eUBw" target="_blank" rel="noopener">【经验分享】Django开发中常用到的数据库操作总结</a> </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>ORM</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
        <tag>Django</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之多线程与多进程</title>
    <url>/2020/03/18/python-thread-process/</url>
    <content><![CDATA[<blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></blockquote>
<p>现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统，操作系统可以同时运行多个任务。</p>
<p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p>
<p>有些进程还不止同时干一件事，比如Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>
<p>多任务的实现有3种方式：</p>
<ul>
<li>多进程模式；</li>
<li>多线程模式；</li>
<li>多进程 + 多线程模式。</li>
</ul>
<p>Python既支持多进程，又支持多线程，线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p>
<p>多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂。</p>
<a id="more"></a>

<h3 id="线程模块"><a href="#线程模块" class="headerlink" title="线程模块"></a>线程模块</h3><p>Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。</p>
<p>_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。</p>
<p>threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法：</p>
<ul>
<li>threading.currentThread(): 返回当前的线程变量。</li>
<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>
<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>
</ul>
<p>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</p>
<ul>
<li>run(): 用以表示线程活动的方法。</li>
<li>start():启动线程活动。</li>
<li>join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li>
<li>isAlive(): 返回线程是否活动的。</li>
<li>getName(): 返回线程名。</li>
<li>setName(): 设置线程名。</li>
</ul>
<hr>
<h4 id="使用-threading-模块创建线程"><a href="#使用-threading-模块创建线程" class="headerlink" title="使用 threading 模块创建线程"></a>使用 threading 模块创建线程</h4><p>我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">exitFlag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadID, name, counter)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.counter = counter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"开始线程："</span> + self.name)</span><br><span class="line">        print_time(self.name, self.counter, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"退出线程："</span> + self.name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, delay, counter)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> counter:</span><br><span class="line">        <span class="keyword">if</span> exitFlag:</span><br><span class="line">            threadName.exit()</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s: %s"</span> % (threadName, time.ctime(time.time())))</span><br><span class="line">        counter -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新线程</span></span><br><span class="line">thread1 = myThread(<span class="number">1</span>, <span class="string">"Thread-1"</span>, <span class="number">1</span>)</span><br><span class="line">thread2 = myThread(<span class="number">2</span>, <span class="string">"Thread-2"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新线程</span></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line">thread1.join()</span><br><span class="line">thread2.join()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"退出主线程"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p>
<p>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：</p>
<p>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。</p>
<p>考虑这样一种情况：一个列表里所有元素都是0，线程”set”从后向前把所有元素改成1，而线程”print”负责从前往后读取列表并打印。</p>
<p>那么，可能线程”set”开始改的时候，线程”print”便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。</p>
<p>锁有两种状态——锁定和未锁定。每当一个线程比如”set”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”set”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”set”继续。</p>
<p>经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。</p>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>在以上代码加以改进，实现线程同步：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadID, name, counter)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.counter = counter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"开启线程： "</span> + self.name)</span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        print_time(self.name, self.counter, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        threadLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, delay, counter)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> counter:</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s: %s"</span> % (threadName, time.ctime(time.time())))</span><br><span class="line">        counter -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程锁</span></span><br><span class="line">threadLock = threading.Lock()</span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新线程</span></span><br><span class="line">thread1 = myThread(<span class="number">1</span>, <span class="string">"Thread-1"</span>, <span class="number">1</span>)</span><br><span class="line">thread2 = myThread(<span class="number">2</span>, <span class="string">"Thread-2"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新线程</span></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加线程到线程列表</span></span><br><span class="line">threads.append(thread1)</span><br><span class="line">threads.append(thread2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有线程完成</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"退出主线程"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="线程优先级队列（-Queue）"><a href="#线程优先级队列（-Queue）" class="headerlink" title="线程优先级队列（ Queue）"></a>线程优先级队列（ Queue）</h4><p>Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。</p>
<p>这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。</p>
<p>Queue 模块中的常用方法:</p>
<ul>
<li>Queue.qsize() 返回队列的大小</li>
<li>Queue.empty() 如果队列为空，返回True,反之False</li>
<li>Queue.full() 如果队列满了，返回True,反之False</li>
<li>Queue.full 与 maxsize 大小对应</li>
<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>
<li>Queue.get_nowait() 相当Queue.get(False)</li>
<li>Queue.put(item) 写入队列，timeout等待时间</li>
<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>
<li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>
<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>
</ul>
<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><p>以下是在线程优先级队列Queue下的多线程实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">import queue</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">exitFlag &#x3D; 0</span><br><span class="line"></span><br><span class="line">class myThread (threading.Thread):</span><br><span class="line">    def __init__(self, threadID, name, q):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID &#x3D; threadID</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.q &#x3D; q</span><br><span class="line">    def run(self):</span><br><span class="line">        print (&quot;开启线程：&quot; + self.name)</span><br><span class="line">        process_data(self.name, self.q)</span><br><span class="line">        print (&quot;退出线程：&quot; + self.name)</span><br><span class="line"></span><br><span class="line">def process_data(threadName, q):</span><br><span class="line">    while not exitFlag:</span><br><span class="line">        queueLock.acquire()</span><br><span class="line">        if not workQueue.empty():</span><br><span class="line">            data &#x3D; q.get()</span><br><span class="line">            queueLock.release()</span><br><span class="line">            print (&quot;%s processing %s&quot; % (threadName, data))</span><br><span class="line">        else:</span><br><span class="line">            queueLock.release()</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">threadList &#x3D; [&quot;Thread-1&quot;, &quot;Thread-2&quot;, &quot;Thread-3&quot;]</span><br><span class="line">nameList &#x3D; [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;]</span><br><span class="line">queueLock &#x3D; threading.Lock()</span><br><span class="line">workQueue &#x3D; queue.Queue(10)</span><br><span class="line">threads &#x3D; []</span><br><span class="line">threadID &#x3D; 1</span><br><span class="line"></span><br><span class="line"># 创建新线程</span><br><span class="line">for tName in threadList:</span><br><span class="line">    thread &#x3D; myThread(threadID, tName, workQueue)</span><br><span class="line">    thread.start()</span><br><span class="line">    threads.append(thread)</span><br><span class="line">    threadID +&#x3D; 1</span><br><span class="line"></span><br><span class="line"># 填充队列</span><br><span class="line">queueLock.acquire()</span><br><span class="line">for word in nameList:</span><br><span class="line">    workQueue.put(word)</span><br><span class="line">queueLock.release()</span><br><span class="line"></span><br><span class="line"># 等待队列清空</span><br><span class="line">while not workQueue.empty():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 通知线程是时候退出</span><br><span class="line">exitFlag &#x3D; 1</span><br><span class="line"></span><br><span class="line"># 等待所有线程完成</span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br><span class="line">print (&quot;退出主线程&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。Python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在Python程序中轻松创建子进程。</p>
<p>但是Python是跨平台的，自然也应该提供一个跨平台的多进程支持。<code>multiprocessing</code>模块就是跨平台版本的多进程模块。</p>
<h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><p><code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象：</p>
<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))</span><br><span class="line">    print(<span class="string">'Child process will start.'</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'Child process end.'</span>)</span><br></pre></td></tr></table></figure>



<p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用<code>start()</code>方法启动，<code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p>
<h4 id="进程池Pool"><a href="#进程池Pool" class="headerlink" title="进程池Pool"></a>进程池Pool</h4><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All subprocesses done.'</span>)</span><br></pre></td></tr></table></figure>

<p>其中 <code>p.apply_async(long_time_task, args=(i,))</code> 中，<code>args</code>需要以元组形式传入目标任务<code>long_time_task</code>的参数。</p>
<p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p>
<p><code>Pool</code>的默认大小是CPU的核数，所以只有当子进程数大于CPU数时，才能形成阻塞的现象。</p>
<h4 id="子进程-subprocess"><a href="#子进程-subprocess" class="headerlink" title="子进程 subprocess"></a>子进程 subprocess</h4><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p>
<p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p>
<h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><p><code>subprocess</code>可以实现<code>os</code>模块的功能，启动一个子进程，然后在当前操作系统下执行命令和脚本。(subprocess具体功能可以放到os模块和文件IO学习)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">print(<span class="string">'$ nslookup www.python.org'</span>)</span><br><span class="line">r = subprocess.call([<span class="string">'nslookup'</span>, <span class="string">'www.python.org'</span>])</span><br><span class="line">print(<span class="string">'Exit code:'</span>, r)</span><br></pre></td></tr></table></figure>

<h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p>
<h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = q.get(<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure>

<h4 id="进程小结"><a href="#进程小结" class="headerlink" title="进程小结"></a>进程小结</h4><p>在Unix/Linux下，可以使用<code>fork()</code>调用实现多进程。</p>
<p>要实现跨平台的多进程，可以使用<code>multiprocessing</code>模块。</p>
<p>进程间通信是通过<code>Queue</code>、<code>Pipes</code>等实现的。</p>
<h3 id="多线程和多进程的效率比较"><a href="#多线程和多进程的效率比较" class="headerlink" title="多线程和多进程的效率比较"></a>多线程和多进程的效率比较</h3><p>资料显示，如果多线程的进程是<strong>CPU密集型</strong>的，那多线程并不能有多少效率上的提升，相反还可能会因为线程的频繁切换，导致效率下降，推荐使用多进程；如果是<strong>IO密集型</strong>，多线程进程可以利用IO阻塞等待时的空闲时间执行其他线程，提升效率。所以我们根据实验对比不同场景的效率。</p>
<h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">CPU密集型操作</th>
<th align="left">IO密集型操作</th>
<th>网络请求密集型操作</th>
</tr>
</thead>
<tbody><tr>
<td align="left">线性操作</td>
<td align="left">94.91824996469</td>
<td align="left">22.46199995279</td>
<td>7.3296000004</td>
</tr>
<tr>
<td align="left">多线程操作</td>
<td align="left">101.1700000762</td>
<td align="left">24.8605000973</td>
<td>0.5053332647</td>
</tr>
<tr>
<td align="left">多进程操作</td>
<td align="left">53.8899999857</td>
<td align="left">12.7840000391</td>
<td>0.5045000315</td>
</tr>
</tbody></table>
<p>通过上面的结果，我们可以看到：</p>
<ul>
<li>多线程在IO密集型的操作下似乎也没有很大的优势（也许IO操作的任务再繁重一些就能体现出优势），在CPU密集型的操作下明显地比单线程线性执行性能更差，但是对于网络请求这种忙等阻塞线程的操作，多线程的优势便非常显著了。</li>
<li>多进程无论是在CPU密集型还是IO密集型以及网络请求密集型（经常发生线程阻塞的操作）中，都能体现出性能的优势。不过在类似网络请求密集型的操作上，与多线程相差无几，但却更占用CPU等资源，所以对于这种情况下，我们可以选择多线程来执行。</li>
</ul>
<hr>
<p>参考链接：</p>
<p><a href="https://www.runoob.com/w3cnote/python-single-thread-multi-thread-and-multi-process.html" target="_blank" rel="noopener">Python中单线程、多线程和多进程的效率对比实验</a>  </p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064" target="_blank" rel="noopener">Python中多任务的解决方案之进程和线程</a></p>
<p><a href="https://www.runoob.com/python3/python3-multithreading.html" target="_blank" rel="noopener">Pyhton3多线程的使用</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>多任务</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>多线程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>pearson相关系数</title>
    <url>/2020/02/26/pearson-formula/</url>
    <content><![CDATA[<p><strong>pearson相关系数</strong></p>
<p><img data-src="/picture/pearson%E5%85%AC%E5%BC%8F.png" alt="avatar"></p>
<p>公式定义为： 两个连续变量(X,Y)的pearson相关性系数(Px,y)等于它们之间的协方差cov(X,Y)除以它们各自标准差的乘积(σX,σY)。系数的取值总是在-1.0到1.0之间，接近0的变量被成为无相关性，接近1或者-1被称为具有强相关性。</p>
<p>简单来说，它用来衡量两个数据集合是否在一条线上面，是否有相关性，这在数据分析中是很有效的。</p>
<p>用python3实现：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pearson</span><span class="params">(vector1, vector2)</span>:</span></span><br><span class="line">    n = len(vector1)</span><br><span class="line">    <span class="comment">#simple sums</span></span><br><span class="line">    sum1 = sum(float(vector1[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    sum2 = sum(float(vector2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    <span class="comment">#sum up the squares</span></span><br><span class="line">    sum1_pow = sum([pow(v, <span class="number">2.0</span>) <span class="keyword">for</span> v <span class="keyword">in</span> vector1])</span><br><span class="line">    sum2_pow = sum([pow(v, <span class="number">2.0</span>) <span class="keyword">for</span> v <span class="keyword">in</span> vector2])</span><br><span class="line">    <span class="comment">#sum up the products</span></span><br><span class="line">    p_sum = sum([vector1[i]*vector2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">    <span class="comment">#分子num，分母den</span></span><br><span class="line">    num = p_sum - (sum1*sum2/n)</span><br><span class="line">    den = math.sqrt((sum1_pow-pow(sum1, <span class="number">2</span>)/n)*(sum2_pow-pow(sum2, <span class="number">2</span>)/n))</span><br><span class="line">    <span class="keyword">if</span> den == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">return</span> num/den</span><br></pre></td></tr></table></figure>
<p>选择两组数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vector1 &#x3D; [2, 7, 18, 88, 157, 90, 177, 570]</span><br><span class="line">vector2 &#x3D; [3, 5, 15, 90, 180, 88, 160, 580]</span><br><span class="line">print(&#39;result is: &#39; + int(pearson(vector1, vector2)))</span><br></pre></td></tr></table></figure>
<p>运行结果为0.998，可见这两组数是高度正相关的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result is: 0.998348748644</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;美国零售业有这样一个案例，美国沃尔玛百货将他们的纸尿裤和啤酒并排摆在一起销售，结果纸尿裤和啤酒的销量双双增长。<br>原来，美国的太太们常叮嘱她们的丈夫下班后为小孩买尿布，而丈夫们在买尿布后又随手带回了两瓶啤酒。<br>这一消费行为导致了这两件商品经常被同时购买。这其实是经过数据挖掘、趋势分析后做出的决策。</p>
<hr>
<p>参考：<a href="https://blog.csdn.net/AlexMerer/article/details/74908435" target="_blank" rel="noopener">统计学三大相关系数之皮尔森（pearson）相关系数</a><br>&emsp;&emsp;&emsp;<a href="https://www.jianshu.com/p/a8349052a2a0" target="_blank" rel="noopener">从啤酒和纸尿裤，你能想到什么？</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>大数据分析</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP网络协议族</title>
    <url>/2019/12/24/http-clan/</url>
    <content><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p>
<p>请求报文结构：</p>
<ul>
<li>第一行是包含了请求方法、URL、协议版本；</li>
<li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li>
<li>一个空行用来分隔首部和内容主体 Body</li>
<li>最后是请求的内容主体</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;www.example.com&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Host: www.example.com</span><br><span class="line">If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">If-None-Match: &quot;3147526947+gzip&quot;</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 xxx</span><br><span class="line"></span><br><span class="line">param1&#x3D;1&amp;param2&#x3D;2</span><br></pre></td></tr></table></figure>

<p>响应报文结构：</p>
<ul>
<li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了</li>
<li>接下来多行也是首部内容</li>
<li>一个空行分隔首部和内容主体</li>
<li>最后是响应的内容主体</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Age: 529651</span><br><span class="line">Cache-Control: max-age&#x3D;604800</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 648</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line">Date: Mon, 02 Nov 2020 17:53:39 GMT</span><br><span class="line">Etag: &quot;3147526947+ident+gzip&quot;</span><br><span class="line">Expires: Mon, 09 Nov 2020 17:53:39 GMT</span><br><span class="line">Keep-Alive: timeout&#x3D;4</span><br><span class="line">Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Server: ECS (sjc&#x2F;16DF)</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Cache: HIT</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Example Domain&lt;&#x2F;title&gt;</span><br><span class="line">	&#x2F;&#x2F; 省略... </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>HTTP 使用 URL（ <strong>U</strong> niform <strong>R</strong>esource <strong>L</strong>ocator，统一资源定位符）来定位资源，它是 URI（<strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。</p>
<p><a href="https://camo.githubusercontent.com/5be7de544b24ef21636514dd9923735c2a61c1bfc4127a69f94653c8b9b8f76c/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38343431623263342d646361372d346436622d386566622d6632326566636361663333312e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/5be7de544b24ef21636514dd9923735c2a61c1bfc4127a69f94653c8b9b8f76c/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38343431623263342d646361372d346436622d386566622d6632326566636361663333312e706e67" alt="img"></a></p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/统一资源标志符" target="_blank" rel="noopener">wikipedia：统一资源标志符</a></li>
<li><a href="https://en.wikipedia.org/wiki/URL" target="_blank" rel="noopener">wikipedia: URL</a></li>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2" target="_blank" rel="noopener">rfc2616：3.2.2 http URL</a></li>
<li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn" target="_blank" rel="noopener">What is the difference between a URI, a URL and a URN?</a></li>
</ul>
<h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><p>客户端发送的 <strong>请求报文</strong> 第一行为请求行，包含了方法字段。</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><blockquote>
<p>获取资源</p>
</blockquote>
<p>当前网络请求中，绝大部分使用的是 GET 方法。</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><blockquote>
<p>获取报文首部</p>
</blockquote>
<p>和 GET 方法类似，但是不返回报文实体主体部分。</p>
<p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><blockquote>
<p>传输实体主体</p>
</blockquote>
<p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p>
<p>更多 POST 与 GET 的比较请见第九章。</p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><blockquote>
<p>上传文件</p>
</blockquote>
<p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;new.html HTTP&#x2F;1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text&#x2F;html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line">&lt;p&gt;New File&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><blockquote>
<p>对资源进行部分修改</p>
</blockquote>
<p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATCH &#x2F;file.txt HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application&#x2F;example</span><br><span class="line">If-Match: &quot;e0023aa4e&quot;</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure>

<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><blockquote>
<p>删除文件</p>
</blockquote>
<p>与 PUT 功能相反，并且同样不带验证机制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;file.html HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><blockquote>
<p>查询支持的方法</p>
</blockquote>
<p>查询指定的 URL 能够支持的方法。</p>
<p>会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</p>
<h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><blockquote>
<p>要求在与代理服务器通信时建立隧道</p>
</blockquote>
<p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<p><a href="https://camo.githubusercontent.com/5b900cbd7bbb78f2ce5f4d83801041a1d59178b6c5f6078cbe435880c2320ef4/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f64633030663730652d633563382d346432302d626166312d3264373030313461393765332e6a7067" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/5b900cbd7bbb78f2ce5f4d83801041a1d59178b6c5f6078cbe435880c2320ef4/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f64633030663730652d633563382d346432302d626166312d3264373030313461393765332e6a7067" alt="img"></a></p>
<h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><blockquote>
<p>追踪路径</p>
</blockquote>
<p>服务器会将通信路径返回给客户端。</p>
<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p>
<p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p>
<ul>
<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="noopener">rfc2616：9 Method Definitions</a></li>
</ul>
<h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><p>服务器返回的 <strong>响应报文</strong> 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>1XX</td>
<td>Informational（信息性状态码）</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success（成功状态码）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection（重定向状态码）</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error（客户端错误状态码）</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error（服务器错误状态码）</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<h3 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h3><ul>
<li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li>
</ul>
<h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><ul>
<li><strong>200 OK</strong></li>
<li><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li>
<li><strong>206 Partial Content</strong> ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</li>
</ul>
<h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><ul>
<li><strong>301 Moved Permanently</strong> ：永久性重定向</li>
<li><strong>302 Found</strong> ：临时性重定向</li>
<li><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</li>
<li>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</li>
<li><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li>
<li><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li>
</ul>
<h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><ul>
<li><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</li>
<li><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li>
<li><strong>403 Forbidden</strong> ：请求被拒绝。</li>
<li><strong>404 Not Found</strong></li>
</ul>
<h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><ul>
<li><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</li>
<li><strong>503 Service Unavailable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>
</ul>
<h2 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h2><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p>
<p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p>
<h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Cache-Control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Connection</td>
<td>控制不再转发给代理的首部字段、管理持久连接</td>
</tr>
<tr>
<td>Date</td>
<td>创建报文的日期时间</td>
</tr>
<tr>
<td>Pragma</td>
<td>报文指令</td>
</tr>
<tr>
<td>Trailer</td>
<td>报文末端的首部一览</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>指定报文主体的传输编码方式</td>
</tr>
<tr>
<td>Upgrade</td>
<td>升级为其他协议</td>
</tr>
<tr>
<td>Via</td>
<td>代理服务器的相关信息</td>
</tr>
<tr>
<td>Warning</td>
<td>错误通知</td>
</tr>
</tbody></table>
<h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>用户代理可处理的媒体类型</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>优先的字符集</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>优先的内容编码</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>优先的语言（自然语言）</td>
</tr>
<tr>
<td>Authorization</td>
<td>Web 认证信息</td>
</tr>
<tr>
<td>Expect</td>
<td>期待服务器的特定行为</td>
</tr>
<tr>
<td>From</td>
<td>用户的电子邮箱地址</td>
</tr>
<tr>
<td>Host</td>
<td>请求资源所在服务器</td>
</tr>
<tr>
<td>If-Match</td>
<td>比较实体标记（ETag）</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>比较资源的更新时间</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>比较实体标记（与 If-Match 相反）</td>
</tr>
<tr>
<td>If-Range</td>
<td>资源未更新时发送实体 Byte 的范围请求</td>
</tr>
<tr>
<td>If-Unmodified-Since</td>
<td>比较资源的更新时间（与 If-Modified-Since 相反）</td>
</tr>
<tr>
<td>Max-Forwards</td>
<td>最大传输逐跳数</td>
</tr>
<tr>
<td>Proxy-Authorization</td>
<td>代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td>Range</td>
<td>实体的字节范围请求</td>
</tr>
<tr>
<td>Referer</td>
<td>对请求中 URI 的原始获取方</td>
</tr>
<tr>
<td>TE</td>
<td>传输编码的优先级</td>
</tr>
<tr>
<td>User-Agent</td>
<td>HTTP 客户端程序的信息</td>
</tr>
</tbody></table>
<h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Accept-Ranges</td>
<td>是否接受字节范围请求</td>
</tr>
<tr>
<td>Age</td>
<td>推算资源创建经过时间</td>
</tr>
<tr>
<td>ETag</td>
<td>资源的匹配信息</td>
</tr>
<tr>
<td>Location</td>
<td>令客户端重定向至指定 URI</td>
</tr>
<tr>
<td>Proxy-Authenticate</td>
<td>代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td>Retry-After</td>
<td>对再次发起请求的时机要求</td>
</tr>
<tr>
<td>Server</td>
<td>HTTP 服务器的安装信息</td>
</tr>
<tr>
<td>Vary</td>
<td>代理服务器缓存的管理信息</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>服务器对客户端的认证信息</td>
</tr>
</tbody></table>
<h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Allow</td>
<td>资源可支持的 HTTP 方法</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>实体主体适用的编码方式</td>
</tr>
<tr>
<td>Content-Language</td>
<td>实体主体的自然语言</td>
</tr>
<tr>
<td>Content-Length</td>
<td>实体主体的大小</td>
</tr>
<tr>
<td>Content-Location</td>
<td>替代对应资源的 URI</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>实体主体的报文摘要</td>
</tr>
<tr>
<td>Content-Range</td>
<td>实体主体的位置范围</td>
</tr>
<tr>
<td>Content-Type</td>
<td>实体主体的媒体类型</td>
</tr>
<tr>
<td>Expires</td>
<td>实体主体过期的日期时间</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>资源的最后修改日期时间</td>
</tr>
</tbody></table>
<h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p><a href="https://camo.githubusercontent.com/d209aea05562d9c5eea22382e0d13e2d9fa286550034d311a160173967178db3/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f48545450315f785f436f6e6e656374696f6e732e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/d209aea05562d9c5eea22382e0d13e2d9fa286550034d311a160173967178db3/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f48545450315f785f436f6e6e656374696f6e732e706e67" alt="img"></a></p>
<h4 id="1-短连接与长连接"><a href="#1-短连接与长连接" class="headerlink" title="1. 短连接与长连接"></a>1. 短连接与长连接</h4><p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。</p>
<p>长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p>
<ul>
<li>从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；</li>
<li>在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 <code>Connection : Keep-Alive</code>。</li>
</ul>
<h4 id="2-流水线"><a href="#2-流水线" class="headerlink" title="2. 流水线"></a>2. 流水线</h4><p>默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。</p>
<p>流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p>
<p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。</p>
<p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。</p>
<h4 id="1-用途"><a href="#1-用途" class="headerlink" title="1. 用途"></a>1. 用途</h4><ul>
<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>
</ul>
<h4 id="2-创建过程"><a href="#2-创建过程" class="headerlink" title="2. 创建过程"></a>2. 创建过程</h4><p>服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.0 200 OK</span><br><span class="line">Content-type: text&#x2F;html</span><br><span class="line">Set-Cookie: yummy_cookie&#x3D;choco</span><br><span class="line">Set-Cookie: tasty_cookie&#x3D;strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure>

<p>客户端之后对同一个服务器发送请求时，会从浏览器中取出 Cookie 信息并通过 Cookie 请求首部字段发送给服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;sample_page.html HTTP&#x2F;1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie&#x3D;choco; tasty_cookie&#x3D;strawberry</span><br></pre></td></tr></table></figure>

<h4 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h4><ul>
<li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li>
<li>持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id&#x3D;a3fWa; Expires&#x3D;Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure>

<h4 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h4><p>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。</p>
<p>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (“/“) 作为路径分隔符，子路径也会被匹配。例如，设置 Path=/docs，则以下地址都会匹配：</p>
<ul>
<li>/docs</li>
<li>/docs/Web/</li>
<li>/docs/Web/HTTP</li>
</ul>
<h4 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5. JavaScript"></a>5. JavaScript</h4><p>浏览器通过 <code>document.cookie</code> 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie &#x3D; &quot;yummy_cookie&#x3D;choco&quot;;</span><br><span class="line">document.cookie &#x3D; &quot;tasty_cookie&#x3D;strawberry&quot;;</span><br><span class="line">console.log(document.cookie);</span><br></pre></td></tr></table></figure>

<h4 id="6-HttpOnly"><a href="#6-HttpOnly" class="headerlink" title="6. HttpOnly"></a>6. HttpOnly</h4><p>标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。跨站脚本攻击 (XSS) 常常使用 JavaScript 的 <code>document.cookie</code> API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id&#x3D;a3fWa; Expires&#x3D;Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></table></figure>

<h4 id="7-Secure"><a href="#7-Secure" class="headerlink" title="7. Secure"></a>7. Secure</h4><p>标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p>
<h4 id="8-Session"><a href="#8-Session" class="headerlink" title="8. Session"></a>8. Session</h4><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。</p>
<p>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。</p>
<p>使用 Session 维护用户登录状态的过程如下：</p>
<ul>
<li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li>
<li>服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID；</li>
<li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；</li>
<li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。</li>
</ul>
<p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。</p>
<h4 id="9-浏览器禁用-Cookie"><a href="#9-浏览器禁用-Cookie" class="headerlink" title="9. 浏览器禁用 Cookie"></a>9. 浏览器禁用 Cookie</h4><p>此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递。</p>
<h4 id="10-Cookie-与-Session-选择"><a href="#10-Cookie-与-Session-选择" class="headerlink" title="10. Cookie 与 Session 选择"></a>10. Cookie 与 Session 选择</h4><ul>
<li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session；</li>
<li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；</li>
<li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul>
<li>缓解服务器压力；</li>
<li>降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。</li>
</ul>
<h4 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h4><ul>
<li>让代理服务器进行缓存；</li>
<li>让客户端浏览器进行缓存。</li>
</ul>
<h4 id="3-Cache-Control"><a href="#3-Cache-Control" class="headerlink" title="3. Cache-Control"></a>3. Cache-Control</h4><p>HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。</p>
<p><strong>3.1 禁止进行缓存</strong></p>
<p>no-store 指令规定不能对请求或响应的任何一部分进行缓存。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-store</span><br></pre></td></tr></table></figure>

<p><strong>3.2 强制确认缓存</strong></p>
<p>no-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure>

<p><strong>3.3 私有缓存和公共缓存</strong></p>
<p>private 指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: private</span><br></pre></td></tr></table></figure>

<p>public 指令规定了将资源作为公共缓存，可以被多个用户使用，一般存储在代理服务器中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: public</span><br></pre></td></tr></table></figure>

<p><strong>3.4 缓存过期机制</strong></p>
<p>max-age 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p>
<p>max-age 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: max-age&#x3D;31536000</span><br></pre></td></tr></table></figure>

<p>Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Expires: Wed, 04 Jul 2012 08:26:05 GMT</span><br></pre></td></tr></table></figure>

<ul>
<li>在 HTTP/1.1 中，会优先处理 max-age 指令；</li>
<li>在 HTTP/1.0 中，max-age 指令会被忽略掉。</li>
</ul>
<h4 id="4-缓存验证"><a href="#4-缓存验证" class="headerlink" title="4. 缓存验证"></a>4. 缓存验证</h4><p>需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 <code>http://www.google.com/</code> 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ETag: &quot;82e22293907ce725faf67773957acd12&quot;</span><br></pre></td></tr></table></figure>

<p>可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-None-Match: &quot;82e22293907ce725faf67773957acd12&quot;</span><br></pre></td></tr></table></figure>

<p>Last-Modified 首部字段也可以用于缓存验证，它包含在源服务器发送的响应报文中，指示源服务器对资源的最后修改时间。但是它是一种弱校验器，因为只能精确到一秒，所以它通常作为 ETag 的备用方案。如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure>

<h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p>
<h4 id="1-类型"><a href="#1-类型" class="headerlink" title="1. 类型"></a>1. 类型</h4><p><strong>1.1 服务端驱动型</strong></p>
<p>客户端设置特定的 HTTP 首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language，服务器根据这些字段返回特定的资源。</p>
<p>它存在以下问题：</p>
<ul>
<li>服务器很难知道客户端浏览器的全部信息；</li>
<li>客户端提供的信息相当冗长（HTTP/2 协议的首部压缩机制缓解了这个问题），并且存在隐私风险（HTTP 指纹识别技术）；</li>
<li>给定的资源需要返回不同的展现形式，共享缓存的效率会降低，而服务器端的实现会越来越复杂。</li>
</ul>
<p><strong>1.2 代理驱动型</strong></p>
<p>服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源。</p>
<h4 id="2-Vary"><a href="#2-Vary" class="headerlink" title="2. Vary"></a>2. Vary</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vary: Accept-Language</span><br></pre></td></tr></table></figure>

<p>在使用内容协商的情况下，只有当缓存服务器中的缓存满足内容协商条件时，才能使用该缓存，否则应该向源服务器请求该资源。</p>
<p>例如，一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 <code>Vary: Accept-Language</code> 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存。</p>
<h3 id="内容编码"><a href="#内容编码" class="headerlink" title="内容编码"></a>内容编码</h3><p>内容编码将实体主体进行压缩，从而减少传输的数据量。</p>
<p>常用的内容编码有：gzip、compress、deflate、identity。</p>
<p>浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，响应报文的 Vary 首部字段至少要包含 Content-Encoding。</p>
<h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p>如果网络出现中断，服务器只发送了一部分数据，范围请求可以使得客户端只请求服务器未发送的那部分数据，从而避免服务器重新发送所有数据。</p>
<h4 id="1-Range"><a href="#1-Range" class="headerlink" title="1. Range"></a>1. Range</h4><p>在请求报文中添加 Range 首部字段指定请求的范围。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;z4d4kWk.jpg HTTP&#x2F;1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes&#x3D;0-1023</span><br></pre></td></tr></table></figure>

<p>请求成功的话服务器返回的响应包含 206 Partial Content 状态码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023&#x2F;146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></table></figure>

<h4 id="2-Accept-Ranges"><a href="#2-Accept-Ranges" class="headerlink" title="2. Accept-Ranges"></a>2. Accept-Ranges</h4><p>响应首部字段 Accept-Ranges 用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>

<h4 id="3-响应状态码"><a href="#3-响应状态码" class="headerlink" title="3. 响应状态码"></a>3. 响应状态码</h4><ul>
<li>在请求成功的情况下，服务器会返回 206 Partial Content 状态码。</li>
<li>在请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码。</li>
<li>在不支持范围请求的情况下，服务器会返回 200 OK 状态码。</li>
</ul>
<h3 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h3><p>Chunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面。</p>
<h3 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h3><p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p>
<p>例如，上传多个表单时可以使用如下方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;submit-name&quot;</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;files&quot;; filename&#x3D;&quot;file1.txt&quot;</span><br><span class="line">Content-Type: text&#x2F;plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure>

<h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>HTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p>
<h3 id="通信数据转发"><a href="#通信数据转发" class="headerlink" title="通信数据转发"></a>通信数据转发</h3><h4 id="1-代理"><a href="#1-代理" class="headerlink" title="1. 代理"></a>1. 代理</h4><p>代理服务器接受客户端的请求，并且转发给其它服务器。</p>
<p>使用代理的主要目的是：</p>
<ul>
<li>缓存</li>
<li>负载均衡</li>
<li>网络访问控制</li>
<li>访问日志记录</li>
</ul>
<p>代理服务器分为正向代理和反向代理两种：</p>
<ul>
<li>用户察觉得到正向代理的存在。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/59fcedfd5852a065a1326436754e02245537d4d3876ca015fcb86a5932de7452/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61333134626237392d356231382d346536332d613937362d3334343862666661366631622e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/59fcedfd5852a065a1326436754e02245537d4d3876ca015fcb86a5932de7452/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61333134626237392d356231382d346536332d613937362d3334343862666661366631622e706e67" alt="img"></a></p>
<ul>
<li>而反向代理一般位于内部网络中，用户察觉不到。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/e3072be9388f44c38c28b346e278fb02f81db7a88bab25efc8aa0076b496db0f/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f32643039613834372d623835342d343339632d393139382d6232396336353831303934342e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/e3072be9388f44c38c28b346e278fb02f81db7a88bab25efc8aa0076b496db0f/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f32643039613834372d623835342d343339632d393139382d6232396336353831303934342e706e67" alt="img"></a></p>
<h4 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h4><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p>
<h4 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h4><p>使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP 有以下安全性问题：</p>
<ul>
<li>使用明文进行通信，内容可能会被窃听；</li>
<li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li>
<li>无法证明报文的完整性，报文有可能遭篡改。</li>
</ul>
<p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。</p>
<p>通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p>
<p><a href="https://camo.githubusercontent.com/d742fcbc48d96d10aeb1996c62410acac607e421adb44cc544105f1f84c3b284/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f73736c2d6f66666c6f6164696e672e6a7067" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/d742fcbc48d96d10aeb1996c62410acac607e421adb44cc544105f1f84c3b284/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f73736c2d6f66666c6f6164696e672e6a7067" alt="img"></a></p>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><h4 id="1-对称密钥加密"><a href="#1-对称密钥加密" class="headerlink" title="1. 对称密钥加密"></a>1. 对称密钥加密</h4><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。</p>
<ul>
<li>优点：运算速度快；</li>
<li>缺点：无法安全地将密钥传输给通信方。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/6c294912997faa05a28d069a85582276f8885e1e5fd8cea3318239f2d2bb08ea/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37666666613462382d623336642d343731662d616430632d6138386565373633626237362e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/6c294912997faa05a28d069a85582276f8885e1e5fd8cea3318239f2d2bb08ea/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f37666666613462382d623336642d343731662d616430632d6138386565373633626237362e706e67" alt="img"></a></p>
<h4 id="2-非对称密钥加密"><a href="#2-非对称密钥加密" class="headerlink" title="2.非对称密钥加密"></a>2.非对称密钥加密</h4><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p>
<p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p>
<p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p>
<ul>
<li>优点：可以更安全地将公开密钥传输给通信发送方；</li>
<li>缺点：运算速度慢。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/8ebc0cef52df1490899222ffeb3fa231bc19a2f2eb8fb32dac0611af865ea577/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f33396363623239392d656539392d346464312d623862342d3266396563393439356362342e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/8ebc0cef52df1490899222ffeb3fa231bc19a2f2eb8fb32dac0611af865ea577/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f33396363623239392d656539392d346464312d623862342d3266396563393439356362342e706e67" alt="img"></a></p>
<h4 id="3-HTTPS-采用的加密方式"><a href="#3-HTTPS-采用的加密方式" class="headerlink" title="3. HTTPS 采用的加密方式"></a>3. HTTPS 采用的加密方式</h4><p>上面提到对称密钥加密方式的传输效率更高，但是无法安全地将密钥 Secret Key 传输给通信方。而非对称密钥加密方式可以保证传输的安全性，因此我们可以利用非对称密钥加密方式将 Secret Key 传输给通信方。HTTPS 采用混合的加密机制，正是利用了上面提到的方案：</p>
<ul>
<li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性;</li>
<li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key）</li>
</ul>
<p><a href="https://camo.githubusercontent.com/34cc60de23ad2228d3877e97ed1605fa9b858dda8610de5e3201144e3b35983a/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f486f772d48545450532d576f726b732e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/34cc60de23ad2228d3877e97ed1605fa9b858dda8610de5e3201144e3b35983a/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f486f772d48545450532d576f726b732e706e67" alt="img"></a></p>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>通过使用 <strong>证书</strong> 来对通信方进行认证。</p>
<p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p>
<p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p>
<p>进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。</p>
<p><a href="https://camo.githubusercontent.com/f4df5d88f1f914fc81325b00151cefea3994c36827fd18c2a1a5e9f7582e4746/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f323031372d30362d31312d63612e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/f4df5d88f1f914fc81325b00151cefea3994c36827fd18c2a1a5e9f7582e4746/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f323031372d30362d31312d63612e706e67" alt="img"></a></p>
<h3 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h3><p>SSL 提供报文摘要功能来进行完整性保护。</p>
<p>HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</p>
<p>HTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。</p>
<h3 id="HTTPS-的缺点"><a href="#HTTPS-的缺点" class="headerlink" title="HTTPS 的缺点"></a>HTTPS 的缺点</h3><ul>
<li>因为需要进行加密解密等过程，因此速度会更慢；</li>
<li>需要支付证书授权的高额费用。</li>
</ul>
<h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h2><h3 id="HTTP-1-x-缺陷"><a href="#HTTP-1-x-缺陷" class="headerlink" title="HTTP/1.x 缺陷"></a>HTTP/1.x 缺陷</h3><p>HTTP/1.x 实现简单是以牺牲性能为代价的：</p>
<ul>
<li>客户端需要使用多个连接才能实现并发和缩短延迟；</li>
<li>不会压缩请求和响应首部，从而导致不必要的网络流量；</li>
<li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。</li>
</ul>
<h3 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h3><p>HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。</p>
<p><a href="https://camo.githubusercontent.com/c96cfc774e63ed7fc74c55454a55212d64bc01ebdd0650cb95e68f944b88eae0/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38366536613931642d613238352d343437612d393334352d6335343834623864306334372e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/c96cfc774e63ed7fc74c55454a55212d64bc01ebdd0650cb95e68f944b88eae0/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38366536613931642d613238352d343437612d393334352d6335343834623864306334372e706e67" alt="img"></a></p>
<p>在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。</p>
<ul>
<li>一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。</li>
<li>消息（Message）是与逻辑请求或响应对应的完整的一系列帧。</li>
<li>帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/61880e95d65b2cf50737eca087e7a62ecff552c7e0f0c9a66b928488968b98a6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61663139386461312d323438302d343034332d623037662d6133623931613838623831352e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/61880e95d65b2cf50737eca087e7a62ecff552c7e0f0c9a66b928488968b98a6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f61663139386461312d323438302d343034332d623037662d6133623931613838623831352e706e67" alt="img"></a></p>
<h3 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h3><p>HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。</p>
<p><a href="https://camo.githubusercontent.com/4d8039e63487da06628fab7284a7fe61f58e94d46184bc510b44ab95a43d82be/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65336631363537632d383066632d346466612d393634332d6266353161626432303163362e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/4d8039e63487da06628fab7284a7fe61f58e94d46184bc510b44ab95a43d82be/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f65336631363537632d383066632d346466612d393634332d6266353161626432303163362e706e67" alt="img"></a></p>
<h3 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h3><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。</p>
<p>HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</p>
<p>不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</p>
<p><a href="https://camo.githubusercontent.com/c80b3a5fca38bd0d74330acae8f6bd351a22185ec0ed50b639a461a096eedbe1/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f5f75344530425f75384637442e706e67" target="_blank" rel="noopener"><img data-src="https://camo.githubusercontent.com/c80b3a5fca38bd0d74330acae8f6bd351a22185ec0ed50b639a461a096eedbe1/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f5f75344530425f75384637442e706e67" alt="img"></a></p>
<h2 id="HTTP-1-1-新特性"><a href="#HTTP-1-1-新特性" class="headerlink" title="HTTP/1.1 新特性"></a>HTTP/1.1 新特性</h2><p>详细内容请见上文</p>
<ul>
<li>默认是长连接</li>
<li>支持流水线</li>
<li>支持同时打开多个 TCP 连接</li>
<li>支持虚拟主机</li>
<li>新增状态码 100</li>
<li>支持分块传输编码</li>
<li>新增缓存处理指令 max-age</li>
</ul>
<h2 id="GET-和-POST-比较"><a href="#GET-和-POST-比较" class="headerlink" title="GET 和 POST 比较"></a>GET 和 POST 比较</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>GET 用于获取资源，而 POST 用于传输实体主体。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。</p>
<p>因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 <code>中文</code> 会转换为 <code>%E4%B8%AD%E6%96%87</code>，而空格会转换为 <code>%20</code>。POST 参数支持标准字符集。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;test&#x2F;demo_form.asp?name1&#x3D;value1&amp;name2&#x3D;value2 HTTP&#x2F;1.1</span><br><span class="line">POST &#x2F;test&#x2F;demo_form.asp HTTP&#x2F;1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1&#x3D;value1&amp;name2&#x3D;value2</span><br></pre></td></tr></table></figure>

<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p>
<p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p>
<p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p>
<p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p>
<h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p>
<p>所有的安全方法也都是幂等的。</p>
<p>在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</p>
<p>GET /pageX HTTP/1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br><span class="line">GET &#x2F;pageX HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<p>POST /add_row HTTP/1.1 不是幂等的，如果调用多次，就会增加多行记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 1nd row</span><br><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 2nd row</span><br><span class="line">POST &#x2F;add_row HTTP&#x2F;1.1   -&gt; Adds a 3rd row</span><br></pre></td></tr></table></figure>

<p>DELETE /idX/delete HTTP/1.1 是幂等的，即使不同的请求接收到的状态码不一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 200 if idX exists</span><br><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 404 as it just got deleted</span><br><span class="line">DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1   -&gt; Returns 404</span><br></pre></td></tr></table></figure>

<h3 id="可缓存"><a href="#可缓存" class="headerlink" title="可缓存"></a>可缓存</h3><p>如果要对响应进行缓存，需要满足以下条件：</p>
<ul>
<li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。</li>
<li>响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。</li>
<li>响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li>
</ul>
<h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：</p>
<blockquote>
<p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p>
</blockquote>
<ul>
<li>在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</li>
<li>而 GET 方法 Header 和 Data 会一起发送。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>上野宣. 图解 HTTP[M]. 人民邮电出版社, 2014.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener">MDN : HTTP</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noopener">HTTP/2 简介</a></li>
<li><a href="http://php.net/manual/zh/function.htmlspecialchars.php" target="_blank" rel="noopener">htmlspecialchars</a></li>
<li><a href="http://java2db.com/java-io/how-to-get-and-the-difference-between-file-uri-and-url-in-java" target="_blank" rel="noopener">Difference between file URI and URL in java</a></li>
<li><a href="https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement" target="_blank" rel="noopener">How to Fix SQL Injection Using Java PreparedStatement &amp; CallableStatement</a></li>
<li><a href="https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="noopener">浅谈 HTTP 中 Get 与 Post 的区别</a></li>
<li><a href="https://www.webdancers.com/are-http-and-www-necesary/" target="_blank" rel="noopener">Are http:// and www really necessary?</a></li>
<li><a href="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="noopener">HTTP (HyperText Transfer Protocol)</a></li>
<li><a href="https://www.igvita.com/2011/12/01/web-vpn-secure-proxies-with-spdy-chrome/" target="_blank" rel="noopener">Web-VPN: Secure Proxies with SPDY &amp; Chrome</a></li>
<li><a href="http://en.wikipedia.org/wiki/File:HTTP_persistent_connection.svg" target="_blank" rel="noopener">File:HTTP persistent connection.svg</a></li>
<li><a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="noopener">Proxy server</a></li>
<li><a href="https://www.x-cart.com/blog/what-is-https-and-ssl.html" target="_blank" rel="noopener">What Is This HTTPS/SSL Thing And Why Should You Care?</a></li>
<li><a href="https://securebox.comodo.com/ssl-sniffing/ssl-offloading/" target="_blank" rel="noopener">What is SSL Offloading?</a></li>
<li><a href="https://docs.oracle.com/cd/E19424-01/820-4811/6ng8i26bn/index.html" target="_blank" rel="noopener">Sun Directory Server Enterprise Edition 7.0 Reference - Key Encryption</a></li>
<li><a href="https://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication" target="_blank" rel="noopener">An Introduction to Mutual SSL Authentication</a></li>
<li><a href="https://danielmiessler.com/study/url-uri/" target="_blank" rel="noopener">The Difference Between URLs and URIs</a></li>
<li><a href="https://juejin.im/entry/5766c29d6be3ff006a31b84e#comment" target="_blank" rel="noopener">Cookie 与 Session 的区别</a></li>
<li><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="noopener">COOKIE 和 SESSION 有什么区别</a></li>
<li><a href="https://harttle.land/2015/08/10/cookie-session.html" target="_blank" rel="noopener">Cookie/Session 的机制与安全</a></li>
<li><a href="https://shijianan.com/2017/06/11/https/" target="_blank" rel="noopener">HTTPS 证书原理</a></li>
<li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn" target="_blank" rel="noopener">What is the difference between a URI, a URL and a URN?</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a></li>
<li><a href="https://blog.josephscott.org/2009/08/27/xmlhttprequest-xhr-uses-multiple-packets-for-http-post/" target="_blank" rel="noopener">XMLHttpRequest (XHR) Uses Multiple Packets for HTTP POST?</a></li>
<li><a href="https://www.ssl2buy.com/wiki/symmetric-vs-asymmetric-encryption-what-are-differences" target="_blank" rel="noopener">Symmetric vs. Asymmetric Encryption – What are differences?</a></li>
<li><a href="https://www.kancloud.cn/digest/web-performance-http2" target="_blank" rel="noopener">Web 性能优化与 HTTP/2</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noopener">HTTP/2 简介</a></li>
</ul>
<hr>
<p>转载自GitHub:</p>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md" target="_blank" rel="noopener">CyC2018 - CS-Notes</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP/HTTPS</tag>
        <tag>传输协议</tag>
        <tag>SSL</tag>
        <tag>cookie/session</tag>
        <tag>RESTful Api</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS 为什么是安全的</title>
    <url>/2019/12/15/why-https-security/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>在之前《HTTP 与 HTTPS 的区别》中，对比了<code>HTTP/HTTPS</code>的不同，以及<code>HTTP/HTTPS</code>是如何<code>TCP</code>握手的，那么HTTPS为什么是安全的？</p>
<p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息。</p>
<p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了<code>SSL</code>协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>
<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>在谈论 HTTPS 协议之前，先来回顾一下 HTTP 协议的概念。</p>
<h3 id="HTTP-协议介绍"><a href="#HTTP-协议介绍" class="headerlink" title="HTTP 协议介绍"></a>HTTP 协议介绍</h3><p>HTTP 协议是一种基于文本的传输协议，它位于 OSI 网络模型中的<strong><code>应用层</code></strong>。</p>
<img data-src="/2019/12/15/why-https-security/osi-7layers.png" class>

<a id="more"></a>

<p>HTTP 协议是通过客户端和服务器的请求应答来进行通讯，目前协议由之前的 <a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RFC 2616</a> 拆分成立六个单独的协议说明（<a href="https://tools.ietf.org/html/rfc7230" target="_blank" rel="noopener">RFC 7230</a>、<a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="noopener">RFC 7231</a>、<a href="https://tools.ietf.org/html/rfc7232" target="_blank" rel="noopener">RFC 7232</a>、<a href="https://tools.ietf.org/html/rfc7233" target="_blank" rel="noopener">RFC 7233</a>、<a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="noopener">RFC 7234</a>、<a href="https://tools.ietf.org/html/rfc7235" target="_blank" rel="noopener">RFC 7235</a>），通讯报文如下：</p>
<ul>
<li>请求</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.baidu.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.baidu.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span>: 7</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</span><br><span class="line"></span><br><span class="line">wd=HTTP</span><br></pre></td></tr></table></figure>

<ul>
<li>响应</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Date</span>: Thu, 14 Feb 2019 07:23:49 GMT</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"></span><br><span class="line">&lt;html&gt;...&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<!--more-->

<h3 id="HTTP-中间人攻击"><a href="#HTTP-中间人攻击" class="headerlink" title="HTTP 中间人攻击"></a>HTTP 中间人攻击</h3><p>HTTP 协议使用起来确实非常的方便，但是它存在一个致命的缺点：<code>不安全</code>。</p>
<p>我们知道 HTTP 协议中的报文都是以明文的方式进行传输，不做任何加密，这样会导致什么问题呢？下面来举个例子：</p>
<ol>
<li>小明在 JAVA 贴吧发帖，内容为<code>我爱JAVA</code>：<img data-src="/2019/12/15/why-https-security/why-https-security-1.png" class></li>
<li>被中间人进行攻击，内容修改为<code>我爱PHP</code><img data-src="/2019/12/15/why-https-security/why-https-security-2.png" class></li>
<li>小明被群嘲(手动狗头)</li>
</ol>
<p>可以看到在 HTTP 传输过程中，中间人能看到并且修改 HTTP 通讯中所有的请求和响应内容，所以使用 HTTP 是非常的不安全的。</p>
<h3 id="防止中间人攻击"><a href="#防止中间人攻击" class="headerlink" title="防止中间人攻击"></a>防止中间人攻击</h3><p>这个时候可能就有人想到了，既然内容是明文那我使用<code>对称加密</code>的方式将报文加密这样中间人不就看不到明文了吗，于是如下改造：</p>
<ol>
<li>双方约定加密方式<img data-src="/2019/12/15/why-https-security/why-https-security-3.png" class></li>
<li>使用 AES 加密报文<img data-src="/2019/12/15/why-https-security/why-https-security-4.png" class>

</li>
</ol>
<p>这样看似中间人获取不到明文信息了，但其实在通讯过程中还是会以明文的方式暴露加密方式和秘钥，如果第一次通信被拦截到了，那么秘钥就会泄露给中间人，中间人仍然可以解密后续的通信：</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-5.png" class>

<p>那么对于这种情况，我们肯定就会考虑能不能将秘钥进行加密不让中间人看到呢？答案是有的，采用<code>非对称加密</code>，我们可以通过 RSA 算法来实现。</p>
<p>在约定加密方式的时候由服务器生成一对<code>公私钥</code>，服务器将<code>公钥</code>返回给客户端，客户端本地生成一串秘钥(<code>AES_KEY</code>)用于<code>对称加密</code>，并通过服务器发送的<code>公钥</code>进行加密得到(<code>AES_KEY_SECRET</code>)，之后返回给服务端，服务端通过<code>私钥</code>将客户端发送的<code>AES_KEY_SECRET</code>进行解密得到<code>AEK_KEY</code>,最后客户端和服务器通过<code>AEK_KEY</code>进行报文的加密通讯，改造如下：</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-6.png" class>

<p>可以看到这种情况下中间人是窃取不到用于<code>AES加密</code>的秘钥，所以对于后续的通讯是肯定无法进行解密了，那么这样做就是绝对安全了吗？</p>
<p>所谓道高一尺魔高一丈，中间人为了对应这种加密方法又想出了一个新的破解方案，既然拿不到<code>AES_KEY</code>，那我就把自己模拟成一个客户端和服务器端的结合体，在<code>用户-&gt;中间人</code>的过程中中间人模拟服务器的行为，这样可以拿到用户请求的明文，在<code>中间人-&gt;服务器</code>的过程中中间人模拟客户端行为，这样可以拿到服务器响应的明文，以此来进行中间人攻击：</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-7.png" class>

<p>这一次通信再次被中间人截获，中间人自己也伪造了一对公私钥，并将公钥发送给用户以此来窃取客户端生成的<code>AES_KEY</code>，在拿到<code>AES_KEY</code>之后就能轻松的进行解密了。</p>
<p>中间人这样为所欲为，就没有办法制裁下吗，当然有啊，接下来我们看看 HTTPS 是怎么解决通讯安全问题的。</p>
<h2 id="HTTPS-协议"><a href="#HTTPS-协议" class="headerlink" title="HTTPS 协议"></a>HTTPS 协议</h2><h3 id="HTTPS-简介"><a href="#HTTPS-简介" class="headerlink" title="HTTPS 简介"></a>HTTPS 简介</h3><p>HTTPS 其实是<code>SSL</code>+<code>HTTP</code>的简称,当然现在<code>SSL</code>基本已经被<code>TLS</code>取代了，不过接下来我们还是统一以<code>SSL</code>作为简称，<code>SSL</code>协议其实不止是应用在<code>HTTP</code>协议上，还在应用在各种应用层协议上，例如：<code>FTP</code>、<code>WebSocket</code>。</p>
<p>其实<code>SSL</code>协议大致就和上一节<code>非对称加密</code>的性质一样，握手的过程中主要也是为了交换秘钥，然后再通讯过程中使用<code>对称加密</code>进行通讯，大概流程如下：</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-8.png" class>

<p>这里我只是画了个示意图，其实真正的 SSL 握手会比这个复杂的多，但是性质还是差不多，而且我们这里需要关注的重点在于 HTTPS 是如何防止中间人攻击的。</p>
<p>通过上图可以观察到，服务器是通过 SSL 证书来传递<code>公钥</code>，客户端会对 SSL 证书进行验证，其中证书认证体系就是确保<code>SSL</code>安全的关键，接下来我们就来讲解下<code>CA 认证体系</code>，看看它是如何防止中间人攻击的。</p>
<h3 id="CA-认证体系"><a href="#CA-认证体系" class="headerlink" title="CA 认证体系"></a>CA 认证体系</h3><p>上一节我们看到客户端需要对服务器返回的 SSL 证书进行校验，那么客户端是如何校验服务器 SSL 证书的安全性呢。</p>
<ul>
<li><p>权威认证机构<br>在 CA 认证体系中，所有的证书都是由权威机构来颁发，而权威机构的 CA 证书都是已经在操作系统中内置的，我们把这些证书称之为<code>CA根证书</code>：</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-9.png" class>
</li>
<li><p>签发证书</p>
<p>我们的应用服务器如果想要使用 SSL 的话，需要通过权威认证机构来签发<code>CA证书</code>，我们将服务器生成的公钥和站点相关信息发送给<code>CA签发机构</code>，再由<code>CA签发机构</code>通过服务器发送的相关信息用<code>CA签发机构</code>进行加签，由此得到我们应用服务器的证书，证书会对应的生成证书内容的<code>签名</code>，并将该<code>签名</code>使用<code>CA签发机构</code>的私钥进行加密得到<code>证书指纹</code>，并且与上级证书生成关系链。<br>这里我们把百度的证书下载下来看看：</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-10.png" class>
<img data-src="/2019/12/15/why-https-security/why-https-security-11.png" class>

<p>可以看到百度是受信于<code>GlobalSign G2</code>，同样的<code>GlobalSign G2</code>是受信于<code>GlobalSign R1</code>，当客户端(浏览器)做证书校验时，会一级一级的向上做检查，直到最后的<code>根证书</code>，如果没有问题说明<code>服务器证书</code>是可以被信任的。</p>
</li>
<li><p>如何验证服务器证书<br>那么客户端(浏览器)又是如何对<code>服务器证书</code>做校验的呢，首先会通过层级关系找到上级证书，通过上级证书里的<code>公钥</code>来对服务器的<code>证书指纹</code>进行解密得到<code>签名(sign1)</code>，再通过签名算法算出服务器证书的<code>签名(sign2)</code>，通过对比<code>sign1</code>和<code>sign2</code>，如果相等就说明证书是没有被<code>篡改</code>也不是<code>伪造</code>的。</p>
<img data-src="/2019/12/15/why-https-security/why-https-security-12.png" class>

<blockquote>
<p>这里有趣的是，证书校验用的 RSA 是通过私钥加密证书签名，公钥解密来巧妙的验证证书有效性。</p>
</blockquote>
</li>
</ul>
<p>这样通过证书的认证体系，我们就可以避免了中间人窃取<code>AES_KEY</code>从而发起拦截和修改 HTTP 通讯的报文。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先先通过对 HTTP 中间人攻击的来了解到 HTTP 为什么是不安全的，然后再从安全攻防的技术演变一直到 HTTPS 的原理概括，希望能让大家对 HTTPS 有个更深刻的了解。</p>
<hr>
<p>转载自：</p>
<p><a href="https://segmentfault.com/a/1190000023936425" target="_blank" rel="noopener">mokeyWie - 为什么HTTPS是安全的</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP/HTTPS</tag>
        <tag>传输协议</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 与 HTTPS 的区别</title>
    <url>/2019/12/03/http-https/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>HTTP</strong>（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p>
<p>HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 <strong><code>http://</code></strong> 打头的都是标准 HTTP 服务。</p>
<p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
<p><strong>HTTPS</strong>（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>
<p>HTTPS 默认工作在 TCP 协议443端口，它的工作流程一般如以下方式：</p>
<ul>
<li>1、TCP 三次同步握手</li>
<li>2、客户端验证服务器数字证书</li>
<li>3、DH 算法协商对称加密算法的密钥、hash 算法的密钥</li>
<li>4、SSL 安全加密隧道协商完成</li>
<li>5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的hash算法进行数据完整性保护，保证数据不被篡改。</li>
</ul>
<a id="more"></a>

<h1 id="HTTP-与-HTTPS-区别"><a href="#HTTP-与-HTTPS-区别" class="headerlink" title="HTTP 与 HTTPS 区别"></a>HTTP 与 HTTPS 区别</h1><ul>
<li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li>
<li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li>
<li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li>
<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li>
<li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li>
</ul>
<h1 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h1><p>在TCP/IP协议中，TCP协议通过三次握手建立一个可靠的连接</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2018/09/05234233-eed6ddcba93c42be8847e98d6da62802.jpg" alt="img"></p>
<ul>
<li>第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号Synchronize Sequence Numbers），syn=j，客户端进入 SYN_SEND 状态等待服务器确认</li>
<li>第二次握手：服务器接收客户端syn包并确认（ack=j+1），同时向客户端发送一个 SYN包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态</li>
<li>第三次握手：第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手</li>
</ul>
<p>简化：</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2018/09/dffdff.png" alt="img"></p>
<h1 id="HTTPS-的工作原理"><a href="#HTTPS-的工作原理" class="headerlink" title="HTTPS 的工作原理"></a>HTTPS 的工作原理</h1><p>我们都知道 HTTPS 能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用 HTTPS 协议。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2018/09/https-intro.png" alt="img"></p>
<h2 id="1、客户端发起-HTTPS-请求"><a href="#1、客户端发起-HTTPS-请求" class="headerlink" title="1、客户端发起 HTTPS 请求"></a><strong>1、客户端发起 HTTPS 请求</strong></h2><p>这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。</p>
<h2 id="2、服务端的配置"><a href="#2、服务端的配置" class="headerlink" title="2、服务端的配置"></a><strong>2、服务端的配置</strong></h2><p>采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。</p>
<p>这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>
<h2 id="3、传送证书"><a href="#3、传送证书" class="headerlink" title="3、传送证书"></a><strong>3、传送证书</strong></h2><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p>
<h2 id="4、客户端解析证书"><a href="#4、客户端解析证书" class="headerlink" title="4、客户端解析证书"></a><strong>4、客户端解析证书</strong></h2><p>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。</p>
<p>如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>
<h2 id="5、传送加密信息"><a href="#5、传送加密信息" class="headerlink" title="5、传送加密信息"></a><strong>5、传送加密信息</strong></h2><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>
<h2 id="6、服务端解密信息"><a href="#6、服务端解密信息" class="headerlink" title="6、服务端解密信息"></a><strong>6、服务端解密信息</strong></h2><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>
<h2 id="7、传输加密后的信息"><a href="#7、传输加密后的信息" class="headerlink" title="7、传输加密后的信息"></a><strong>7、传输加密后的信息</strong></h2><p>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</p>
<h2 id="8、客户端解密信息"><a href="#8、客户端解密信息" class="headerlink" title="8、客户端解密信息"></a><strong>8、客户端解密信息</strong></h2><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://www.runoob.com/w3cnote/http-vs-https.html" target="_blank" rel="noopener">菜鸟教程 - HTTP 与 HTTPS 的区别</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP/HTTPS</tag>
        <tag>传输协议</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数中参数 * 和 ** 的区别</title>
    <url>/2019/11/26/python-single-double-asterisk/</url>
    <content><![CDATA[<p>在 Python 的函数中经常能看到输入的参数前面有一个或者两个星号，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(param1, *param2)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(param1, **param2)</span>:</span></span><br></pre></td></tr></table></figure>

<p>这两种用法其实都是用来将任意个数的参数导入到 Python 函数中。</p>
<a id="more"></a>

<h3 id="单星号（-）：-agrs"><a href="#单星号（-）：-agrs" class="headerlink" title="单星号（*）：*agrs"></a><strong>单星号（*）：*agrs</strong></h3><p>将所有参数以<code>元组(tuple)</code>的形式导入：</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(param1, *param2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (param1)</span><br><span class="line">    <span class="keyword">print</span> (param2)</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="双星号（-）：-kwargs"><a href="#双星号（-）：-kwargs" class="headerlink" title="双星号（*）：*kwargs"></a><strong>双星号（*）：*kwargs</strong></h3><p>双星号（**）将参数以<code>字典(dict)</code>的形式导入:</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(param1, **param2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (param1)</span><br><span class="line">    <span class="keyword">print</span> (param2)</span><br><span class="line">bar(<span class="number">1</span>,a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">&#123;&#39;a&#39;: 2, &#39;b&#39;: 3&#125;</span><br></pre></td></tr></table></figure>

<p>此外，单星号的另一个用法是解压参数列表：</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(runoob_1, runoob_2)</span>:</span></span><br><span class="line">    print(runoob_1, runoob_2)</span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">foo(*l)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>当然这两个用法可以同时出现在一个函数中：</p>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=<span class="number">10</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (a)</span><br><span class="line">    <span class="keyword">print</span> (b)</span><br><span class="line">    <span class="keyword">print</span> (args)</span><br><span class="line">    <span class="keyword">print</span> (kwargs)</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, e=<span class="number">5</span>, f=<span class="number">6</span>, g=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">'e'</span>: <span class="number">5</span>, <span class="string">'f'</span>: <span class="number">6</span>, <span class="string">'g'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>基础原理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Git原理及实践</title>
    <url>/2019/11/12/git-basis/</url>
    <content><![CDATA[<h1 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么?"></a>Git是什么?</h1><h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><p>版本控制是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理，是软件配置管理的核心思想之一。</p>
<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h2><p><img data-src="/picture/git_logo.png" alt="avatar"><br>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS， Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<a id="more"></a>
<h2 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h2><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。<br>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。<br>Git 与 SVN 区别点：<br>1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。<br>2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。<br>3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。<br>4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。<br>5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>
<h1 id="Git的理论基础"><a href="#Git的理论基础" class="headerlink" title="Git的理论基础"></a>Git的理论基础</h1><ul>
<li>Git的四大工作区域</li>
<li>Git的工作流程</li>
<li>Git文件的四种状态</li>
<li>Git的工作原理</li>
</ul>
<h2 id="Git的四大工作区域"><a href="#Git的四大工作区域" class="headerlink" title="Git的四大工作区域"></a>Git的四大工作区域</h2><p><img data-src="/picture/git_4_workspace.png" alt="avatar"></p>
<ul>
<li><kbd style="color:#ff7600">Workspace</kbd>：你电脑本地看到的文件和目录，在Git的版本控制下，构成了工作区。</li>
<li><kbd style="color:#ff7600">Index/Stage</kbd>：暂存区，一般存放在 .git目录下，即.git/index，它又叫待提交更新区，用于临时存放你未提交的改动。比如，你执行git add，这些改动就添加到这个区域啦。</li>
<li><kbd style="color:#ff7600">Repository</kbd>：本地仓库，你执行git clone 地址，就是把远程仓库克隆到本地仓库。它是一个存放在本地的版本库，其中HEAD指向最新放入仓库的版本。当你执行git commit，文件改动就到本地仓库来了~</li>
<li><kbd style="color:#ff7600">Remote</kbd>：远程仓库，就是类似github，码云等网站所提供的仓库，可以理解为远程数据交换的仓库~</li>
</ul>
<h2 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h2><p><img data-src="/picture/git_work_process.png" alt="avatar"></p>
<h2 id="Git文件的四种状态"><a href="#Git文件的四种状态" class="headerlink" title="Git文件的四种状态"></a>Git文件的四种状态</h2><p>根据一个文件是否已加入版本控制，可以把文件状态分为：Tracked(已跟踪)和Untracked(未跟踪)，而tracked(已跟踪)又包括三种工作状态：Unmodified，Modified，Staged</p>
<p><img data-src="/picture/git_file_status.png" alt="avatar"></p>
<ul>
<li>Untracked: 文件还没有加入到git库，还没参与版本控制，即未跟踪状态。这时候的文件，通过git add 状态，可以变为Staged状态</li>
<li>Unmodified：文件已经加入git库， 但是呢，还没修改， 就是说版本库中的文件快照内容与文件夹中还完全一致。修改变为Modified. 可用git remove移出版本库， 变为Untracked。</li>
<li>Modified：文件被修改了，就进入modified状态啦，通过stage命令进入staged状态</li>
<li>staged：暂存状态. 执行git commit将修改同步到库中，这时库中的文件和本地文件变为一致，为Unmodified状态.</li>
</ul>
<h2 id="Git的工作原理"><a href="#Git的工作原理" class="headerlink" title="Git的工作原理"></a>Git的工作原理</h2><p><img data-src="/picture/git_work_principle.png" alt="avatar"></p>
<h1 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h1><h2 id="Git命令流程"><a href="#Git命令流程" class="headerlink" title="Git命令流程"></a>Git命令流程</h2><p>以下是命令使用的大致流程<br><img data-src="/picture/git_use_detail.png" alt="avatar"></p>
<h2 id="Git常用命令集"><a href="#Git常用命令集" class="headerlink" title="Git常用命令集"></a>Git常用命令集</h2><p>遇事不决查文档，<kbd style="color:#ff7600">git -help</kbd> + <kbd style="color:#ff7600">git command -help</kbd></p>
<h3 id="git-init-初始化仓库"><a href="#git-init-初始化仓库" class="headerlink" title="git init -初始化仓库"></a>git init -初始化仓库</h3><h3 id="git-clone-url-克隆远程版本库"><a href="#git-clone-url-克隆远程版本库" class="headerlink" title="git clone url -克隆远程版本库"></a>git clone url -克隆远程版本库</h3><h3 id="git-remote-add-newRemote-url-添加另一个远程仓库"><a href="#git-remote-add-newRemote-url-添加另一个远程仓库" class="headerlink" title="git remote add newRemote url -添加另一个远程仓库"></a>git remote add newRemote url -添加另一个远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] -添加仓库的高级版</span><br><span class="line">git remote [-v | --verbose] -查看远程所有仓库</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt; -重命名仓库名</span><br><span class="line">git remote remove &lt;name&gt; -移除本地绑定的远程仓库</span><br></pre></td></tr></table></figure>

<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b newBranch  [origin&#x2F;newBranch ] 创建开发分支dev，并切换到该分支下在上面基础上[并关联远程分支]</span><br><span class="line">git checkout [file]  丢弃某个文件file(还未add进暂存区)</span><br><span class="line">git checkout .  丢弃所有文件(还未add进暂存区)(已经add了则用reset)</span><br></pre></td></tr></table></figure>

<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .	添加当前目录的所有文件到暂存区</span><br><span class="line">git add [dir]	添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [file1]	添加指定文件到暂存区</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m [message] 提交暂存区到仓库区，message为说明信息</span><br><span class="line">git commit [file1] -m [message] 提交暂存区的指定文件到本地仓库</span><br><span class="line">git commit --amend -m [message] 使用一次新的commit，替代上一次提交</span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log  查看提交历史</span><br><span class="line">git log --oneline 以精简模式显示查看提交历史</span><br><span class="line">git log -p &lt;file&gt; 查看指定文件的提交历史</span><br><span class="line">git blame &lt;file&gt; 一列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>

<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff 显示暂存区和工作区的差异</span><br><span class="line">git diff filepath   filepath路径文件中，工作区与暂存区的比较差异</span><br><span class="line">git diff HEAD filepath 工作区与HEAD ( 当前工作分支)的比较差异</span><br><span class="line">git diff branchName filepath 当前分支的文件与branchName分支的文件的比较差异</span><br><span class="line">git diff commitId filepath 与某一次提交的比较差异</span><br></pre></td></tr></table></figure>

<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status  查看当前工作区暂存区变动</span><br><span class="line">git status -s  查看当前工作区暂存区变动，概要信息</span><br><span class="line">git status  --show-stash 查询工作区中是否有stash（暂存的文件）</span><br></pre></td></tr></table></figure>

<h3 id="git-pull-git-fetch"><a href="#git-pull-git-fetch" class="headerlink" title="git pull/git fetch"></a>git pull/git fetch</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull  拉取远程仓库所有分支更新并合并到本地分支。</span><br><span class="line">git pull origin master 将远程master分支合并到当前本地分支</span><br><span class="line">git pull origin master:master 将远程master分支合并到当前本地master分支，冒号后面表示本地分支</span><br><span class="line">git fetch --all  拉取所有远端的最新代码</span><br><span class="line">git fetch origin master 拉取远程最新master分支代码</span><br></pre></td></tr></table></figure>

<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master 将本地分支的更新全部推送到远程仓库master分支。</span><br><span class="line">git push origin -d &lt;branchname&gt;   删除远程branchname分支</span><br><span class="line">git push --tags 推送所有标签</span><br></pre></td></tr></table></figure>

<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p><em>使用模式：</em><br><img data-src="/picture/git_reset.png" alt="avatar"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD --file 回退暂存区里的某个文件，回退到当前版本工作区状态</span><br><span class="line">git reset –-soft 目标版本号 可以把版本库上的提交回退到暂存区，修改记录保留</span><br><span class="line">git reset –-mixed 目标版本号 可以把版本库上的提交回退到工作区，修改记录保留</span><br><span class="line">git reset –-hard  可以把版本库上的提交彻底回退，修改的记录全部revert。</span><br></pre></td></tr></table></figure>
<p>代码git add到暂存区，并未commit提交，如何回退：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD file 取消暂存</span><br><span class="line">git checkout file 撤销修改</span><br></pre></td></tr></table></figure>

<h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name  &quot;username&quot;</span><br><span class="line">git config --global user.email  &quot;username&quot;</span><br></pre></td></tr></table></figure>

<h4 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config –system –unset credential.helper</span><br><span class="line">git config –global http.emptyAuth true</span><br></pre></td></tr></table></figure>

<h4 id="Windows凭据管理-git-密码"><a href="#Windows凭据管理-git-密码" class="headerlink" title="Windows凭据管理 git 密码"></a>Windows凭据管理 git 密码</h4><p>进入控制面板 -&gt; 用户账号 -&gt; 凭据管理器 -&gt; windows凭据 -&gt; 普通凭据，在里面找到对应git域名，点开编辑密码，更新为最新密码之后就可以正常操作了。</p>
<hr>
<p>参考链接：<br><a href="https://git-scm.com/docs" target="_blank" rel="noopener">Git Reference</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git Book</a>  </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>平平淡淡的一天</title>
    <url>/2019/10/19/first-blog/</url>
    <content><![CDATA[<h1 id="我的一天："><a href="#我的一天：" class="headerlink" title="我的一天：  "></a>我的一天：  </h1><hr>
<p>上午：改bug  </p>
<hr>
<p>下午：<del><strong>摸摸鱼</strong></del> 远程学习</p>
<hr>
<p>晚上：打FF14  </p>
<hr>
<p><img data-src="/picture/first.jpg" alt="avatar"></p>
<hr>
]]></content>
      <categories>
        <category>摸鱼随笔</category>
      </categories>
      <tags>
        <tag>第一条博客</tag>
        <tag>非技术</tag>
      </tags>
  </entry>
</search>
