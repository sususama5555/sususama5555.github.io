<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Zabbix安装与部署</title>
    <url>/2020/12/01/zabbix-install-deploy/</url>
    <content><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>最近工作中和<code>Zabbix</code>打了不少交道，大概分为两个用途。</p>
<p>一种是对接它的API接口，例如创建账号、媒介、触发器、动作等，这种比较简单，照着API文档来就行了，这里不多赘述。</p>
<p>另一种就是，使用Python脚本创建一套Zabbix告警推送的流程，将超过阈值的Zabbix告警按照指定的流程和动作推送到告警中心，而告警中心使用Zabbix作为其中一个告警源，不断拉取并且分发告警。这应该属于监控、告警等最常见的自动化运维的场景了，我对此也比较感兴趣，所有想从Zabbix较为基础的单机版安装及部署学习，也就有了这篇文章。</p>
<p>事先已在本地开发环境的虚拟机中安装与部署成功，现在期望将Zabbix部署到阿里云的机器上。</p>
<p><strong><em>注意：安装部署时，由于环境和版本的问题也踩了不少坑，希望能给读者一些启示。</em></strong></p>
<a id="more"></a>

<blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1></blockquote>
<p>这里我们按照官方文档的指引进行安装</p>
<p>官方地址：<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">https://www.zabbix.com/download</a></p>
<p>由于本人的阿里云服务器的预先环境为<code>CentOS 7</code> + <code>MySQL</code>+ <code>Nginx</code>，所以这里不再折腾，直接使用这一套最常用的配置。</p>
<p>由于Zabbix 5.2是最新版本，安装指引和资料也比较少，处于稳定考虑，最终选择<code>Zaabix 5.0 LTS</code>版本。</p>
<p>PS:工作接触的5.0和5.2都有。</p>
<h2 id="安装Zabbix-yum-源"><a href="#安装Zabbix-yum-源" class="headerlink" title="安装Zabbix yum 源"></a>安装Zabbix yum 源</h2><p>官方文档：<a href="https://www.zabbix.com/documentation/5.0/manual/installation/install_from_packages" target="_blank" rel="noopener">Documentation</a></p>
<h3 id="官方yum源"><a href="#官方yum源" class="headerlink" title="官方yum源"></a>官方yum源</h3><p>以下是官方推荐的Zabbix yum源，不过在国内使用比较麻烦，下载速度慢且经常连接超时。所以推荐使用阿里云的Zabbix yum 源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<h3 id="阿里云yum源"><a href="#阿里云yum源" class="headerlink" title="阿里云yum源"></a>阿里云yum源</h3><p>下载地址：<a href="https://mirrors.aliyun.com/zabbix/" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<p>打开/etc/yum.repos.d/zabbix.repo，把所有的“<a href="https://repo.zabbix.com/zabbix/”" target="_blank" rel="noopener">https://repo.zabbix.com/zabbix/”</a> 改成 “<a href="https://mirrors.aliyun.com/zabbix/”" target="_blank" rel="noopener">https://mirrors.aliyun.com/zabbix/”</a> （除了zabbix-non-supported，其他的分支的URL都有两个zabbix）</p>
<h2 id="安装Zabbix-server-和agent"><a href="#安装Zabbix-server-和agent" class="headerlink" title="安装Zabbix server 和agent"></a>安装Zabbix server 和agent</h2><p>换了yum源应该安装很快，使用 -y 跳过选择</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zabbix-server-mysql zabbix-agent</span><br></pre></td></tr></table></figure>

<h2 id="安装Zabbix-前端"><a href="#安装Zabbix-前端" class="headerlink" title="安装Zabbix 前端"></a>安装Zabbix 前端</h2><p><a href="https://www.zabbix.com/documentation/5.0/manual/installation/frontend/frontend_on_rhel7" target="_blank" rel="noopener">Documentation</a></p>
<p>Zabbix 使用<code>php</code>写的，所以有单独的安装过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl</span><br></pre></td></tr></table></figure>

<p>编辑该配置文件 <code>/etc/yum.repos.d/zabbix.repo</code>，使得enabled=1。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[zabbix-frontend]...enabled=1...</span><br></pre></td></tr></table></figure>

<p>下载安装Zabbix 前端依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl</span><br></pre></td></tr></table></figure>

<h2 id="创建初始数据库"><a href="#创建初始数据库" class="headerlink" title="创建初始数据库"></a>创建初始数据库</h2><p><a href="https://www.zabbix.com/documentation/5.0/manual/appendix/install/db_scripts" target="_blank" rel="noopener">Documentation</a></p>
<p>在数据库主机上运行以下代码，目的是在本地MySQL数据库中创建zabbix账号和同名数据库，并且赋予相应权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">password</span><br><span class="line">mysql&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@localhost identified by &#39;password&#39;;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure>

<p>导入初始架构和数据，系统将提示您输入新创建的密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure>

<h3 id="x1F449-ATTENTION-ONE"><a href="#x1F449-ATTENTION-ONE" class="headerlink" title="&#x1F449; ATTENTION ONE"></a>&#x1F449; <strong><em>ATTENTION ONE</em></strong></h3><p>以下就是踩坑了：</p>
<p>执行上一条命令时，MySQL导入数据与结构不成功，发生以下报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1071 (42000) at line 90: Specified key was too long; max key length is 767 bytes</span><br></pre></td></tr></table></figure>

<img data-src="/2020/12/01/zabbix-install-deploy/character-error.png" class>

<h4 id="错误做法"><a href="#错误做法" class="headerlink" title="错误做法"></a>错误做法</h4><p>初步判断是MySQL字符集的问题，所以去查了 <strong>*<u>Stack Overflow</u>*</strong> 后，在MySQL命令行中，使用<code>show variables like &#39;character%&#39;</code>查询默认字符集，结果发现许多编码为utf-8。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">password</span><br><span class="line">mysql&gt; show variables like &#39;character%&#39;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>*<u>原因分析：</u>*</strong></p>
<p>MySQL的varchar主键只支持不超过767个字节，需要将MySQL的字符编码设置为<code>utf8mb4</code></p>
<p>使用<code>vim /etc/my.cnf</code>编辑MySQL配置文件（不同系统、安装方式和MySQL版本会造成差异）</p>
<p>在[mysqld]下加入以下配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">innodb_file_format</span>=barracuda  </span><br><span class="line"><span class="attr">innodb_file_per_table</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="attr">innodb_large_prefix</span>=<span class="literal">true</span>  </span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4  </span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci  </span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">500</span>M</span><br></pre></td></tr></table></figure>

<p>如图是我的配置：</p>
<img data-src="/2020/12/01/zabbix-install-deploy/mysql-cfg.png" class>

<p>现在重新执行Zabbix创建初始数据库这一步，但是又有新的问题，还是字符集的报错：</p>
<img data-src="/2020/12/01/zabbix-install-deploy/utf8mb4.png" class>

<p>现在出现索引列大小超出的问题，这就与之前的报错相反，这就很恶心了。</p>
<h4 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h4><p>到这里才发现不对劲，有点南辕北辙的感觉，为什么我在个人Linux虚拟机上就能数据迁移成功？</p>
<p>这肯定是MySQL的问题，所以对比检查云服务器和虚拟机的版本、配置等信息。</p>
<p>果不其然，正常的虚拟机是MySQL5.7版本的，而有问题的云服务器是MySQL5.6版本的，除此之外，默认编码等配置都一模一样。所以定位到了MySQL5.7和MySQL5.6的差异：</p>
<p>5.7除了比5.6性能更强、功能更丰富，其中5.7的索引长度也增加了，这就是报错的问题所在，所以折腾来折腾去，升级MySQL版本完美解决。</p>
<p><strong>*<u>升级方案：</u>*</strong></p>
<h5 id="首先全库备份mysql-5-6"><a href="#首先全库备份mysql-5-6" class="headerlink" title="首先全库备份mysql 5.6"></a>首先全库备份mysql 5.6</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --all-databases &gt; /root/mysql_all.sql</span><br></pre></td></tr></table></figure>

<h5 id="yum配置mysql-5-7"><a href="#yum配置mysql-5-7" class="headerlink" title="yum配置mysql 5.7"></a>yum配置mysql 5.7</h5><p>可以直接使用<code>yum</code>安装，或者源码安装，但是<code>yum</code>安装是非常平滑的升级，数据库和配置文件都不用改，强烈推荐。</p>
<p>但是首先需要修改MySQL相关的yum源文件，因为5.6版本会默认屏蔽5.7的源，在以下两个文件中，将5.7设置为<code>enable=1</code>，5.6修改为<code>enable=0</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">vim /etc/yum.repos.d/mysql-community-source.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">Note:</span> MySQL 5.7 is currently in development. For use at your own risk.</span></span><br><span class="line"><span class="comment"># Please read with sub pages: https://dev.mysql.com/doc/relnotes/mysql/5.7/en/</span></span><br><span class="line"><span class="section">[mysql57-community-dmr]</span></span><br><span class="line"><span class="attr">name</span>=MySQL <span class="number">5.7</span> Community Server Development Milestone Release</span><br><span class="line"><span class="attr">baseurl</span>=http://repo.mysql.com/yum/mysql-<span class="number">5.7</span>-community/el/<span class="number">7</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<p>然后<code>yum clean all</code>清除<code>yum</code>缓存</p>
<h5 id="yum安装mysql-5-7"><a href="#yum安装mysql-5-7" class="headerlink" title="yum安装mysql 5.7"></a>yum安装mysql 5.7</h5><p><code>yum install mysql</code> 或者 <code>yum upgrade mysql-server</code> 应该都可以升级成功&#x1F308;</p>
<p>升级完就可以直接使用啦，重复<strong><u><em>创建初始数据库</em></u></strong> 完成这一步。</p>
<h2 id="为Zabbix-server配置数据库"><a href="#为Zabbix-server配置数据库" class="headerlink" title="为Zabbix server配置数据库"></a>为Zabbix server配置数据库</h2><p>编辑配置文件 <code>/etc/zabbix/zabbix_server.conf</code>，将刚才设置的密码填入该配置文件。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">DBPassword</span>=password</span><br></pre></td></tr></table></figure>

<h2 id="为Zabbix前端配置PHP"><a href="#为Zabbix前端配置PHP" class="headerlink" title="为Zabbix前端配置PHP"></a>为Zabbix前端配置PHP</h2><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>编辑配置文件 <code>/etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</code>，取消其中<code>listen</code>和<code>server_name</code>的注释。此处就是我们非常熟悉的<code>Nginx</code>，配置反向代理监听的端口和域名。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br><span class="line">server_name example.com;</span><br></pre></td></tr></table></figure>

<h4 id="x1F449-ATTENTION-TWO"><a href="#x1F449-ATTENTION-TWO" class="headerlink" title="&#x1F449; ATTENTION TWO"></a>&#x1F449; <strong><em>ATTENTION TWO</em></strong></h4><p>这里配置<code>rh-nginx116</code>是给之前没有安装Nginx的机器使用的，由于一台机器只能启动一个Nginx服务（Docker除外）,所以如果下一步执行<code>systemctl restart rh-nginx116-nginx</code>报错，那就是两个Nginx冲突了，Nginx服务都监听了80端口，绑定端口失败，具体错误如下：</p>
<img data-src="/2020/12/01/zabbix-install-deploy/nginx-error.png" class>

<p>所以我们只需要在原有的Nginx上，配置上本次Zabbix的配置就可以了。</p>
<h4 id="具体方案-："><a href="#具体方案-：" class="headerlink" title="*具体方案*："></a><strong>*<u>具体方案</u>*</strong>：</h4><p>在<code>/etc/nginx/conf.d</code>中创建<code>zabbix.conf</code>，然后使得<code>/etc/nginx/nginx.conf</code>中包含所有<code>conf.d</code>，也就是<code>include /etc/nginx/conf.d/*.conf</code>。</p>
<p>将Zabbix安装的 <code>rh-nginx116</code>的配置文件<code>/etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</code>的内容拷贝到<code>zabbix.conf</code>，就可以对接到已有的Nginx。</p>
<h3 id="配置php"><a href="#配置php" class="headerlink" title="配置php"></a>配置php</h3><p>编辑配置文件 <code>/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code>，将nginx添加到listen.acl_users配置项中。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen.acl_users</span> = apache,nginx</span><br></pre></td></tr></table></figure>

<h4 id="x1F449-ATTENTION-THREE"><a href="#x1F449-ATTENTION-THREE" class="headerlink" title="&#x1F449; ATTENTION THREE"></a>&#x1F449; <strong><em>ATTENTION THREE</em></strong></h4><p>如果下一步<code>rh-php72-php-fpm</code>服务启动不了，原因是 <code>/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code>这个配置文件<code>listen.acl_users = apache,nginx</code>。</p>
<p><strong><u><em>apache,nginx中间不能有逗号</em></u></strong></p>
<h3 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h3><p>最后取消最后一行的注释（注意注释为分号），我们也可以将市区设置为Asia/Shanghai</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">php_value[date.timezone]</span> = Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h2 id="启动Zabbix-server和agent进程"><a href="#启动Zabbix-server和agent进程" class="headerlink" title="启动Zabbix server和agent进程"></a>启动Zabbix server和agent进程</h2><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br><span class="line">systemctl enable zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span><br></pre></td></tr></table></figure>

<p>如果已经对接到了原有的Nginx，需要忽略<code>rh-nginx116-nginx</code>这个服务。</p>
<h2 id="配置Zabbix前端"><a href="#配置Zabbix前端" class="headerlink" title="配置Zabbix前端"></a>配置Zabbix前端</h2><p>连接到新安装的Zabbix前端： <a href="http://server_ip_or_name" target="_blank" rel="noopener">http://server_ip_or_name</a><br>根据Zabbix文件里步骤操作： <a href="https://www.zabbix.com/documentation/5.0/manual/installation/install#installing_frontend" target="_blank" rel="noopener">Installing frontend</a></p>
<h1 id="开始使用Zabbix"><a href="#开始使用Zabbix" class="headerlink" title="开始使用Zabbix"></a>开始使用Zabbix</h1><p>在浏览器中打开Zabbix前端url，如果是从软件包安装的Zabbix，url如下：</p>
<ul>
<li>for Apache: <em><a href="http://server_ip_or_name/zabbix" target="_blank" rel="noopener">http://server_ip_or_name/zabbix</a></em></li>
<li>for Nginx: <em><a href="http://server_ip_or_name" target="_blank" rel="noopener">http://server_ip_or_name</a></em></li>
</ul>
<h2 id="Zabbix欢迎界面-x1F308"><a href="#Zabbix欢迎界面-x1F308" class="headerlink" title="Zabbix欢迎界面&#x1F308;"></a>Zabbix欢迎界面&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/install_1.png" class>

<h2 id="检查先决条件-x1F308"><a href="#检查先决条件-x1F308" class="headerlink" title="检查先决条件&#x1F308;"></a>检查先决条件&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/install_2.png" class>

<h2 id="配置连接数据库-x1F308"><a href="#配置连接数据库-x1F308" class="headerlink" title="配置连接数据库&#x1F308;"></a>配置连接数据库&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/install_3.png" class>

<h2 id="一直点击NEXT-STEP，完成就会跳转到登陆界面啦-x1F308"><a href="#一直点击NEXT-STEP，完成就会跳转到登陆界面啦-x1F308" class="headerlink" title="一直点击NEXT STEP，完成就会跳转到登陆界面啦&#x1F308;"></a>一直点击<code>NEXT STEP</code>，完成就会跳转到登陆界面啦&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/login.png" class>

<h2 id="输入默认账号密码Admin-amp-zabbix就可以登陆啦-x1F308"><a href="#输入默认账号密码Admin-amp-zabbix就可以登陆啦-x1F308" class="headerlink" title="输入默认账号密码Admin &amp; zabbix就可以登陆啦&#x1F308;"></a>输入默认账号密码<code>Admin</code> &amp; <code>zabbix</code>就可以登陆啦&#x1F308;</h2><img data-src="/2020/12/01/zabbix-install-deploy/zabbix-home.png" class>

<blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></blockquote>
<p>Zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的解决方案，同时也是优秀的开源项目，在监控这个领域也是老大哥了。</p>
<p>绝大多数运维开发都会接触Zabbix，使用它来组成硬件监控、告警推送等解决方案。</p>
<p>以上就是Zabbix安装与配置的内容，也是最基础的单机版方案，虽然官方文档比较全，但是由于环境的版本的问题也踩了不少坑，希望能给读者一些启示。</p>
<p><strong><u>TODO LIST</u></strong></p>
<ul>
<li>Zabbix主机监控</li>
<li>Zabbix告警推送（SMTP邮件、自定义脚本）</li>
</ul>
<p>最后附上本人阿里云上的Zabbix网址：</p>
<p><a href="http://47.112.240.167:8005/" target="_blank" rel="noopener">http://47.112.240.167:8005/</a></p>
<hr>
<p>官方文档：<br><a href="https://www.zabbix.com/cn/download?zabbix=5.0&os_distribution=centos&os_version=7&db=mysql&ws=nginx" target="_blank" rel="noopener">官方 - 下载安装Zabbix</a></p>
<p><a href="https://www.zabbix.com/documentation/5.0/manual/installation/install#installing_frontend" target="_blank" rel="noopener">Zabbix Documentation 5.0</a></p>
]]></content>
      <categories>
        <category>监控</category>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>Zabbix</tag>
        <tag>告警</tag>
        <tag>开源</tag>
        <tag>阿里云</tag>
        <tag>安装部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言之xorm使用实例</title>
    <url>/2020/11/30/go-xorm-sample/</url>
    <content><![CDATA[<blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></blockquote>
<p>本文为 <strong><em>xorm - Go 语言 ORM</em></strong> 之后，对 <strong><em>xorm</em></strong> 的练习代码。</p>
<p>学习Go语言之初，在 <strong><em>Go语言之顺序编程</em></strong> 这篇文章中，记录了条件、循环、选择、跳转等语句的练习情况。而最近又学到了 <strong><em>xorm - Go 语言 ORM</em></strong> 的内容，我就想把这两部分内容结合起来，实现一个简单的需求场景。</p>
<p>需求具体为：使用shell作为交互界面，sqlite作为数据库，使用xorm实现类似于人员信息或者银行账户的增删改查，里面也会涉及到顺序编程的内容。</p>
<p>你可以在<code>GitHub</code>上找到本次代码：<a href="https://github.com/sususama5555/go-xorm" target="_blank" rel="noopener">https://github.com/sususama5555/go-xorm</a></p>
<a id="more"></a>

<h1 id="实现详情"><a href="#实现详情" class="headerlink" title="实现详情"></a>实现详情</h1><p>以下就是一个简单的人员信息录入的系统：</p>
<h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><p>main.go为项目的主入口，负责shell界面操作者的交互，以及使用主体逻辑的实现。</p>
<p>其中使用<code>fmt.Println</code>和<code>fmt.Scanf</code>作为shell交互的输出和输入，监听操作者键入的操作选项（数字1~6），使用<code>switch</code>区分不同的选项，然后调用<code>models.go</code>中<code>xorm</code>与<code>sqlite</code>数据库交互的公共函数，实现了该需求的主要逻辑。</p>
<h3 id="代码一览"><a href="#代码一览" class="headerlink" title="代码一览"></a>代码一览</h3><p><strong>*<u>以下为<code>main.go</code>主函数的代码：</u>*</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info  = <span class="string">`请输入操作选项</span></span><br><span class="line"><span class="string">1、创建新用户</span></span><br><span class="line"><span class="string">2、查询指定用户</span></span><br><span class="line"><span class="string">3、列出全部用户</span></span><br><span class="line"><span class="string">4、更新指定用户</span></span><br><span class="line"><span class="string">5、删除指定用户</span></span><br><span class="line"><span class="string">6、退出`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"欢迎使用信息录入系统:"</span>)</span><br><span class="line">Exit:</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Println(info)</span><br><span class="line">		<span class="keyword">var</span> input <span class="keyword">int</span></span><br><span class="line">		fmt.Scanf(<span class="string">"%d \n"</span>, &amp;input)</span><br><span class="line">		<span class="keyword">switch</span> input &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">var</span> name, country <span class="keyword">string</span></span><br><span class="line">			fmt.Print(<span class="string">"请输入姓名: "</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s\n"</span>, &amp;name)</span><br><span class="line">			fmt.Print(<span class="string">"请输入所在国家: "</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s\n"</span>, &amp;country)</span><br><span class="line">			<span class="keyword">if</span> err := newAccount(name, country); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"创建失败:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"创建成功"</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"请输入要查询的账号 &lt;id&gt;:"</span>)</span><br><span class="line">			<span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">			fmt.Scanf(<span class="string">"%d\n"</span>, &amp;id)</span><br><span class="line">			data, err := getAccount(id)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"Fail to get account:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"%#v\n"</span>, data)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			fmt.Println(<span class="string">"以下是所有账号信息:"</span>)</span><br><span class="line">			allData, err := getAccountsAscId()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"Fail to get accounts:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> i, a := <span class="keyword">range</span> allData &#123;</span><br><span class="line">					fmt.Printf(<span class="string">"%d: %#v\n"</span>, i+<span class="number">1</span>, a)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			fmt.Println(<span class="string">"请输入要更新的账号 &lt;id&gt;:"</span>)</span><br><span class="line">			<span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">			fmt.Scanf(<span class="string">"%d\n"</span>, &amp;id)</span><br><span class="line">			<span class="keyword">var</span> name,country <span class="keyword">string</span></span><br><span class="line">			fmt.Print(<span class="string">"请输入更新的姓名:"</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s\n"</span>, &amp;name)</span><br><span class="line">			fmt.Print(<span class="string">"请输入更新的国家:"</span>)</span><br><span class="line">			fmt.Scanf(<span class="string">"%s"</span>, &amp;country)</span><br><span class="line">			data, err := updateAccount(id, name, country)</span><br><span class="line">			<span class="keyword">if</span>  err != <span class="literal">nil</span>&#123;</span><br><span class="line">				fmt.Println(<span class="string">"更新失败:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"更新成功 %#v\n"</span>, data)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			fmt.Println(<span class="string">"请输入要删除的账号 &lt;id&gt;:"</span>)</span><br><span class="line">			<span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">			fmt.Scanf(<span class="string">"%d\n"</span>, &amp;id)</span><br><span class="line">			<span class="keyword">if</span> err := deleteAccount(id); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">"删除失败:"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"删除成功 %d"</span>, &amp;id)</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			fmt.Println(<span class="string">"感谢您的使用"</span>)</span><br><span class="line">			<span class="keyword">break</span> Exit</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="models-go"><a href="#models-go" class="headerlink" title="models.go"></a>models.go</h2><p>models.go主要为使用xorm对该项目的数据库进行增删改查，主要是常用函数的封装，我们可以在main.go里面对这些公共方法进行调用。</p>
<h3 id="安装和引入xorm"><a href="#安装和引入xorm" class="headerlink" title="安装和引入xorm"></a>安装和引入xorm</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get xorm.io/xorm</span><br></pre></td></tr></table></figure>

<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>在使用xorm的文件开头，import以下几个包，主要为<code>go-xorm</code>与<code>go-sqlite3</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"errors"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/go-xorm/xorm"</span></span><br><span class="line">	_ <span class="string">"github.com/mattn/go-sqlite3"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h3 id="创建-Engine-引擎"><a href="#创建-Engine-引擎" class="headerlink" title="创建 Engine 引擎"></a>创建 Engine 引擎</h3><p>可以看到，我们按照xorm的操作手册，使用<code>var x *xorm.Engine</code>首先创建了单个ORM引擎，然后使用<code>init</code>函数对基于<code>sqlite</code>的数据库初始化，为了方便，指定了同级目录下的<code>bank.db</code>作为数据表，最后使用<code>x.Sync(new(Account))</code>实现了同步结构体与数据表。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ORM 引擎</span></span><br><span class="line"><span class="keyword">var</span> x *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建 ORM 引擎与数据库</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	x, err = xorm.NewEngine(<span class="string">"sqlite3"</span>, <span class="string">"./bank.db"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to create engine: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 同步结构体与数据表</span></span><br><span class="line">	<span class="keyword">if</span> err = x.Sync(<span class="built_in">new</span>(Account)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to sync database: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义表结构体"><a href="#定义表结构体" class="headerlink" title="定义表结构体"></a>定义表结构体</h3><p>然后是定义表结构体，我们对Column 表的属性进行了定义，创建了一个名为 Account 的结构体，实现了对数据库表的映射。</p>
<p>之后就是增删改查的操作，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 人员信息</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id      <span class="keyword">int64</span></span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xorm:"unique"`</span></span><br><span class="line">	Country <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//Version int `</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//xorm:"version"` // 乐观锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p><code>_, err := x.Insert(&amp;Account{Name: name, Country: country})</code></p>
<p>使用xorm，该语句可以实现插入一条数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建新的账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newAccount</span><span class="params">(name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 对未存在记录进行插入</span></span><br><span class="line">	_, err := x.Insert(&amp;Account&#123;Name: name, Country: country&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>类似于<code>django orm</code>中的<code>create</code>，或者创建实例x后，再<code>x.save()</code>。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h4><p><code>err = x.Find(&amp;as)</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照 ID 正序排序返回所有账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccountsAscId</span><span class="params">()</span> <span class="params">(as []Account, err error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 使用 Find 方法批量获取记录</span></span><br><span class="line">	err = x.Find(&amp;as)</span><br><span class="line">	<span class="keyword">return</span> as, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="单条查询"><a href="#单条查询" class="headerlink" title="单条查询"></a>单条查询</h4><p><code>has, err := x.Id(id).Get(a)</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="params">(*Account, error)</span></span> &#123;</span><br><span class="line">	a := &amp;Account&#123;&#125;</span><br><span class="line">	<span class="comment">// 直接操作 ID 的简便方法</span></span><br><span class="line">	has, err := x.Id(id).Get(a)</span><br><span class="line">	<span class="comment">// 判断操作是否发生错误或对象是否存在</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !has &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"账号不存在"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新数据前，获取到需要变更的记录的<code>Id</code>，然后对其他属性进行修改。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateAccount</span><span class="params">(id <span class="keyword">int64</span>, name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span>  <span class="params">(*Account, error)</span></span>&#123;</span><br><span class="line">	_, err := getAccount(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	data := <span class="built_in">new</span>(Account)</span><br><span class="line">	data.Name = name</span><br><span class="line">	data.Country = country</span><br><span class="line">	<span class="comment">// 对已有记录进行更新</span></span><br><span class="line">	_, err = x.Id(id).Update(data)</span><br><span class="line">	<span class="keyword">return</span> data, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 通过 Delete 方法删除记录</span></span><br><span class="line">	_, err := x.Delete(&amp;Account&#123;Id: id&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码一览-1"><a href="#代码一览-1" class="headerlink" title="代码一览"></a>代码一览</h3><p><strong>*<u>以下为<code>models.go</code>定义数据库交互的公共函数代码：</u>*</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"errors"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/go-xorm/xorm"</span></span><br><span class="line">	_ <span class="string">"github.com/mattn/go-sqlite3"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人员信息</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id      <span class="keyword">int64</span></span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xorm:"unique"`</span></span><br><span class="line">	Country <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//Version int `</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//xorm:"version"` // 乐观锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ORM 引擎</span></span><br><span class="line"><span class="keyword">var</span> x *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建 ORM 引擎与数据库</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	x, err = xorm.NewEngine(<span class="string">"sqlite3"</span>, <span class="string">"./bank.db"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to create engine: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 同步结构体与数据表</span></span><br><span class="line">	<span class="keyword">if</span> err = x.Sync(<span class="built_in">new</span>(Account)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Fail to sync database: %v\n"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newAccount</span><span class="params">(name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 对未存在记录进行插入</span></span><br><span class="line">	_, err := x.Insert(&amp;Account&#123;Name: name, Country: country&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新已有的账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateAccount</span><span class="params">(id <span class="keyword">int64</span>, name <span class="keyword">string</span>, country <span class="keyword">string</span>)</span>  <span class="params">(*Account, error)</span></span>&#123;</span><br><span class="line">	<span class="comment">// TODO 注释方法不能用</span></span><br><span class="line">	<span class="comment">//data, err := getAccount(id)</span></span><br><span class="line">	<span class="comment">//if err != nil &#123;</span></span><br><span class="line">	<span class="comment">//	return nil, err</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//data.Name = name</span></span><br><span class="line">	<span class="comment">//data.Country = country</span></span><br><span class="line">	<span class="comment">//// 对已有记录进行更新</span></span><br><span class="line">	<span class="comment">//_, err = x.Update(data)</span></span><br><span class="line">	<span class="comment">//return data, err</span></span><br><span class="line">	_, err := getAccount(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	data := <span class="built_in">new</span>(Account)</span><br><span class="line">	data.Name = name</span><br><span class="line">	data.Country = country</span><br><span class="line">	<span class="comment">// 对已有记录进行更新</span></span><br><span class="line">	_, err = x.Id(id).Update(data)</span><br><span class="line">	<span class="keyword">return</span> data, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="params">(*Account, error)</span></span> &#123;</span><br><span class="line">	a := &amp;Account&#123;&#125;</span><br><span class="line">	<span class="comment">// 直接操作 ID 的简便方法</span></span><br><span class="line">	has, err := x.Id(id).Get(a)</span><br><span class="line">	<span class="comment">// 判断操作是否发生错误或对象是否存在</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> !has &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"账号不存在"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照 ID 正序排序返回所有账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccountsAscId</span><span class="params">()</span> <span class="params">(as []Account, err error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 使用 Find 方法批量获取记录</span></span><br><span class="line">	err = x.Find(&amp;as)</span><br><span class="line">	<span class="keyword">return</span> as, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除账户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteAccount</span><span class="params">(id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 通过 Delete 方法删除记录</span></span><br><span class="line">	_, err := x.Delete(&amp;Account&#123;Id: id&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="成果截图"><a href="#成果截图" class="headerlink" title="成果截图"></a>成果截图</h1><p>完成以上代码后，使用go build编译成可执行的二进制文件，不出意外的话，我执行该exe文件，就会得到以下截图的结构：</p>
<h2 id="开始界面"><a href="#开始界面" class="headerlink" title="开始界面"></a>开始界面</h2><p>输入操作的选项</p>
<img data-src="/2020/11/30/go-xorm-sample/start.png" class>

<h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><p>输入表结构的字段，创建一条数据，第一次操作由于name的唯一性没有通过新增要求</p>
<img data-src="/2020/11/30/go-xorm-sample/insert.png" class>

<h2 id="查询数据-1"><a href="#查询数据-1" class="headerlink" title="查询数据"></a>查询数据</h2><p>查询所有和查询单条数据</p>
<img data-src="/2020/11/30/go-xorm-sample/select.png" class>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>对指定Id的数据进行修改</p>
<img data-src="/2020/11/30/go-xorm-sample/update.png" class>

<h2 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h2><img data-src="/2020/11/30/go-xorm-sample/delete.png" class>




<hr>
<p><strong>*<u>参考链接：</u>*</strong></p>
<p>可以参照本人另一篇文章 —— <code>xorm - Go 语言 ORM</code>，或者官方的操作手册：</p>
<p><a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/" target="_blank" rel="noopener">xorm 官方操作手册</a></p>
]]></content>
      <categories>
        <category>Go语言</category>
        <category>xorm</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
        <tag>Go语言</tag>
        <tag>xorm</tag>
        <tag>实战练习</tag>
      </tags>
  </entry>
  <entry>
    <title>xorm - Go 语言 ORM</title>
    <url>/2020/11/29/go-xorm/</url>
    <content><![CDATA[<blockquote>
<h1 id="xorm简介"><a href="#xorm简介" class="headerlink" title="xorm简介"></a>xorm简介</h1></blockquote>
<p>官方定义：</p>
<p><code>XORM is a Simple &amp; Powerful ORM Framework for Go Programming Language</code></p>
<p>xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。xorm的目标并不是让你完全不去学习SQL，我们认为SQL并不会为ORM所替代，但是ORM将可以解决绝大部分的简单SQL需求。xorm支持两种风格的混用。</p>
<p>本文是xorm的操作手册，后续有原创文章记录xorm实例代码。</p>
<p><strong>*<u>申明：以下大部分内容，是本人在遍历性阅读官方文档时的摘抄，不是本人原创，目的是迁移到自己博客，方便后续学习与查阅。小部分内容为个人代码。</u>*</strong></p>
<a id="more"></a>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li><p>支持 Struct 和数据库表之间的灵活映射，并支持自动同步</p>
</li>
<li><p>事务支持</p>
</li>
<li><p>同时支持原始SQL语句和 ORM 操作的混合执行</p>
</li>
<li><p>使用连写来简化调用</p>
</li>
<li><p>支持使用ID, In, Where, Limit, Join, Having, Table, SQL, Cols等函数和结构体等方式作为条件</p>
</li>
<li><p>支持级联加载 Struct</p>
</li>
<li><p>Schema支持（仅Postgres）</p>
</li>
<li><p>支持缓存</p>
</li>
<li><p>通过 <a href="https://xorm.io/reverse" target="_blank" rel="noopener">xorm.io/reverse</a> 支持根据数据库自动生成 xorm 结构体</p>
</li>
<li><p>支持记录版本（即乐观锁）</p>
</li>
<li><p>通过 <a href="https://xorm.io/builder" target="_blank" rel="noopener">xorm.io/builder</a> 内置 SQL Builder 支持</p>
</li>
<li><p>上下文缓存支持</p>
</li>
<li><p>支持日志上下文</p>
</li>
</ul>
<h2 id="驱动支持"><a href="#驱动支持" class="headerlink" title="驱动支持"></a>驱动支持</h2><p>xorm 当前支持的驱动和数据库如下：</p>
<ul>
<li><a href="https://github.com/mysql/mysql-server/tree/5.7" target="_blank" rel="noopener">Mysql5.*</a> / <a href="https://github.com/mysql/mysql-server" target="_blank" rel="noopener">Mysql8.*</a> / <a href="https://github.com/MariaDB/server" target="_blank" rel="noopener">Mariadb</a> / <a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">Tidb</a><ul>
<li><a href="https://github.com/go-sql-driver/mysql" target="_blank" rel="noopener">github.com/go-sql-driver/mysql</a></li>
<li><a href="https://github.com/ziutek/mymysql/godrv" target="_blank" rel="noopener">github.com/ziutek/mymysql/godrv</a></li>
</ul>
</li>
<li><a href="https://github.com/postgres/postgres" target="_blank" rel="noopener">Postgres</a> / <a href="https://github.com/cockroachdb/cockroach" target="_blank" rel="noopener">Cockroach</a><ul>
<li><a href="https://github.com/lib/pq" target="_blank" rel="noopener">github.com/lib/pq</a></li>
</ul>
</li>
<li><a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a><ul>
<li><a href="https://github.com/mattn/go-sqlite3" target="_blank" rel="noopener">github.com/mattn/go-sqlite3</a></li>
</ul>
</li>
<li>MsSql<ul>
<li><a href="https://github.com/denisenkom/go-mssqldb" target="_blank" rel="noopener">github.com/denisenkom/go-mssqldb</a></li>
</ul>
</li>
<li>Oracle<ul>
<li><a href="https://github.com/mattn/go-oci8" target="_blank" rel="noopener">github.com/mattn/go-oci8</a> (试验性支持)</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get xorm.io/xorm</span><br></pre></td></tr></table></figure>

<h1 id="xorm使用"><a href="#xorm使用" class="headerlink" title="xorm使用"></a>xorm使用</h1><h2 id="创建-Engine-引擎"><a href="#创建-Engine-引擎" class="headerlink" title="创建 Engine 引擎"></a>创建 Engine 引擎</h2><p>单个ORM引擎，也称为Engine。一个 APP 可以同时存在多个 Engine 引擎，一个Engine一般只对应一个数据库。Engine 通过调用 <code>xorm.NewEngine</code> 生成，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"github.com/mattn/go-sqlite3"</span></span><br><span class="line">    <span class="string">"xorm.io/xorm"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> engine *xorm.Engine</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    engine, err = xorm.NewEngine(<span class="string">"sqlite3"</span>, <span class="string">"./bank.db"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>日志是一个接口，通过设置日志，可以显示SQL，警告以及错误等，默认的显示级别为 INFO。</p>
<ul>
<li><code>engine.ShowSQL(true)</code>，则会在控制台打印出生成的SQL语句；</li>
<li><code>engine.Logger().SetLevel(core.LOG_DEBUG)</code>，则会在控制台打印调试及以上的信息；</li>
</ul>
<p>如果希望将信息不仅打印到控制台，而是保存为文件，那么可以通过类似如下的代码实现，<code>NewSimpleLogger(w io.Writer)</code>接收一个io.Writer接口来将数据写入到对应的设施中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Create(<span class="string">"sql.log"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(err.Error())</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">engine.SetLogger(xorm.NewSimpleLogger(f))</span><br></pre></td></tr></table></figure>

<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>engine内部支持连接池接口和对应的函数。</p>
<ul>
<li>如果需要设置连接池的空闲数大小，可以使用 <code>engine.SetMaxIdleConns()</code> 来实现。</li>
<li>如果需要设置最大打开连接数，则可以使用 <code>engine.SetMaxOpenConns()</code> 来实现。</li>
<li>如果需要设置连接的最大生存时间，则可以使用 <code>engine.SetConnMaxLifetime()</code> 来实现。</li>
</ul>
<h2 id="定义表结构体"><a href="#定义表结构体" class="headerlink" title="定义表结构体"></a>定义表结构体</h2><p>xorm支持将一个struct映射为数据库中对应的一张表。</p>
<h3 id="名称映射规则"><a href="#名称映射规则" class="headerlink" title="名称映射规则"></a>名称映射规则</h3><p>跟名称相关的函数包含在 <code>xorm.io/xorm/names</code> 下。名称映射规则主要负责结构体名称到表名和结构体 field 到表字段的名称映射。由 <code>names.Mapper</code> 接口的实现者来管理，xorm 内置了三种 <code>Mapper</code> 实现：<code>names.SnakeMapper</code> ， <code>names.SameMapper</code>和<code>names.GonicMapper</code>。</p>
<ul>
<li>SnakeMapper 支持struct为驼峰式命名，表结构为下划线命名之间的转换，这个是默认的Maper；</li>
<li>SameMapper 支持结构体名称和对应的表名称以及结构体field名称与对应的表字段名称相同的命名；</li>
<li>GonicMapper 和SnakeMapper很类似，但是对于特定词支持更好，比如ID会翻译成id而不是i_d。</li>
</ul>
<p>当前 SnakeMapper 为默认值，如果需要改变时，在 engine 创建完成后使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.SetMapper(names.GonicMapper&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>同时需要注意的是：</p>
<ul>
<li>如果你使用了别的命名规则映射方案，也可以自己实现一个 Mapper。</li>
<li>表名称和字段名称的映射规则默认是相同的，当然也可以设置为不同，如：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.SetTableMapper(names.SameMapper&#123;&#125;)</span><br><span class="line">engine.SetColumnMapper(names.SnakeMapper&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Column-属性定义"><a href="#Column-属性定义" class="headerlink" title="Column 属性定义"></a>Column 属性定义</h3><p>我们在 field 对应的 Tag 中对 Column 的一些属性进行定义，定义的方法基本和我们写SQL定义表结构类似，以下代码为例，使用了sqlite3作为数据库，定义一个银行账户的表结构，与django orm类似，可以指定各字段的名称映射规则，还可以将字段设为唯一标识，添加乐观锁等等，这里不多赘述。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 银行账户</span></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id      <span class="keyword">int64</span></span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xorm:"unique"`</span></span><br><span class="line">	Country <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//Version int `</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//xorm:"version"` // 乐观锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Go与字段类型对应表"><a href="#Go与字段类型对应表" class="headerlink" title="Go与字段类型对应表"></a>Go与字段类型对应表</h3><p>如果不使用 tag 来定义 field 对应的数据库字段类型，那么系统会自动给出一个默认的字段类型，对应表如下：</p>
<table>
<thead>
<tr>
<th>go type’s kind</th>
<th>value method</th>
<th>xorm type</th>
</tr>
</thead>
<tbody><tr>
<td>implemented Conversion</td>
<td>Conversion.ToDB / Conversion.FromDB</td>
<td>Text</td>
</tr>
<tr>
<td>int, int8, int16, int32, uint, uint8, uint16, uint32</td>
<td></td>
<td>Int</td>
</tr>
<tr>
<td>int64, uint64</td>
<td></td>
<td>BigInt</td>
</tr>
<tr>
<td>float32</td>
<td></td>
<td>Float</td>
</tr>
<tr>
<td>float64</td>
<td></td>
<td>Double</td>
</tr>
<tr>
<td>complex64, complex128</td>
<td>json.Marshal / json.UnMarshal</td>
<td>Varchar(64)</td>
</tr>
<tr>
<td>[]uint8</td>
<td></td>
<td>Blob</td>
</tr>
<tr>
<td>array, slice, map except []uint8</td>
<td>json.Marshal / json.UnMarshal</td>
<td>Text</td>
</tr>
<tr>
<td>bool</td>
<td>1 or 0</td>
<td>Bool</td>
</tr>
<tr>
<td>string</td>
<td></td>
<td>Varchar(255)</td>
</tr>
<tr>
<td>time.Time</td>
<td></td>
<td>DateTime</td>
</tr>
<tr>
<td>cascade struct</td>
<td>primary key field value</td>
<td>BigInt</td>
</tr>
<tr>
<td>struct</td>
<td>json.Marshal / json.UnMarshal</td>
<td>Text</td>
</tr>
<tr>
<td>Others</td>
<td></td>
<td>Text</td>
</tr>
</tbody></table>
<h2 id="表结构操作"><a href="#表结构操作" class="headerlink" title="表结构操作"></a>表结构操作</h2><p>xorm 提供了一些动态获取和修改表结构的方法，通过这些方法可以动态同步数据库结构，导出数据库结构，导入数据库结构。</p>
<h3 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h3><ul>
<li>DBMetas()</li>
</ul>
<p>xorm支持获取表结构信息，通过调用 <code>engine.DBMetas()</code> 可以获取到数据库中所有的表，字段，索引的信息。</p>
<ul>
<li>TableInfo()</li>
</ul>
<p>根据传入的结构体指针及其对应的Tag，提取出模型对应的表结构信息。这里不是数据库当前的表结构信息，而是我们通过struct建模时希望数据库的表的结构信息</p>
<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul>
<li>CreateTables()</li>
</ul>
<p>创建表使用 <code>engine.CreateTables()</code>，参数为一个或多个空的对应Struct的指针。同时可用的方法有 Charset() 和 StoreEngine()，如果对应的数据库支持，这两个方法可以在创建表时指定表的字符编码和使用的引擎。Charset() 和 StoreEngine() 当前仅支持 Mysql 数据库。</p>
<ul>
<li>IsTableEmpty()</li>
</ul>
<p>判断表是否为空，参数和 CreateTables 相同</p>
<ul>
<li>IsTableExist()</li>
</ul>
<p>判断表是否存在</p>
<ul>
<li>DropTables()</li>
</ul>
<p>删除表使用 <code>engine.DropTables()</code>，参数为一个或多个空的对应Struct的指针或者表的名字。如果为string传入，则只删除对应的表，如果传入的为Struct，则删除表的同时还会删除对应的索引。</p>
<h3 id="创建索引和唯一索引"><a href="#创建索引和唯一索引" class="headerlink" title="创建索引和唯一索引"></a>创建索引和唯一索引</h3><ul>
<li>CreateIndexes</li>
</ul>
<p>根据struct中的tag来创建索引</p>
<ul>
<li>CreateUniques</li>
</ul>
<p>根据struct中的tag来创建唯一索引</p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>插入数据使用Insert方法，Insert方法的参数可以是一个或多个Struct的指针，一个或多个Struct的Slice的指针。</p>
<p>如果传入的是Slice并且当数据库支持批量插入时，Insert会使用批量插入的方式进行插入。</p>
<ul>
<li>插入一条数据，此时可以用Insert或者InsertOne</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">affected, err := engine.Insert(user)</span><br><span class="line"><span class="comment">// INSERT INTO user (name) values (?)</span></span><br></pre></td></tr></table></figure>

<p>在插入单条数据成功后，如果该结构体有自增字段(设置为autoincr)，则自增字段会被自动赋值为数据库中的id。这里需要注意的是，如果插入的结构体中，自增字段已经赋值，则该字段会被作为非自增字段插入。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(user.Id)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入同一个表的多条数据，此时如果数据库支持批量插入，那么会进行批量插入，但是这样每条记录就无法被自动赋予id值。如果数据库不支持批量插入，那么就会一条一条插入。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">affected, err := engine.Insert(&amp;users)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用指针Slice插入多条记录，同上</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]*User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>] = <span class="built_in">new</span>(User)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">affected, err := engine.Insert(&amp;users)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入多条记录并且不使用批量插入，此时实际生成多条插入语句，每条记录均会自动赋予Id值。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]*User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>] = <span class="built_in">new</span>(User)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">affected, err := engine.Insert(users...)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入不同表的一条记录</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">question := <span class="built_in">new</span>(Question)</span><br><span class="line">question.Content = <span class="string">"whywhywhwy?"</span></span><br><span class="line">affected, err := engine.Insert(user, question)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入不同表的多条记录</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]User, <span class="number">1</span>)</span><br><span class="line">users[<span class="number">0</span>].Name = <span class="string">"name0"</span></span><br><span class="line">...</span><br><span class="line">questions := <span class="built_in">make</span>([]Question, <span class="number">1</span>)</span><br><span class="line">questions[<span class="number">0</span>].Content = <span class="string">"whywhywhwy?"</span></span><br><span class="line">affected, err := engine.Insert(&amp;users, &amp;questions)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入不同表的一条或多条记录</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">...</span><br><span class="line">questions := <span class="built_in">make</span>([]Question, <span class="number">1</span>)</span><br><span class="line">questions[<span class="number">0</span>].Content = <span class="string">"whywhywhwy?"</span></span><br><span class="line">affected, err := engine.Insert(user, &amp;questions)</span><br></pre></td></tr></table></figure>

<p>这里需要注意以下几点：</p>
<ul>
<li>这里虽然支持同时插入，但这些插入并没有事务关系。因此有可能在中间插入出错后，后面的插入将不会继续。此时前面的插入已经成功，如果需要回滚，请开启事务。</li>
<li>批量插入会自动生成<code>Insert into table values (),(),()</code>的语句，因此各个数据库对SQL语句有长度限制，因此这样的语句有一个最大的记录数，根据经验测算在150条左右。大于150条后，生成的sql语句将太长可能导致执行失败。因此在插入大量数据时，目前需要自行分割成每150条插入一次。</li>
</ul>
<h2 id="查询和统计数据"><a href="#查询和统计数据" class="headerlink" title="查询和统计数据"></a>查询和统计数据</h2><p>所有的查询条件不区分调用顺序，但必须在调用Get，Exist, Sum, Find，Count, Iterate, Rows这几个函数之前调用。同时需要注意的一点是，在调用的参数中，如果采用默认的<code>SnakeMapper</code>所有的字符字段名均为映射后的数据库的字段名，而不是field的名字。</p>
<h3 id="查询条件方法"><a href="#查询条件方法" class="headerlink" title="查询条件方法"></a>查询条件方法</h3><p>查询和统计主要使用<code>Get</code>, <code>Find</code>, <code>Count</code>, <code>Rows</code>, <code>Iterate</code>这几个方法，同时大部分函数在调用<code>Update</code>, <code>Delete</code>时也是可用的。在进行查询时可以使用多个方法来形成查询条件，条件函数如下：</p>
<ul>
<li>Alias(string)</li>
</ul>
<p>给Table设定一个别名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Alias(<span class="string">"o"</span>).Where(<span class="string">"o.name = ?"</span>, name).Get(&amp;order)</span><br></pre></td></tr></table></figure>

<ul>
<li>And(string, …interface{})</li>
</ul>
<p>和Where函数中的条件基本相同，作为条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Where(...).And(...).Get(&amp;order)</span><br></pre></td></tr></table></figure>

<ul>
<li>Asc(…string)</li>
</ul>
<p>指定字段名正序排序，可以组合</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Asc(<span class="string">"id"</span>).Find(&amp;orders)</span><br></pre></td></tr></table></figure>

<ul>
<li>Desc(…string)</li>
</ul>
<p>指定字段名逆序排序，可以组合</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Asc(<span class="string">"id"</span>).Desc(<span class="string">"time"</span>).Find(&amp;orders)</span><br></pre></td></tr></table></figure>

<ul>
<li>ID(interface{})</li>
</ul>
<p>传入一个主键字段的值，作为查询条件，如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.ID(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user Where id = 1</span></span><br></pre></td></tr></table></figure>

<p>如果是复合主键，则可以</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.ID(core.PK&#123;<span class="number">1</span>, <span class="string">"name"</span>&#125;).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user Where id =1 AND name= 'name'</span></span><br></pre></td></tr></table></figure>

<p>传入的两个参数按照struct中pk标记字段出现的顺序赋值。</p>
<ul>
<li>Or(interface{}, …interface{})</li>
</ul>
<p>和Where函数中的条件基本相同，作为条件</p>
<ul>
<li>OrderBy(string)</li>
</ul>
<p>按照指定的顺序进行排序</p>
<ul>
<li>Select(string)</li>
</ul>
<p>指定select语句的字段部分内容，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Select(<span class="string">"a.*, (select name from b limit 1) as name"</span>).Find(&amp;beans)</span><br><span class="line"></span><br><span class="line">engine.Select(<span class="string">"a.*, (select name from b limit 1) as name"</span>).Get(&amp;bean)</span><br></pre></td></tr></table></figure>

<ul>
<li>SQL(string, …interface{})</li>
</ul>
<p>执行指定的Sql语句，并把结果映射到结构体。有时，当选择内容或者条件比较复杂时，可以直接使用Sql，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.SQL(<span class="string">"select * from table"</span>).Find(&amp;beans)</span><br></pre></td></tr></table></figure>

<ul>
<li>Where(string, …interface{})</li>
</ul>
<p>和SQL中Where语句中的条件基本相同，作为条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Where(<span class="string">"a = ? AND b = ?"</span>, <span class="number">1</span>, <span class="number">2</span>).Find(&amp;beans)</span><br><span class="line"></span><br><span class="line">engine.Where(builder.Eq&#123;<span class="string">"a"</span>:<span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;).Find(&amp;beans)</span><br><span class="line"></span><br><span class="line">engine.Where(builder.Eq&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;.Or(builder.Eq&#123;<span class="string">"b"</span>: <span class="number">2</span>&#125;)).Find(&amp;beans)</span><br></pre></td></tr></table></figure>

<ul>
<li>In(string, …interface{})</li>
</ul>
<p>某字段在一些值中，这里需要注意必须是[]interface{}才可以展开，由于Go语言的限制，[]int64等不可以直接展开，而是通过传递一个slice。第二个参数也可以是一个*builder.Builder 指针。示例代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select from table where column in (1,2,3)</span></span><br><span class="line">engine.In(<span class="string">"cloumn"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).Find()</span><br><span class="line"></span><br><span class="line"><span class="comment">// select from table where column in (1,2,3)</span></span><br><span class="line">engine.In(<span class="string">"column"</span>, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Find()</span><br><span class="line"></span><br><span class="line"><span class="comment">// select from table where column in (select column from table2 where a = 1)</span></span><br><span class="line">engine.In(<span class="string">"column"</span>, builder.Select(<span class="string">"column"</span>).From(<span class="string">"table2"</span>).Where(builder.Eq&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;)).Find()</span><br></pre></td></tr></table></figure>

<ul>
<li>Cols(…string)</li>
</ul>
<p>只查询或更新某些指定的字段，默认是查询所有映射的字段或者根据Update的第一个参数来判断更新的字段。例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Cols(<span class="string">"age"</span>, <span class="string">"name"</span>).Get(&amp;usr)</span><br><span class="line"><span class="comment">// SELECT age, name FROM user limit 1</span></span><br><span class="line">engine.Cols(<span class="string">"age"</span>, <span class="string">"name"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT age, name FROM user</span></span><br><span class="line">engine.Cols(<span class="string">"age"</span>, <span class="string">"name"</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET age=? AND name=?</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AllCols()</li>
</ul>
<p>查询或更新所有字段，一般与Update配合使用，因为默认Update只更新非0，非”“，非bool的字段。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.AllCols().Id(<span class="number">1</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET name = ?, age =?, gender =? WHERE id = 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>MustCols(…string)</li>
</ul>
<p>某些字段必须更新，一般与Update配合使用。</p>
<ul>
<li>Omit(…string)</li>
</ul>
<p>和cols相反，此函数指定排除某些指定的字段。注意：此方法和Cols方法不可同时使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1：</span></span><br><span class="line">engine.Omit(<span class="string">"age"</span>, <span class="string">"gender"</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET name = ? AND department = ?</span></span><br><span class="line"><span class="comment">// 例2：</span></span><br><span class="line">engine.Omit(<span class="string">"age, gender"</span>).Insert(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO user (name) values (?) // 这样的话age和gender会给默认值</span></span><br><span class="line"><span class="comment">// 例3：</span></span><br><span class="line">engine.Omit(<span class="string">"age"</span>, <span class="string">"gender"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT name FROM user //只select除age和gender字段的其它字段</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Distinct(…string)</li>
</ul>
<p>按照参数中指定的字段归类结果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Distinct(<span class="string">"age"</span>, <span class="string">"department"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT DISTINCT age, department FROM user</span></span><br></pre></td></tr></table></figure>

<p>注意：当开启了缓存时，此方法的调用将在当前查询中禁用缓存。因为缓存系统当前依赖Id，而此时无法获得Id</p>
<ul>
<li>Table(nameOrStructPtr interface{})</li>
</ul>
<p>传入表名称或者结构体指针，如果传入的是结构体指针，则按照IMapper的规则提取出表名</p>
<ul>
<li>Limit(int, …int)</li>
</ul>
<p>限制获取的数目，第一个参数为条数，第二个参数表示开始位置，如果不传则为0</p>
<ul>
<li>Top(int)</li>
</ul>
<p>相当于Limit(int, 0)</p>
<ul>
<li>Join(string,interface{},string)</li>
</ul>
<p>第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值， 第二个参数为string类型的表名，表对应的结构体指针或者为两个值的[]string，表示表名和别名， 第三个参数为连接条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">详细用法参见 [5.Join的使用](5.join.md)</span><br></pre></td></tr></table></figure>

<ul>
<li>GroupBy(string)</li>
</ul>
<p>Groupby的参数字符串</p>
<ul>
<li>Having(string)</li>
</ul>
<p>Having的参数字符串</p>
<h3 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h3><p>查询单条数据使用<code>Get</code>方法，在调用Get方法时需要传入一个对应结构体的指针，同时结构体中的非空field自动成为查询的条件和前面的方法条件组合在一起查询。</p>
<p>如：</p>
<p>1) 根据Id来获得单条数据:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">has, err := engine.Id(id).Get(user)</span><br><span class="line"><span class="comment">// 复合主键的获取方法</span></span><br><span class="line"><span class="comment">// has, errr := engine.Id(xorm.PK&#123;1,2&#125;).Get(user)</span></span><br></pre></td></tr></table></figure>

<p>2) 根据Where来获得单条数据：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">has, err := engine.Where(<span class="string">"name=?"</span>, <span class="string">"xlw"</span>).Get(user)</span><br></pre></td></tr></table></figure>

<p>3) 根据user结构体中已有的非空数据来获得单条数据：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := &amp;User&#123;Id:<span class="number">1</span>&#125;</span><br><span class="line">has, err := engine.Get(user)</span><br></pre></td></tr></table></figure>

<p>或者其它条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := &amp;User&#123;Name:<span class="string">"xlw"</span>&#125;</span><br><span class="line">has, err := engine.Get(user)</span><br></pre></td></tr></table></figure>

<p>返回的结果为两个参数，一个<code>has</code>为该条记录是否存在，第二个参数<code>err</code>为是否有错误。不管err是否为nil，has都有可能为true或者false。</p>
<h3 id="Exist系列方法"><a href="#Exist系列方法" class="headerlink" title="Exist系列方法"></a>Exist系列方法</h3><p>判断某个记录是否存在可以使用<code>Exist</code>, 相比<code>Get</code>，<code>Exist</code>性能更好。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">has, err := testEngine.Exist(<span class="built_in">new</span>(RecordExist))</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist LIMIT 1</span></span><br><span class="line">has, err = testEngine.Exist(&amp;RecordExist&#123;</span><br><span class="line">		Name: <span class="string">"test1"</span>,</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist WHERE name = ? LIMIT 1</span></span><br><span class="line">has, err = testEngine.Where(<span class="string">"name = ?"</span>, <span class="string">"test1"</span>).Exist(&amp;RecordExist&#123;&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist WHERE name = ? LIMIT 1</span></span><br><span class="line">has, err = testEngine.SQL(<span class="string">"select * from record_exist where name = ?"</span>, <span class="string">"test1"</span>).Exist()</span><br><span class="line"><span class="comment">// select * from record_exist where name = ?</span></span><br><span class="line">has, err = testEngine.Table(<span class="string">"record_exist"</span>).Exist()</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist LIMIT 1</span></span><br><span class="line">has, err = testEngine.Table(<span class="string">"record_exist"</span>).Where(<span class="string">"name = ?"</span>, <span class="string">"test1"</span>).Exist()</span><br><span class="line"><span class="comment">// SELECT * FROM record_exist WHERE name = ? LIMIT 1</span></span><br></pre></td></tr></table></figure>

<h4 id="与Get的区别"><a href="#与Get的区别" class="headerlink" title="与Get的区别"></a>与Get的区别</h4><p>Get与Exist方法返回值都为bool和error，如果查询到实体存在，则Get方法会将查到的实体赋值给参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user :&#x3D; &amp;User&#123;Id:1&#125;</span><br><span class="line">has,err :&#x3D; testEngine.Get(user)	&#x2F;&#x2F; 执行结束后，user会被赋值为数据库中Id为1的实体</span><br><span class="line">has,err &#x3D; testEngine.Exist(user)	&#x2F;&#x2F; user中仍然是初始声明的user，不做改变</span><br></pre></td></tr></table></figure>

<h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>如果你的需求是：判断某条记录是否存在，若存在，则返回这条记录。</p>
<p>建议直接使用Get方法。</p>
<p>如果仅仅判断某条记录是否存在，则使用Exist方法，Exist的执行效率要比Get更高。</p>
<h3 id="查询的其他方法"><a href="#查询的其他方法" class="headerlink" title="查询的其他方法"></a>查询的其他方法</h3><h4 id="Find方法"><a href="#Find方法" class="headerlink" title="Find方法"></a>Find方法</h4><p>查询多条数据使用<code>Find</code>方法，Find方法的第一个参数为<code>slice</code>的指针或<code>Map</code>指针，即为查询后返回的结果，第二个参数可选，为查询的条件struct的指针。</p>
<h4 id="Join的使用"><a href="#Join的使用" class="headerlink" title="Join的使用"></a>Join的使用</h4><ul>
<li>Join(string,interface{},string)</li>
</ul>
<p>第一个参数为连接类型，当前支持INNER, LEFT OUTER, CROSS中的一个值， 第二个参数为string类型的表名，表对应的结构体指针或者为两个值的[]string，表示表名和别名， 第三个参数为连接条件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">    User <span class="string">`xorm:"extends"`</span></span><br><span class="line">    Group <span class="string">`xorm:"extends"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(UserGroup)</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"user"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users := <span class="built_in">make</span>([]UserGroup, <span class="number">0</span>)</span><br><span class="line">engine.Join(<span class="string">"INNER"</span>, <span class="string">"group"</span>, <span class="string">"group.id = user.group_id"</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<h4 id="Iterate方法"><a href="#Iterate方法" class="headerlink" title="Iterate方法"></a>Iterate方法</h4><p>Iterate方法提供逐条执行查询到的记录的方法，他所能使用的条件和Find方法完全相同。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := engine.Where(<span class="string">"age &gt; ? or name=?)"</span>, <span class="number">30</span>, <span class="string">"xlw"</span>).Iterate(<span class="built_in">new</span>(Userinfo), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, bean <span class="keyword">interface</span>&#123;&#125;)</span><span class="title">error</span></span>&#123;</span><br><span class="line">    user := bean.(*Userinfo)</span><br><span class="line">    <span class="comment">//do somthing use i and user</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Count方法"><a href="#Count方法" class="headerlink" title="Count方法"></a>Count方法</h4><p>统计数据使用<code>Count</code>方法，Count方法的参数为struct的指针并且成为查询条件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">total, err := engine.Where(<span class="string">"id &gt;?"</span>, <span class="number">1</span>).Count(user)</span><br></pre></td></tr></table></figure>

<h3 id="Rows方法"><a href="#Rows方法" class="headerlink" title="Rows方法"></a>Rows方法</h3><p>Rows方法和Iterate方法类似，提供逐条执行查询到的记录的方法，不过Rows更加灵活好用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">rows, err := engine.Where(<span class="string">"id &gt;?"</span>, <span class="number">1</span>).Rows(user)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    err = rows.Scan(user)</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sum系列方法"><a href="#Sum系列方法" class="headerlink" title="Sum系列方法"></a>Sum系列方法</h3><p>求和数据可以使用<code>Sum</code>, <code>SumInt</code>, <code>Sums</code> 和 <code>SumsInt</code> 四个方法，Sums系列方法的参数为struct的指针并且成为查询条件。代码实例参考<a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/chapter-05/9.sums.html" target="_blank" rel="noopener">https://gobook.io/read/gitea.com/xorm/manual-zh-CN/chapter-05/9.sums.html</a></p>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>更新数据使用<code>Update</code>方法，Update方法的第一个参数为需要更新的内容，可以为一个结构体指针或者一个Map[string]interface{}类型。当传入的为结构体指针时，只有非空和0的field才会被作为更新的字段。当传入的为Map类型时，key为数据库Column的名字，value为要更新的内容。</p>
<p><code>Update</code>方法将返回两个参数，第一个为 更新的记录数，需要注意的是 <code>SQLITE</code> 数据库返回的是根据更新条件查询的记录数而不是真正受更新的记录数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">user.Name = <span class="string">"myname"</span></span><br><span class="line">affected, err := engine.Id(id).Update(user)</span><br></pre></td></tr></table></figure>

<p>这里需要注意，Update会自动从user结构体中提取非0和非nil得值作为需要更新的内容，因此，如果需要更新一个值为0，则此种方法将无法实现，因此有两种选择：</p>
<ul>
<li>1.通过添加Cols函数指定需要更新结构体中的哪些值，未指定的将不更新，指定了的即使为0也会更新。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Id(id).Cols(<span class="string">"age"</span>).Update(&amp;user)</span><br></pre></td></tr></table></figure>

<ul>
<li>2.通过传入map[string]interface{}来进行更新，但这时需要额外指定更新到哪个表，因为通过map是无法自动检测更新哪个表的。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Table(<span class="built_in">new</span>(User)).Id(id).Update(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"age"</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="乐观锁Version"><a href="#乐观锁Version" class="headerlink" title="乐观锁Version"></a>乐观锁Version</h3><p>要使用乐观锁，需要使用version标记</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int64</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Version <span class="keyword">int</span> <span class="string">`xorm:"version"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Insert时，version标记的字段将会被设置为1，在Update时，Update的内容必须包含version原来的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.Id(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id = ?</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET ..., version = version + 1 WHERE id = ? AND version = ?</span></span><br></pre></td></tr></table></figure>

<h3 id="更新时间Updated"><a href="#更新时间Updated" class="headerlink" title="更新时间Updated"></a>更新时间Updated</h3><p>Updated可以让您在记录插入或每次记录更新时自动更新数据库中的标记字段为当前时间，需要在xorm标记中使用updated标记，如下所示进行标记，对应的字段可以为time.Time或者自定义的time.Time或者int,int64等int类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int64</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    UpdatedAt time.Time <span class="string">`xorm:"updated"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你希望临时不自动插入时间，则可以组合NoAutoTime()方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.NoAutoTime().Insert(&amp;user)</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除数据<code>Delete</code>方法，参数为struct的指针并且成为查询条件。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">affected, err := engine.Id(id).Delete(user)</span><br></pre></td></tr></table></figure>

<p><code>Delete</code>的返回值第一个参数为删除的记录数，第二个参数为错误。</p>
<p>注意：当删除时，如果user中包含有bool,float64或者float32类型，有可能会使删除失败。具体请查看 <a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/chapter-07/index.html#160" target="_blank" rel="noopener">FAQ</a></p>
<h3 id="软删除Deleted"><a href="#软删除Deleted" class="headerlink" title="软删除Deleted"></a>软删除Deleted</h3><p>Deleted可以让您不真正的删除数据，而是标记一个删除时间。使用此特性需要在xorm标记中使用deleted标记，如下所示进行标记，对应的字段必须为time.Time类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="keyword">int64</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    DeletedAt time.Time <span class="string">`xorm:"deleted"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Delete()时，deleted标记的字段将会被自动更新为当前时间而不是去删除该条记录，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.Id(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id = ?</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Delete(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET ..., deleted_at = ? WHERE id = ?</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Get(&amp;user)</span><br><span class="line"><span class="comment">// 再次调用Get，此时将返回false, nil，即记录不存在</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Delete(&amp;user)</span><br><span class="line"><span class="comment">// 再次调用删除会返回0, nil，即记录不存在</span></span><br></pre></td></tr></table></figure>

<p>那么如果记录已经被标记为删除后，要真正的获得该条记录或者真正的删除该条记录，需要启用Unscoped，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">engine.Id(<span class="number">1</span>).Unscoped().Get(&amp;user)</span><br><span class="line"><span class="comment">// 此时将可以获得记录</span></span><br><span class="line">engine.Id(<span class="number">1</span>).Unscoped().Delete(&amp;user)</span><br><span class="line"><span class="comment">// 此时将可以真正的删除记录</span></span><br></pre></td></tr></table></figure>

<h2 id="执行SQL查询"><a href="#执行SQL查询" class="headerlink" title="执行SQL查询"></a>执行SQL查询</h2><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>也可以直接执行一个SQL查询，即Select命令。在Postgres中支持原始SQL语句中使用 ` 和 ? 符号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sql := <span class="string">"select * from userinfo"</span></span><br><span class="line">results, err := engine.Query(sql)</span><br></pre></td></tr></table></figure>

<p>当调用 <code>Query</code> 时，第一个返回值 <code>results</code> 为 <code>[]map[string][]byte</code> 的形式。</p>
<p><code>Query</code> 的参数也允许传入 <code>*builder.Buidler</code> 对象</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SELECT * FROM table</span></span><br><span class="line">results, err := engine.Query(builder.Select(<span class="string">"*"</span>).From(<span class="string">"table"</span>))</span><br></pre></td></tr></table></figure>

<h3 id="QueryInterface"><a href="#QueryInterface" class="headerlink" title="QueryInterface"></a>QueryInterface</h3><p>和 <code>Query</code> 类似，但是返回值为 <code>[]map[string]interface{}</code></p>
<h3 id="QueryString"><a href="#QueryString" class="headerlink" title="QueryString"></a>QueryString</h3><p>和 <code>Query</code> 类似，但是返回值为 <code>[]map[string]string</code></p>
<h2 id="执行SQL命令"><a href="#执行SQL命令" class="headerlink" title="执行SQL命令"></a>执行SQL命令</h2><p>也可以直接执行一个SQL命令，即执行Insert， Update， Delete 等操作。此时不管数据库是何种类型，都可以使用 ` 和 ? 符号。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">"update `userinfo` set username=? where id=?"</span></span><br><span class="line">res, err := engine.Exec(sql, <span class="string">"xiaolun"</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="简洁版英文手册"><a href="#简洁版英文手册" class="headerlink" title="简洁版英文手册"></a>简洁版英文手册</h1><h2 id="Overview-¶"><a href="#Overview-¶" class="headerlink" title="Overview ¶"></a>Overview <a href="https://pkg.go.dev/xorm.io/xorm#pkg-overview" target="_blank" rel="noopener">¶</a></h2><p>Package xorm is a simple and powerful ORM for Go.</p>
<h3 id="Installation-¶"><a href="#Installation-¶" class="headerlink" title="Installation ¶"></a>Installation <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Installation" target="_blank" rel="noopener">¶</a></h3><p>Make sure you have installed Go 1.11+ and then:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get xorm.io/xorm</span><br></pre></td></tr></table></figure>

<h3 id="Create-Engine-¶"><a href="#Create-Engine-¶" class="headerlink" title="Create Engine ¶"></a>Create Engine <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Create_Engine" target="_blank" rel="noopener">¶</a></h3><p>Firstly, we should new an engine for a database</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine, err := xorm.NewEngine(driverName, dataSourceName)</span><br></pre></td></tr></table></figure>

<p>Method NewEngine’s parameters is the same as sql.Open. It depends drivers’ implementation. Generally, one engine for an application is enough. You can set it as package variable.</p>
<h3 id="Raw-Methods-¶"><a href="#Raw-Methods-¶" class="headerlink" title="Raw Methods ¶"></a>Raw Methods <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Raw_Methods" target="_blank" rel="noopener">¶</a></h3><p>XORM also support raw SQL execution:</p>
<ol>
<li>query a SQL string, the returned results is []map[string][]byte</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">results, err := engine.Query(<span class="string">"select * from user"</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>execute a SQL string, the returned results</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Exec(<span class="string">"update user set .... where ..."</span>)</span><br></pre></td></tr></table></figure>

<h3 id="ORM-Methods-¶"><a href="#ORM-Methods-¶" class="headerlink" title="ORM Methods ¶"></a>ORM Methods <a href="https://pkg.go.dev/xorm.io/xorm#hdr-ORM_Methods" target="_blank" rel="noopener">¶</a></h3><p>There are 8 major ORM methods and many helpful methods to use to operate database.</p>
<ol>
<li>Insert one or multiple records to database</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Insert(&amp;<span class="keyword">struct</span>)</span><br><span class="line"><span class="comment">// INSERT INTO struct () values ()</span></span><br><span class="line">affected, err := engine.Insert(&amp;struct1, &amp;struct2)</span><br><span class="line"><span class="comment">// INSERT INTO struct1 () values ()</span></span><br><span class="line"><span class="comment">// INSERT INTO struct2 () values ()</span></span><br><span class="line">affected, err := engine.Insert(&amp;sliceOfStruct)</span><br><span class="line"><span class="comment">// INSERT INTO struct () values (),(),()</span></span><br><span class="line">affected, err := engine.Insert(&amp;struct1, &amp;sliceOfStruct2)</span><br><span class="line"><span class="comment">// INSERT INTO struct1 () values ()</span></span><br><span class="line"><span class="comment">// INSERT INTO struct2 () values (),(),()</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Query one record or one variable from database</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">has, err := engine.Get(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM user LIMIT 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> id <span class="keyword">int64</span></span><br><span class="line">has, err := engine.Table(<span class="string">"user"</span>).Where(<span class="string">"name = ?"</span>, name).Get(&amp;id)</span><br><span class="line"><span class="comment">// SELECT id FROM user WHERE name = ? LIMIT 1</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Query multiple records from database</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sliceOfStructs []Struct</span><br><span class="line">err := engine.Find(&amp;sliceOfStructs)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapOfStructs = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int64</span>]Struct)</span><br><span class="line">err := engine.Find(&amp;mapOfStructs)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> int64s []<span class="keyword">int64</span></span><br><span class="line">err := engine.Table(<span class="string">"user"</span>).Cols(<span class="string">"id"</span>).Find(&amp;int64s)</span><br><span class="line"><span class="comment">// SELECT id FROM user</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Query multiple records and record by record handle, there two methods, one is Iterate, another is Rows</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := engine.Iterate(...)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"></span><br><span class="line">rows, err := engine.Rows(...)</span><br><span class="line"><span class="comment">// SELECT * FROM user</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line">bean := <span class="built_in">new</span>(Struct)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    err = rows.Scan(bean)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Update one or more records</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.ID(...).Update(&amp;user)</span><br><span class="line"><span class="comment">// UPDATE user SET ...</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Delete one or more records, Delete MUST has condition</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">affected, err := engine.Where(...).Delete(&amp;user)</span><br><span class="line"><span class="comment">// DELETE FROM user Where ...</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Count records</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">counts, err := engine.Count(&amp;user)</span><br><span class="line"><span class="comment">// SELECT count(*) AS total FROM user</span></span><br><span class="line"></span><br><span class="line">counts, err := engine.SQL(<span class="string">"select count(*) FROM user"</span>).Count()</span><br><span class="line"><span class="comment">// select count(*) FROM user</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>Sum records</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sumFloat64, err := engine.Sum(&amp;user, <span class="string">"id"</span>)</span><br><span class="line"><span class="comment">// SELECT sum(id) from user</span></span><br><span class="line"></span><br><span class="line">sumFloat64s, err := engine.Sums(&amp;user, <span class="string">"id1"</span>, <span class="string">"id2"</span>)</span><br><span class="line"><span class="comment">// SELECT sum(id1), sum(id2) from user</span></span><br><span class="line"></span><br><span class="line">sumInt64s, err := engine.SumsInt(&amp;user, <span class="string">"id1"</span>, <span class="string">"id2"</span>)</span><br><span class="line"><span class="comment">// SELECT sum(id1), sum(id2) from user</span></span><br></pre></td></tr></table></figure>

<h3 id="Conditions-¶"><a href="#Conditions-¶" class="headerlink" title="Conditions ¶"></a>Conditions <a href="https://pkg.go.dev/xorm.io/xorm#hdr-Conditions" target="_blank" rel="noopener">¶</a></h3><p>The above 8 methods could use with condition methods chainable. Attention: the above 8 methods should be the last chainable method.</p>
<ol>
<li>ID, In</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.ID(<span class="number">1</span>).Get(&amp;user) <span class="comment">// for single primary key</span></span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id = 1</span></span><br><span class="line">engine.ID(schemas.PK&#123;<span class="number">1</span>, <span class="number">2</span>&#125;).Get(&amp;user) <span class="comment">// for composite primary keys</span></span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id1 = 1 AND id2 = 2</span></span><br><span class="line">engine.In(<span class="string">"id"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id IN (1, 2, 3)</span></span><br><span class="line">engine.In(<span class="string">"id"</span>, []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE id IN (1, 2, 3)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Where, And, Or</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Where().And().Or().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user WHERE (.. AND ..) OR ...</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>OrderBy, Asc, Desc</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Asc().Desc().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user ORDER BY .. ASC, .. DESC</span></span><br><span class="line">engine.OrderBy().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user ORDER BY ..</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Limit, Top</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.Limit().Find()</span><br><span class="line"><span class="comment">// SELECT * FROM user LIMIT .. OFFSET ..</span></span><br><span class="line">engine.Top(<span class="number">5</span>).Find()</span><br><span class="line"><span class="comment">// SELECT TOP 5 * FROM user // for mssql</span></span><br><span class="line"><span class="comment">// SELECT * FROM user LIMIT .. OFFSET 0 //for other databases</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>SQL, let you custom SQL</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users []User</span><br><span class="line">engine.SQL(<span class="string">"select * from user"</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Cols, Omit, Distinct</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> users []*User</span><br><span class="line">engine.Cols(<span class="string">"col1, col2"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT col1, col2 FROM user</span></span><br><span class="line">engine.Cols(<span class="string">"col1"</span>, <span class="string">"col2"</span>).Where().Update(user)</span><br><span class="line"><span class="comment">// UPDATE user set col1 = ?, col2 = ? Where ...</span></span><br><span class="line">engine.Omit(<span class="string">"col1"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT col2, col3 FROM user</span></span><br><span class="line">engine.Omit(<span class="string">"col1"</span>).Insert(&amp;user)</span><br><span class="line"><span class="comment">// INSERT INTO table (non-col1) VALUES ()</span></span><br><span class="line">engine.Distinct(<span class="string">"col1"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT DISTINCT col1 FROM user</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Join, GroupBy, Having</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">engine.GroupBy(<span class="string">"name"</span>).Having(<span class="string">"name='xlw'"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//SELECT * FROM user GROUP BY name HAVING name='xlw'</span></span><br><span class="line">engine.Join(<span class="string">"LEFT"</span>, <span class="string">"userdetail"</span>, <span class="string">"user.id=userdetail.id"</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//SELECT * FROM user LEFT JOIN userdetail ON user.id=userdetail.id</span></span><br></pre></td></tr></table></figure>

<p>More usage, please visit <a href="http://xorm.io/docs" target="_blank" rel="noopener">http://xorm.io/docs</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XORM是基于Go语言的，功能全面且强大的ORM库。</p>
<p>本文是xorm的操作手册，后续有原创文章描述本人的xorm实例代码。</p>
<p><strong>*<u>申明：以上大部分内容，是本人在遍历性阅读官方文档时的摘抄，不是本人原创，目的是迁移到自己博客，方便后续学习与查阅。小部分内容为个人代码。</u>*</strong></p>
<hr>
<p><u><strong><em>资料来源：</em></strong></u></p>
<p><a href="https://gobook.io/read/gitea.com/xorm/manual-zh-CN/" target="_blank" rel="noopener">xorm 官方操作手册</a></p>
<p><a href="https://www.kancloud.cn/xormplus/xorm/167077" target="_blank" rel="noopener">xorm 操作指南</a></p>
<p><a href="https://xorm.io/" target="_blank" rel="noopener">xorm 官网</a></p>
<p><a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">github地址：https://github.com/go-xorm/xorm</a></p>
]]></content>
      <categories>
        <category>Go语言</category>
        <category>xorm</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
        <tag>Go语言</tag>
        <tag>xorm</tag>
        <tag>操作手册</tag>
        <tag>搬运</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6之 async 与 await</title>
    <url>/2020/11/25/es6-async-await/</url>
    <content><![CDATA[<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>async 是 ES6 才有的与异步操作有关的关键字，和 Promise ， Generator 有很大关联的。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, param[, ... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>name: 函数名称。</li>
<li>param: 要传递给函数的参数的名称。</li>
<li>statements: 函数体语句。</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a>，这个promise要么会通过一个由async函数返回的值被解决，要么会通过一个从async函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p>
<a id="more"></a>

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>async函数可能包含0个或者多个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener"><code>await</code></a>表达式。await表达式会暂停整个async函数的执行进程并出让其控制权，只有当其等待的基于promise的异步操作被兑现或被拒绝之后才会恢复进程。promise的解决值会被当作该await表达式的返回值。使用<code>async</code> / <code>await</code>关键字就可以在异步代码中使用普通的<code>try</code> / <code>catch</code>代码块。</p>
<p><code>await</code>关键字只在async函数内有效。如果你在async函数体之外使用它，就会抛出语法错误 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a> 。</p>
<p><code>async</code>/<code>await</code>的目的为了简化使用基于promise的API时所需的语法。<code>async</code>/<code>await</code>的行为就好像搭配使用了生成器和promise。</p>
<p>async函数一定会返回一个promise对象。如果一个async函数的返回值看起来不是promise，那么它将会被隐式地包装在一个promise中。</p>
<p>例如，如下代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>async函数的函数体可以被看作是由0个或者多个await表达式分割开来的。从第一行代码直到（并包括）第一个await表达式（如果有的话）都是同步运行的。这样的话，一个不含await表达式的async函数是会同步运行的。然而，如果函数体内有一个await表达式，async函数就一定会异步执行。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在await表达式之后的代码可以被认为是存在在链式调用的then回调中。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"helloAsync"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(helloAsync())  <span class="comment">// Promise &#123;&lt;resolved&gt;: "helloAsync"&#125;</span></span><br><span class="line"> </span><br><span class="line">helloAsync().then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(v);         <span class="comment">// helloAsync</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</p>
<p>await 关键字仅在 async function 中有效。如果在 async function 函数体外使用 await ，你只会得到一个语法错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> task = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"run task"</span>)&#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask  = debounce(task, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounceTask)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"testAwait"</span>);</span><br><span class="line">          resolve();</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helloAsync"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>



<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>这个函数和generator函数有些类似，从例子中可以看得出来，async函数在function前面有个async作为标识，意思就是异步函数，里面有个await搭配使用，每到await的地方就是程序需要等待执行后面的程序，语义化很强，下面总结一下<strong>async函数的特点</strong>：</p>
<ul>
<li>语义化强</li>
<li>里面的await只能在async函数中使用</li>
<li>await后面的语句可以是promise对象、数字、字符串等</li>
<li>async函数返回的是一个Promsie对象</li>
<li>await语句后的Promise对象变成reject状态时，那么整个async函数会中断，后面的程序不会继续执行</li>
</ul>
<h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>await 操作符用于等待一个 Promise 对象, 它只能在异步函数 async function 内部使用。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[return_value] = <span class="keyword">await</span> expression;</span><br></pre></td></tr></table></figure>

<ul>
<li>expression: 一个 Promise 对象或者任何要等待的值。</li>
</ul>
<h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>await 表达式会暂停当前 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async function</code></a> 的执行，等待 Promise 处理完成。若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async function</code></a>。</p>
<p>若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</p>
<p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</p>
<p>如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">await</span> testAwait (<span class="string">"hello world"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(x); </span><br><span class="line">&#125;</span><br><span class="line">helloAsync ();</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<p>正常情况下，await 命令后面是一个 Promise 对象，它也可以跟其他值，如字符串，布尔值，数值以及普通函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAwait</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"testAwait"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">helloAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> testAwait();</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"helloAsync"</span>);</span><br><span class="line">&#125;</span><br><span class="line">helloAsync();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>



<p>await针对所跟不同表达式的处理方式：</p>
<ul>
<li>Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。</li>
<li>非 Promise 对象：直接返回对应的值。</li>
</ul>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><code>AsyncFunction</code> 构造函数</p>
<hr>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">developer.mozilla.org(MDN) - async函数</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">developer.mozilla.org(MDN) - await</a></p>
<p><a href="https://www.runoob.com/w3cnote/es6-async.html" target="_blank" rel="noopener">菜鸟教程 - ES6 async 函数</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>异步</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>ES6</tag>
        <tag>异步函数</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言之Prometheus Exporter开发</title>
    <url>/2020/11/25/go-prometheus-export/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>蓝鲸监控通过 job 部署 prometheus 社区的 Exporter，对目标组件进行性能数据采集。接着 bkmetricbeat 从 Exporter 上周期拉取性能数据并通过数据通道上报。</p>
<h3 id="自定义组件采集导入流程"><a href="#自定义组件采集导入流程" class="headerlink" title="自定义组件采集导入流程"></a>自定义组件采集导入流程</h3><p>蓝鲸监控当前支持使用 go 编写 Exporter</p>
<ul>
<li><p>在社区找到适合自己的 Exporter 或者编写新的 Exporter</p>
</li>
<li><p>将源码编译成二进制文件</p>
</li>
<li><p>将编译的 Exporter 打成 zip 包</p>
</li>
<li><p>上传配置文件</p>
</li>
</ul>
<a id="more"></a>

<h2 id="Exporter-开发"><a href="#Exporter-开发" class="headerlink" title="Exporter 开发"></a>Exporter 开发</h2><h3 id="Exporter-简介"><a href="#Exporter-简介" class="headerlink" title="Exporter 简介"></a>Exporter 简介</h3><ul>
<li>Exporter 本质上就是将收集的数据，转化为对应的⽂本格式，并提供 http 接口，供蓝鲸监控采集器 定期采集数据。</li>
</ul>
<h3 id="Exporter-基础"><a href="#Exporter-基础" class="headerlink" title="Exporter 基础"></a>Exporter 基础</h3><ul>
<li><p>指标介绍 Prometheus 中主要使⽤的四类指标类型，如下所示：</p>
<ul>
<li>Counter (累加指标)</li>
<li>Gauge (测量指标)</li>
<li>Summary (概略图)</li>
<li>Histogram (直方图)</li>
</ul>
<p>最常使用的是 Gauge，Gauge 代表了采集的一个单个数据，这个数据可以增加也可以减少，比如 CPU 使用情况，内存使用量，硬盘当前的空间容量等。 Counter 一个累加指标数据，这个值随着时间只会逐渐的增加，比如程序完成的总任务数量，运行错误发生的总次数等，代表了持续增加的数据包或者传输字节累加值。</p>
<blockquote>
<p>【注】：所有指标的值仅支持 float64 类型。</p>
</blockquote>
</li>
<li><p>文本格式以下面输出为例：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># metric:</span></span><br><span class="line">sample_metric1 12.47</span><br><span class="line">sample_metric2 &#123;partition=<span class="string">"c:"</span>&#125; 0.44</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p>#: 表示注释 sample_metric1 和 sample_metric2 表示指标名称</p>
<p>partition: 表示指标的作⽤维度，例如磁盘分区使⽤率，维度就是磁盘分区，即每个磁盘分区都有⼀个磁盘分区使⽤率的值</p>
<p>c: 表示维度的值，例如磁盘分区的 C 盘 / D 盘等 12.47 和 0.44 表示对应指标的值</p>
<h3 id="Exporter-开发-1"><a href="#Exporter-开发-1" class="headerlink" title="Exporter 开发"></a>Exporter 开发</h3><ul>
<li><p>环境搭建：</p>
<ul>
<li>Golang 安装</li>
<li>apt-get install git</li>
<li>wget <a href="https://dl.google.com/go/go1.10.7.linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.10.7.linux-amd64.tar.gz</a></li>
<li>tar -C /usr/local -xzf go1.10.7.linux-amd64.tar.gz</li>
<li>export PATH=$PATH:/usr/local/go/bin</li>
<li>export GOPATH=<code>你的代码目录</code></li>
</ul>
<blockquote>
<p>不同系统安装介绍：<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md</a></p>
</blockquote>
</li>
<li><p>Prometheus Exporter 开发依赖库</p>
<p>⾸先引⼊ Prometheus 的依赖库</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -v github.com/prometheus/client_golang/prometheus</span><br></pre></td></tr></table></figure>

<ul>
<li>开发示例</li>
</ul>
<ol>
<li>导⼊依赖模块: 本例计划采集主机的内存和磁盘信息，因此引⼊以下依赖库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -v github.com/shirou/gopsutil</span><br><span class="line">go get -v github.com/go-ole/go-ole</span><br><span class="line">go get -v github.com/StackExchange/wmi</span><br><span class="line">go get -v github.com/golang/protobuf/proto</span><br><span class="line">go get -v golang.org/x/sys/unix</span><br></pre></td></tr></table></figure>

<ol>
<li>新建⼀个 Exporter 项⽬： ⼀个 Exporter 只需要⼀个⽂件即可；在 GOPATH 下 src ⽬录下新建⼀个 test_exporter ⽬录和⼀个 test_exporter.go ⽂件: test_exporter.go ⽂件第⼀⾏必须写上 package main 可执⾏的命令必须始终使⽤ package main。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"flag"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/prometheus/client_golang/prometheus"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/client_golang/prometheus/promhttp"</span></span><br><span class="line">	<span class="string">"github.com/shirou/gopsutil/disk"</span></span><br><span class="line">	<span class="string">"github.com/shirou/gopsutil/mem"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol>
<li>定义 Exporter 的版本（Version）、监听地址（listenAddress）、采集 url（metricPath）以及⾸⻚（landingPage）</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Version       = <span class="string">"1.0.0.dev"</span></span><br><span class="line">	listenAddress = flag.String(<span class="string">"web.listen-address"</span>, <span class="string">":9601"</span>, <span class="string">"Address to listen on for web interface and telemetry."</span>)</span><br><span class="line">	metricPath    = flag.String(<span class="string">"web.telemetry-path"</span>, <span class="string">"/metrics"</span>, <span class="string">"Path under which to expose metrics."</span>)</span><br><span class="line">	landingPage   = []<span class="keyword">byte</span>(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Example Exporter"</span> + Version + <span class="string">"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Example Exporter"</span> + Version + <span class="string">"&lt;/h1&gt;&lt;p&gt;&lt;ahref='"</span> + *metricPath + <span class="string">"'&gt;Metrics&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol>
<li>定义 Exporter 结构体</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Exporter <span class="keyword">struct</span> &#123;</span><br><span class="line">	error        prometheus.Gauge</span><br><span class="line">	scrapeErrors *prometheus.CounterVec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>定义结构体实例化的函数 NewExporter</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewExporter</span><span class="params">()</span> *<span class="title">Exporter</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Exporter&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Describe 函数，传递指标描述符到 channel，这个函数不⽤动，直接使⽤即可，⽤来⽣成采集指标的描述信息。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Exporter)</span> <span class="title">Describe</span><span class="params">(ch <span class="keyword">chan</span>&lt;- *prometheus.Desc)</span></span> &#123;</span><br><span class="line">	metricCh := <span class="built_in">make</span>(<span class="keyword">chan</span> prometheus.Metric)</span><br><span class="line">	doneCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> m := <span class="keyword">range</span> metricCh &#123;</span><br><span class="line">			ch &lt;- m.Desc()</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">close</span>(doneCh)</span><br><span class="line">	&#125;()</span><br><span class="line">	e.Collect(metricCh)</span><br><span class="line">	<span class="built_in">close</span>(metricCh)</span><br><span class="line">	&lt;-doneCh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>Collect 函数将执⾏抓取函数并返回数据，返回的数据传递到 channel 中，并且传递的同时绑定原先的指标描述符，以及指标的类型（Guage）；需要将所有的指标获取函数在这⾥写⼊。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//collect 函数，采集数据的⼊⼝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Exporter)</span> <span class="title">Collect</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	<span class="comment">// 每个指标值的采集逻辑，在对应的采集函数中</span></span><br><span class="line">	<span class="keyword">if</span> err = ScrapeMem(ch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		e.scrapeErrors.WithLabelValues(<span class="string">"mem"</span>).Inc()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err = ScrapeDisk(ch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		e.scrapeErrors.WithLabelValues(<span class="string">"disk"</span>).Inc()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>指标仅有单条数据，不带维度信息示例如下：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScrapeMem</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// 指标获取逻辑，此处不做具体操作，仅仅赋值进⾏示例</span></span><br><span class="line">	mem_info, _ := mem.VirtualMemory()</span><br><span class="line">	<span class="comment">// ⽣成采集的指标名</span></span><br><span class="line">	metric_name := prometheus.BuildFQName(<span class="string">"sys"</span>, <span class="string">""</span>, <span class="string">"mem_usage"</span>)</span><br><span class="line">	<span class="comment">// ⽣成 NewDesc 类型的数据格式，该指标⽆维度，[] string &#123;&#125; 为空</span></span><br><span class="line">	new_desc := prometheus.NewDesc(metric_name, <span class="string">"Gauge metric with mem_usage"</span>, []<span class="keyword">string</span>&#123;&#125;, <span class="literal">nil</span>)</span><br><span class="line">	<span class="comment">// ⽣成具体的采集信息并写⼊ ch 通道</span></span><br><span class="line">	metric_mes := prometheus.MustNewConstMetric(new_desc,</span><br><span class="line">		prometheus.GaugeValue, mem_info.UsedPercent)</span><br><span class="line">	ch &lt;- metric_mes</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>指标有多条数据，带维度信息示例如下：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScrapeDisk</span><span class="params">(ch <span class="keyword">chan</span>&lt;- prometheus.Metric)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	fs, _ := disk.Partitions(<span class="literal">false</span>)</span><br><span class="line">	<span class="keyword">for</span> _, val := <span class="keyword">range</span> fs &#123;</span><br><span class="line">		d, _ := disk.Usage(val.Mountpoint)</span><br><span class="line">		metric_name := prometheus.BuildFQName(<span class="string">"sys"</span>, <span class="string">""</span>, <span class="string">"disk_size"</span>)</span><br><span class="line">		new_desc := prometheus.NewDesc(metric_name, <span class="string">"Gauge metric with disk_usage"</span>, []<span class="keyword">string</span>&#123;<span class="string">"mountpoint"</span>&#125;, <span class="literal">nil</span>)</span><br><span class="line">		metric_mes := prometheus.MustNewConstMetric(new_desc,</span><br><span class="line">			prometheus.GaugeValue, <span class="keyword">float64</span>(d.UsedPercent), val.Mountpoint)</span><br><span class="line">		ch &lt;- metric_mes</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>主函数</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 解析定义的监听端⼝等信息</span></span><br><span class="line">	flag.Parse()</span><br><span class="line">	<span class="comment">// ⽣成⼀个 Exporter 类型的对象，该 exporter 需具有 collect 和 Describe ⽅法</span></span><br><span class="line">	exporter := NewExporter()</span><br><span class="line">	<span class="comment">// 将 exporter 注册⼊ prometheus，prometheus 将定期从 exporter 拉取数据</span></span><br><span class="line">	prometheus.MustRegister(exporter)</span><br><span class="line">	<span class="comment">// 接收 http 请求时，触发 collect 函数，采集数据</span></span><br><span class="line">	http.Handle(*metricPath, promhttp.Handler())</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		w.Write(landingPage)</span><br><span class="line">	&#125;)</span><br><span class="line">	log.Fatal(http.ListenAndServe(*listenAddress, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>编译 Exporter</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build test_exporter.go</span><br><span class="line">./test_exporter</span><br></pre></td></tr></table></figure>

<ol>
<li>运⾏起来后，访问 <a href="http://127.0.0.1:9601/metrics" target="_blank" rel="noopener">http://127.0.0.1:9601/metrics</a> 即可验证</li>
</ol>
<p>⾄此 Exporter 开发完成，其中 8，9 两步中的函数是重点，⽬前仅仅写了⼀些数据进⾏示例，其中的监控指标获取数据就是该部分的主要功能，需要编写对应逻辑获取指标的值。</p>
<h2 id="制作⼀键导⼊包"><a href="#制作⼀键导⼊包" class="headerlink" title="制作⼀键导⼊包"></a>制作⼀键导⼊包</h2><h3 id="Exporter-编译"><a href="#Exporter-编译" class="headerlink" title="Exporter 编译"></a>Exporter 编译</h3><p>蓝鲸监控 Exporter 默认只⽀持 64 位机器运⾏ Exporter。</p>
<h4 id="linux-系统"><a href="#linux-系统" class="headerlink" title="linux 系统"></a>linux 系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译 windows exporter</span></span><br><span class="line">env CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o ./exporterwindows.exe test_exporter</span><br><span class="line"><span class="comment"># test_exporter 为 GOPATH 下我们创建的⽬录名</span></span><br><span class="line"><span class="comment"># 编译 linux exporter</span></span><br><span class="line">env CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./exporter-linux</span><br><span class="line">test_exporter</span><br></pre></td></tr></table></figure>

<h4 id="windows-系统"><a href="#windows-系统" class="headerlink" title="windows 系统"></a>windows 系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译 windows exporter</span></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=windows</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build -o ./exporter-windows.exe test_exporter</span><br><span class="line"><span class="comment"># 编译 linux exporter</span></span><br><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=linux</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build -o ./exporter-linux test_exporter</span><br></pre></td></tr></table></figure>



<hr>
<p>参考链接：<br><a href="https://bk.tencent.com/docs/document/5.1/19/600" target="_blank" rel="noopener">蓝鲸监控 - Exporter 开发</a></p>
]]></content>
      <categories>
        <category>Go语言</category>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Go语言</tag>
        <tag>Prometheus</tag>
        <tag>Exporter</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝鲸开发框架进阶</title>
    <url>/2020/11/24/bk-django-framework-advanced/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>之前的文章描述了蓝鲸开发框架的基础指南，以下将继续上文，讲述蓝鲸开发框架的进阶使用，包括登陆与用户对接、数据库配置、Django的配置修改，和中间件及公共方法。</p>
<a id="more"></a>

<h1 id="开发框架使用进阶"><a href="#开发框架使用进阶" class="headerlink" title="开发框架使用进阶"></a>开发框架使用进阶</h1><h2 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h2><h3 id="豁免登录"><a href="#豁免登录" class="headerlink" title="豁免登录"></a>豁免登录</h3><p>目前所有的 view 访问全部强制要求登录鉴权, 用户可以豁免一些 view 的登录限制，主要用于对外提供 API。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.account.decorators <span class="keyword">import</span> login_exempt</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myview</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>

<h2 id="User-Model-获取-amp-使用方式"><a href="#User-Model-获取-amp-使用方式" class="headerlink" title="User Model 获取 &amp; 使用方式"></a>User Model 获取 &amp; 使用方式</h2><h3 id="获取-User-Model"><a href="#获取-User-Model" class="headerlink" title="获取 User Model"></a>获取 User Model</h3><p>通过 <code>from blueapps.account import get_user_model</code> 可得到 User Model</p>
<h3 id="User-方法属性说明"><a href="#User-方法属性说明" class="headerlink" title="User 方法属性说明"></a>User 方法属性说明</h3><ul>
<li>username</li>
</ul>
<p>用户唯一标识，如 QQ 号</p>
<ul>
<li>nickname</li>
</ul>
<p>用于前端展示的用户名，如 QQ 昵称</p>
<ul>
<li>avatar_url</li>
</ul>
<p>用户头像 URL</p>
<ul>
<li>get_full_name</li>
</ul>
<p>用于前端展示的完整用户名，如 QQ 昵称</p>
<h3 id="User-扩展属性说明"><a href="#User-扩展属性说明" class="headerlink" title="User 扩展属性说明"></a>User 扩展属性说明</h3><ul>
<li>get_property(key)</li>
</ul>
<p>用户获取水平扩展属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.account <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">user = get_user_model().objects.get(username=xxx)</span><br><span class="line">user.get_property(key)</span><br></pre></td></tr></table></figure>

<ul>
<li>set_property(key,value)</li>
</ul>
<p>用户设置水平扩展属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.account <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line">user = get_user_model().objects.get(username=xxx)</span><br><span class="line">user.set_property(key, value)</span><br></pre></td></tr></table></figure>

<h3 id="在模板中使用-User-作为外键"><a href="#在模板中使用-User-作为外键" class="headerlink" title="在模板中使用 User 作为外键"></a>在模板中使用 User 作为外键</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    person = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name=<span class="string">u"用户"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Django-APP-管理员设置"><a href="#Django-APP-管理员设置" class="headerlink" title="Django APP 管理员设置"></a>Django APP 管理员设置</h3><p>修改 config/default.py 的 INIT_SUPERUSER 配置，填写用户名列表，默认值是应用创建人，列表中的人员将拥有预发布环境和正式环境的管理员权限。需要注意的是，该配置需要在首次提测和上线前修改，之后的修改将不会生效。 如果不小心将唯一的管理员权限去掉了，有两种方式新增管理员：</p>
<ul>
<li>通过 migrations 实现</li>
</ul>
<p>在你的 APP 目录下，找到 migrations 文件夹，新建文件 {INDEX}_init_superuser.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    添加用户为管理员</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    User = apps.get_model(<span class="string">"account"</span>, <span class="string">"User"</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> settings.INIT_SUPERUSER:</span><br><span class="line">        User.objects.update_or_create(</span><br><span class="line">            username=name,</span><br><span class="line">            defaults=&#123;<span class="string">'is_staff'</span>: <span class="literal">True</span>, <span class="string">'is_active'</span>: <span class="literal">True</span>, <span class="string">'is_superuser'</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'&#123;APP&#125;'</span>, <span class="string">'&#123;APP_LAST_MIGRATION&#125;'</span>)</span><br><span class="line">    ]</span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(load_data)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>其中，{APP} 表示你的当前 APP，{APP_LAST_MIGRATION} 表示当前 mirgations 文件中最新一个文件名（如 “0003_auto_20180301_1732”），{INDEX} 表示最新一个文件名的前缀数字加 1（如 “0003_auto_20180301_1732” 的前缀数字是 “0003”，那么 {INDEX} 设置为 “0004”）。</p>
<ul>
<li>通过 views 实现</li>
</ul>
<p>在你的 APP 目录的 views 文件中，添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blueapps.account <span class="keyword">import</span> get_user_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    添加用户为管理员</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    User = get_user_model()</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> settings.INIT_SUPERUSER:</span><br><span class="line">        User.objects.update_or_create(</span><br><span class="line">            username=name,</span><br><span class="line">            defaults=&#123;<span class="string">'is_staff'</span>: <span class="literal">True</span>, <span class="string">'is_active'</span>: <span class="literal">True</span>, <span class="string">'is_superuser'</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Success'</span>)</span><br></pre></td></tr></table></figure>

<p>然后配置一条 URL 路由规则到该 view，提测、上线后访问对应 URL 就可以初始化管理员了。</p>
<h2 id="配置修改指引"><a href="#配置修改指引" class="headerlink" title="配置修改指引"></a>配置修改指引</h2><h3 id="settings-主要配置"><a href="#settings-主要配置" class="headerlink" title="settings 主要配置"></a>settings 主要配置</h3><p><strong>注意</strong>：不要修改 settings.py ，配置项修改请在 config 目录下的文件中进行。</p>
<p>其中，如果修改 config/default.py 配置项对所有的运行环境生效（正式环境、预发布环境、本地环境）； 修改 config/prod.py 配置项只会对正式环境生效； 修改 config/stag.py 配置项只会对预发布环境生效； 修改 config/dev.py 配置项只会对本地开发环境生效； 在多人开发时，为了避免 config/dev.py 中的配置互相影响，每个开发者都可以在项目根目录下新增 local_settings.py 文件，来添加各开发者不同的本地开发配置，如 DATABASES，并在提交代码时忽略 local_settings.py 文件。</p>
<ul>
<li>自定义 Django APP</li>
</ul>
<p>请修改 config/default.py 的 INSTALLED_APPS</p>
<ul>
<li>自定义中间件</li>
</ul>
<p>请修改 config/default.py 的 MIDDLEWARE</p>
<ul>
<li>自定义数据库</li>
</ul>
<p>如无必要请不要覆盖默认 default 数据库，正式环境和预发布环境分别修改 config/prod.py 和 config/stag.py，使用 DATABASES.update() 方法。 本地环境请修改 config/dev.py 的 DATABASES。</p>
<ul>
<li>自定义日志级别</li>
</ul>
<p>日志级别默认是 INFO，如需修改：</p>
<ol>
<li><p>所有环境下的日志级别，请在 config/default.py 对应位置修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line"><span class="comment"># load logging settings</span></span><br><span class="line">LOGGING = get_logging_config_dict(locals())</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果只希望针对特定环境进行日志级别设置，则在对应环境配置文件（ config/prod.py（只影响生产环境）、config/stag.py（只影响预发布环境）、config/dev.py（只影响预本地开发环境））中取消对应代码注释并修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义本地环境日志级别</span></span><br><span class="line"><span class="keyword">from</span> blueapps.conf.log <span class="keyword">import</span> set_log_level <span class="comment"># noqa</span></span><br><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line">LOGGING = set_log_level(locals())</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: 这种修改方式依赖 blueapps 版本 &gt;= 3.3.1。</p>
</li>
</ol>
<p>其中，不同配置的含义如下：</p>
<ol>
<li>DEBUG：用于调试目的的底层系统信息</li>
<li>INFO：普通的系统信息</li>
<li>WARNING：表示出现一个较小的问题。</li>
<li>ERROR：表示出现一个较大的问题。</li>
<li>CRITICAL：表示出现一个致命的问题。</li>
</ol>
<ul>
<li>静态资源版本号更新</li>
</ul>
<p>修改 config/default.py 的 STATIC_VERSION。</p>
<ul>
<li>添加 celery 任务</li>
</ul>
<p>把 celery 任务模块加入 config/default.py 的 CELERY_IMPORTS。</p>
<ul>
<li>初始化管理员列表</li>
</ul>
<p>请修改 config/default.py 的 INIT_SUPERUSER，列表中的人员将拥有预发布环境和正式环境的管理员权限。请在首次提测和上线前修改，之后的修改将不会生效。</p>
<ul>
<li>自定义其他 Django 支持的配置</li>
</ul>
<p>请直接在 config/default.py 添加需要的配置覆盖默认值。</p>
<h3 id="使用-settings-配置"><a href="#使用-settings-配置" class="headerlink" title="使用 settings 配置"></a>使用 settings 配置</h3><p>在 Django 应用中，可以通过导入 django.conf.settings 对象来使用设置。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="comment"># Do something</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.settings <span class="keyword">import</span> DEBUG  <span class="comment"># This won't work.</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：你的代码不应该从 config.default.py 或其他设置文件中导入。django.conf.settings 抽象出默认设置和站点特定设置的概念；它表示一个单一的接口。它还可以将代码从你的设置所在的位置解耦出来。</p>
<h2 id="自定义-middleware-中间件"><a href="#自定义-middleware-中间件" class="headerlink" title="自定义 middleware(中间件)"></a>自定义 middleware(中间件)</h2><ul>
<li>default.py 配置如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE += (</span><br><span class="line"><span class="comment"># 你的中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：django1.10 开始，中间件配置项使用 <strong><code>MIDDLEWARE</code></strong> ，1.10 以下版本使用的 MIDDLEWARE_CLASSES 配置项会在 django2.0 后不再被支持。</p>
<ul>
<li>midlleware 开发</li>
</ul>
<p>使用 MIDDLEWARE 配置项开发你的 middleware。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="comment"># 中间件支持的方法依然不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(request)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(request, response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(request, response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(request, exception)</span>:</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>： 你的 middleware 类必须继承 django 的 MiddlewareMixin，同时你的 middleware 尽量不要去重写 <code>__call__</code> 和 <code>__init__</code> 方法，参考<a href="https://docs.djangoproject.com/en//topics/http/middleware/" target="_blank" rel="noopener">官方文档</a>。</p>
<h2 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h2><h3 id="blueapps-utils-logger"><a href="#blueapps-utils-logger" class="headerlink" title="blueapps.utils.logger"></a>blueapps.utils.logger</h3><p>提供常用的 logger,logger_celery</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger         <span class="comment"># 普通日志</span></span><br><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger_celery  <span class="comment"># celery日志</span></span><br><span class="line">logger.error(<span class="string">'log your info here.'</span>)</span><br></pre></td></tr></table></figure>


<hr>
<p>参考链接：<br><a href="https://bk.tencent.com/docs/document/5.1/19/4318" target="_blank" rel="noopener">腾讯蓝鲸开发框架 2.0 使用进阶</a></p>
]]></content>
      <categories>
        <category>蓝鲸</category>
        <category>开发框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>蓝鲸</tag>
      </tags>
  </entry>
  <entry>
    <title>初识蓝鲸开发框架</title>
    <url>/2020/11/24/bk-django-framework/</url>
    <content><![CDATA[<h2 id="蓝鲸-Python-开发框架简介"><a href="#蓝鲸-Python-开发框架简介" class="headerlink" title="蓝鲸 Python 开发框架简介"></a>蓝鲸 Python 开发框架简介</h2><p>Python 开发框架是集成了蓝鲸系统功能，方便开发者可以快速在蓝鲸 PaaS 平台上开发 SaaS 的 Python 框架。</p>
<p>该开发框架基于 Django 框架架构，并在此基础上进行扩展，增加蓝鲸系统的特有功能，</p>
<p>例如：身份验证、ESB 调用及模板渲染等功能，以便开发者可以更专注于 SaaS 的逻辑开发。</p>
<a id="more"></a>

<h2 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h2><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- blueapps                    <span class="comment"># Python开发框架模块</span></span><br><span class="line">- blueking                    <span class="comment"># ESB调用模块</span></span><br><span class="line">- config                      <span class="comment"># 应用配置目录</span></span><br><span class="line">  - __init__.py               <span class="comment"># 应用 RUN_VER(社区版为open)、APP_CODE 和 SECRET_KEY 等配置</span></span><br><span class="line">  - dev.py                    <span class="comment"># 本地开发配置(开发团队共享)</span></span><br><span class="line">  - default.py                <span class="comment"># 全局配置</span></span><br><span class="line">  - prod.py                   <span class="comment"># 生产环境配置</span></span><br><span class="line">  - stag.py                   <span class="comment"># 预发布环境配置</span></span><br><span class="line">- home_application            <span class="comment"># Django 模板应用样例</span></span><br><span class="line">  - __init__.py</span><br><span class="line">  - admin.py</span><br><span class="line">  - urls.py</span><br><span class="line">  - models.py</span><br><span class="line">  - tests.py</span><br><span class="line">  - views.py</span><br><span class="line">  - templates                 <span class="comment"># Django 模板</span></span><br><span class="line">    - home_application</span><br><span class="line">      - contact.html          <span class="comment"># 联系我们页面</span></span><br><span class="line">      - dev_guide.html        <span class="comment"># 开发指引</span></span><br><span class="line">      - index_home.html       <span class="comment"># 首页</span></span><br><span class="line">- mako_templates              <span class="comment"># mako 公共模板文件</span></span><br><span class="line">  - base.mako                 <span class="comment"># mako 模板基础文件，其他的页面可以从这里继承</span></span><br><span class="line">- mako_application            <span class="comment"># mako 模板应用样例</span></span><br><span class="line">  - __init__.py</span><br><span class="line">  - admin.py</span><br><span class="line">  - urls.py</span><br><span class="line">  - models.py</span><br><span class="line">  - tests.py</span><br><span class="line">  - views.py</span><br><span class="line">  - mako_templates            <span class="comment"># 模板</span></span><br><span class="line">    - mako_application</span><br><span class="line">      - contact.html          <span class="comment"># 联系我们页面</span></span><br><span class="line">      - dev_guide.html        <span class="comment"># 开发指引</span></span><br><span class="line">      - index_home.html       <span class="comment"># 首页</span></span><br><span class="line">- static                      <span class="comment"># 公共静态文件</span></span><br><span class="line">  - js                        <span class="comment"># 公共 js</span></span><br><span class="line">    - csrftoken.js            <span class="comment"># CSRFTOKEN</span></span><br><span class="line">    - settings.js             <span class="comment"># 异常处理</span></span><br><span class="line">- templates                   <span class="comment"># 公共模板文件</span></span><br><span class="line">  - admin                     <span class="comment"># admin 模板文件</span></span><br><span class="line">    - base_site.html</span><br><span class="line">    - login.html</span><br><span class="line">  - base.html                 <span class="comment"># Django 模板基础文件，其他的页面可以从这里继承</span></span><br><span class="line">- manage.py                   <span class="comment"># Django 工程 manage</span></span><br><span class="line">- requirements.txt            <span class="comment"># 依赖的 python 包列表</span></span><br><span class="line">- settings.py                 <span class="comment"># Django 工程 settings</span></span><br><span class="line">- urls.py                     <span class="comment"># Django 工程主路由 URL 配置</span></span><br><span class="line">- wsgi.py                     <span class="comment"># WSGI配置</span></span><br><span class="line">- runtime.txt                 <span class="comment"># Python 版本配置文件，默认指向 Python</span></span><br></pre></td></tr></table></figure>

<h3 id="常用配置说明"><a href="#常用配置说明" class="headerlink" title="常用配置说明"></a>常用配置说明</h3><ul>
<li>App 基本信息</li>
</ul>
<p>在 config/<em>*init</em>*.py 可以查看 App 基本信息，请修改：APP_CODE、SECRET_KEY (用于 App 认证)和 BK_URL(蓝鲸 SaaS 平台的 URL)。RUN_VER 是当前 App 运行的 PaaS 版本，请不要修改。</p>
<ul>
<li>App 运行环境</li>
</ul>
<p>在 config/dev.py、config/stag.py、config/prod.py 中都有一个 RUN_MODE 的变量，用来标记 App 运营环境(DEVELOP：本地环境，STAGING：预发布环境，PRODUCT：正式环境)，请不要修改。</p>
<ul>
<li>日志级别和路径</li>
</ul>
<p>开发框架默认配置的日志级别是 INFO，你可以在 config/default.py 修改 LOG_LEVEL 变量，会对所有运行环境生效，你也可以单独修改 config/dev.py、config/stag.py、config/prod.py 文件，详情请参考“<a href="javascript:void(0)">日志使用</a>”。</p>
<p>你不需要关心线上运行环境的日志路径，这些开发框架已经自动帮你配置了；</p>
<p>本地的日志放在和项目根目录同一级的 logs 目录下，以 APP_CODE 命名的文件夹中，其中 {APP_CODE}-django.log 是应用日志，{APP_CODE}-celery.log 是 celery 日志，{APP_CODE}-component.log 是组件日志，{APP_CODE}-mysql.log 是数据库日志。</p>
<ul>
<li>数据库配置</li>
</ul>
<p>本地数据库配置请在 config/dev.py 修改 DATABASES 变量；多人合作开发建议在根目录下新建 local_settings.py 文件，并配置 DATABASES 变量，并且在版本控制中忽略 local_settings.py，这样的好处是防止多人合作开发时本地配置不一致导致代码冲突。</p>
<h2 id="开发环境搭建-Python"><a href="#开发环境搭建-Python" class="headerlink" title="开发环境搭建(Python)"></a>开发环境搭建(Python)</h2><h3 id="安装-Python-3-6"><a href="#安装-Python-3-6" class="headerlink" title="安装 Python(3.6)"></a>安装 Python(3.6)</h3><p>如果系统中已经安装有 Python2 版本，可以参考 Python 版本切换了解<a href="javascript:void(0)">Python3 与 Python2 并存的处理方案</a></p>
<h3 id="安装-MySQL-5-5-以上"><a href="#安装-MySQL-5-5-以上" class="headerlink" title="安装 MySQL(5.5 以上)"></a>安装 MySQL(5.5 以上)</h3><h3 id="安装-setuptools、pip-和项目依赖"><a href="#安装-setuptools、pip-和项目依赖" class="headerlink" title="安装 setuptools、pip 和项目依赖"></a>安装 setuptools、pip 和项目依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于依赖中存在 mysqlclient，该模块存在对 C 环境的依赖，开发者可以参考<a href="https://github.com/PyMySQL/mysqlclient-python#install" target="_blank" rel="noopener">项目主页</a>安装说明</p>
<p>此处不使用 PyMySQL 原因是该模块与 Django2.2 存在兼容<a href="https://github.com/PyMySQL/PyMySQL/issues/790" target="_blank" rel="noopener">问题</a></p>
</blockquote>
<h3 id="安装本地开发工具"><a href="#安装本地开发工具" class="headerlink" title="安装本地开发工具"></a>安装本地开发工具</h3><p>推荐使用 <a href="https://www.jetbrains.com/pycharm/download" target="_blank" rel="noopener">pycharm</a> 进行代码开发，使用 <a href="https://tortoisesvn.net/index.zh.html" target="_blank" rel="noopener">TortoiseSVN</a> 管理 SVN，使用 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a> 管理 GIT。</p>
<h3 id="安装-celery-需要使用后台任务的项目"><a href="#安装-celery-需要使用后台任务的项目" class="headerlink" title="安装 celery(需要使用后台任务的项目)"></a>安装 celery(需要使用后台任务的项目)</h3><p>安装项目依赖时会自动安装 celery==3.1.25 和 django-celery==3.2.1。目前 celery 支持 redis、rabbitmq 作为任务的消息队列，推荐使用 redis。</p>
<ul>
<li>mac 系统 redis 使用指南：</li>
</ul>
<p>安装指令 <code>brew install redis</code>；</p>
<p>启动指令 <code>redis-server</code>；</p>
<p>测试 redis 服务是否正常启动，<code>redis-cli</code> 尝试连接本地的 redis 服务。</p>
<ul>
<li>windows 系统 redis 使用指南</li>
</ul>
<p>下载安装地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></p>
<p>点击安装目录下的 redis-server.exe 启动 redis 服务。</p>
<ul>
<li>配置项(在 config/dev.py 文件中修改消息队列配置)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Celery 消息队列设置 RabbitMQ</span></span><br><span class="line"><span class="comment"># BROKER_URL = 'amqp://guest:guest@localhost:5672//'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery 消息队列设置 Redis</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://localhost:6379/0'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于 redis-3.0 及以后模块存在兼容问题，所以在安装 redis 模块是，请增加上版本控制要求<code>redis&gt;=2.10.6,&lt;3</code></p>
</blockquote>
<h3 id="配置-hosts"><a href="#配置-hosts" class="headerlink" title="配置 hosts"></a>配置 hosts</h3><p>本地需要修改 hosts 文件，添加如下内容：</p>
<blockquote>
<p><strong>注意</strong>： domain_name 应该修改为 PaaS 平台的域名</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 appdev.`&#123;domain_name&#125;`</span><br></pre></td></tr></table></figure>

<h3 id="配置本地数据库"><a href="#配置本地数据库" class="headerlink" title="配置本地数据库"></a>配置本地数据库</h3><p>首先在 MySQL 命令行下创建数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE  `&#123;APP_CODE&#125;` default charset utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>然后配置本地数据库账号密码，需要找到 config/dev.py 中的 DATABASES 配置项，修改 USER 和 PASSWORD。</p>
<h3 id="初始化本地数据库"><a href="#初始化本地数据库" class="headerlink" title="初始化本地数据库"></a>初始化本地数据库</h3><p>在项目根目录下执行如下命令初始化本地数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>如果遇到错误，请先注释掉 config/default.py 的 INSTALLED_APPS 中的 APP 列表，执行命令后再去掉注释。</p>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>在项目根目录下执行如下命令启动项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>接着在浏览器访问 appdev.<code>{domain_name}</code> 就可以访问到项目首页了。</p>
<p><img data-src="https://bkdocs-1252002024.file.myqcloud.com/ZH/5.1/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/SaaS%E5%BC%80%E5%8F%91/assets/usage-index.png" alt="image-20190505204958140"></p>
<h2 id="新建-application"><a href="#新建-application" class="headerlink" title="新建 application"></a>新建 application</h2><p>在根目录下执行 django-admin startapp yourappname</p>
<p>进入 yourappname 目录，新增 urls.py</p>
<p>编写逻辑代码和路由配置代码</p>
<p>把 yourappname 加入 config/default.py 的 INSTALLED_APPS 中</p>
<h2 id="定义-model"><a href="#定义-model" class="headerlink" title="定义 model"></a>定义 model</h2><h3 id="在新建的-application-中-models-py-定义-model"><a href="#在新建的-application-中-models-py-定义-model" class="headerlink" title="在新建的 application 中 models.py 定义 model"></a>在新建的 application 中 models.py 定义 model</h3><p>官方文档：<a href="https://docs.djangoproject.com/en/2.2/topics/db/models/" target="_blank" rel="noopener">Django Models</a></p>
<h3 id="生成数据库变更文件"><a href="#生成数据库变更文件" class="headerlink" title="生成数据库变更文件"></a>生成数据库变更文件</h3><p>在项目根目录下执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations yourappname</span><br></pre></td></tr></table></figure>

<p>执行成功后就会生成数据库变更文件，文件位于新建 APP 的 migrations 目录中。</p>
<h3 id="生效数据库变更"><a href="#生效数据库变更" class="headerlink" title="生效数据库变更"></a>生效数据库变更</h3><p>在项目根目录下执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate yourappname</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：在把 yourappname 加入 config/default.py 的 INSTALLED_APPS 中之前，请先执行 python manage.py migrate 初始化数据库。</p>
</blockquote>
<h2 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h2><p>开发框架支持 Django、 Mako 两种模板渲染引擎，在 Django 工程下每个 App 维护自身的模板文件，以下以 APP_NAME 代表 Django APP 名称。</p>
<h3 id="Django-模板文件使用方式"><a href="#Django-模板文件使用方式" class="headerlink" title="Django 模板文件使用方式"></a>Django 模板文件使用方式</h3><p>请将你的 Django 模板文件 xxx.html 放在 <code>PROJECT_ROOT/APP_NAME/templates/</code> 目录底下，建议在 templates 底下在加上一层目录，取名为 APP_NAME，即最终模板文件存放路径为 <code>PROJECT_ROOT/APP_NAME/templates/APP_NAME</code>，这是为了避免在寻找模板文件的时候，出现覆盖的情况。</p>
<p>使用 Django 原生支持的 render 方法进行模板渲染。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'APP_NAME/index.html'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>render 函数接受三个参数：</p>
<ul>
<li>第一个参数 request 对象。</li>
<li>第二个参数 模板路径，从 APP templates 目录开始写起，此处对应的完整路径为 <code>PROJECT_ROOT/APP_NAME/templates/APP_NAME/index.html</code>，注意不要在前面加 ‘/‘，否则会被识别为绝对路径，找不到对应的模板。</li>
<li>第三个参数 传入的模板上下文，用于替换模板中的变量。</li>
</ul>
<blockquote>
<p>为什么 templates 目录底下还需要再加一层以 APP_NAME 命名的目录？ 假设 settings INSTALLED_APPS = (‘app1’, ‘app2’)，工程目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROJCET_ROOT</span><br><span class="line">|__ app1</span><br><span class="line">|__ __ templates</span><br><span class="line">|__ __ __ index.html</span><br><span class="line">...</span><br><span class="line">|__ app2</span><br><span class="line">|__ __ templates</span><br><span class="line">|__ __ __ index.html</span><br></pre></td></tr></table></figure>

<p>当我们在 app2.views 里使用 <code>render(request, &#39;index.html&#39;, {})</code> 语句进行渲染时，Django 框架默认以 INSTALLED_APPS 安装次序进行模板文件查找，这时候会匹配到 <code>app1/templates/index.html</code> 文件进行渲染，导致得到非预期的结果。所以推荐 <code>PROJECT_ROOT/APP_NAME/templates/APP_NAME</code> 这样的目录设计</p>
</blockquote>
<h3 id="Mako-模板文件使用方式"><a href="#Mako-模板文件使用方式" class="headerlink" title="Mako 模板文件使用方式"></a>Mako 模板文件使用方式</h3><p>Mako 模板文件使用方式大致与 Django 模板文件相同，唯一的区别就是是 Mako 模板文件放在 <code>PROJECT_ROOT/APP_NAME/mako_templates/</code> 目录底下，同样建议在 mako 底下在加上一层目录，取名为 APP_NAME，最终模板文件存放路径为 <code>PROJECT_ROOT/APP_NAME/mako_templates/APP_NAME</code>。</p>
<blockquote>
<p><strong>注意</strong>：出于安全原因，强烈建议用户使用 Django 模板替代 Mako 进行渲染，防止 XSS 攻击。</p>
</blockquote>
<h3 id="Template-Context-平台框架提供的模板变量"><a href="#Template-Context-平台框架提供的模板变量" class="headerlink" title="Template-Context 平台框架提供的模板变量"></a>Template-Context 平台框架提供的模板变量</h3><p>这里列举的模板变量，不需要用户在 render 模板时传入，可直接在模板文件中访问到，直接使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;</span><br><span class="line">    <span class="string">'STATIC_URL'</span>: settings.STATIC_URL,                    <span class="comment"># 本地静态文件访问</span></span><br><span class="line">    <span class="string">'APP_PATH'</span>: request.get_full_path(),                  <span class="comment"># 当前页面，主要为了 login_required 做跳转用</span></span><br><span class="line">    <span class="string">'RUN_MODE'</span>: settings.RUN_MODE,                        <span class="comment"># 运行模式</span></span><br><span class="line">    <span class="string">'APP_CODE'</span>: settings.APP_CODE,                        <span class="comment"># 在蓝鲸系统中注册的 "应用编码"</span></span><br><span class="line">    <span class="string">'SITE_URL'</span>: settings.SITE_URL,                        <span class="comment"># URL前缀</span></span><br><span class="line">    <span class="string">'REMOTE_STATIC_URL'</span>: settings.REMOTE_STATIC_URL,      <span class="comment"># 远程静态资源 url</span></span><br><span class="line">    <span class="string">'STATIC_VERSION'</span>: settings.STATIC_VERSION,            <span class="comment"># 静态资源版本号,用于指示浏览器更新缓存</span></span><br><span class="line">    <span class="string">'BK_URL'</span>: settings.BK_URL,                            <span class="comment"># 蓝鲸平台 URL</span></span><br><span class="line">    <span class="string">'USERNAME'</span>: username,                                 <span class="comment"># 用户名</span></span><br><span class="line">    <span class="string">'NICKNAME'</span>: nickname,                                 <span class="comment"># 用户昵称</span></span><br><span class="line">    <span class="string">'AVATAR_URL'</span>: avatar_url,                             <span class="comment"># 用户头像</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态资源使用规范"><a href="#静态资源使用规范" class="headerlink" title="静态资源使用规范"></a>静态资源使用规范</h2><ul>
<li>静态文件按模块划分，分别放在 Django 工程中每个对应 APP 的 static 目录下</li>
</ul>
<p>请将你的 Django 静态文件 xxx.js 和 xxx.css 放在 PROJECT_ROOT/APP_NAME/static/ 目录底下，建议在 static 底下在加上一层目录，取名为 APP_NAME，即最终模板文件存放路径为 PROJECT_ROOT/APP_NAME/static/APP_NAME[/js 或者/css]，这是为了避免在寻找静态文件的时候，出现覆盖的情况。</p>
<ul>
<li>修改静态文件后要手动运行 python manage.py collectstatic 命令来收集静态文件到根目录的 static 文件夹中。</li>
<li>settings 需要包含 STATIC_ROOT 配置。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'staticfiles'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>框架已配置全局有效的静态目录，可以将所有公共使用的静态资源放置于此。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>其中 BASE_DIR 是工程根目录路径。</p>
<h2 id="celery-使用"><a href="#celery-使用" class="headerlink" title="celery 使用"></a>celery 使用</h2><p>celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。 它是一个专注于实时处理的任务队列，同时也支持任务调度。</p>
<h3 id="打开-Celery-配置"><a href="#打开-Celery-配置" class="headerlink" title="打开 Celery 配置"></a>打开 Celery 配置</h3><p>在 config/default.py 中修改配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IS_USE_CELERY = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="添加-Celery-任务"><a href="#添加-Celery-任务" class="headerlink" title="添加 Celery 任务"></a>添加 Celery 任务</h3><p>在 app 底下创建 tasks.py 文件，添加 @task 任务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></figure>

<p>如果 @task 任务函数不在 app/tasks.py 文件中，需要在 config/default.py 中添加配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERY_IMPORTS = (</span><br><span class="line">    <span class="string">'testapp.tasks'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="启动异步任务服务-celery-worker"><a href="#启动异步任务服务-celery-worker" class="headerlink" title="启动异步任务服务 celery worker"></a>启动异步任务服务 celery worker</h3><p>在根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py celery worker -l info</span><br></pre></td></tr></table></figure>

<h3 id="启动周期性任务服务-celery-beat"><a href="#启动周期性任务服务-celery-beat" class="headerlink" title="启动周期性任务服务 celery beat"></a>启动周期性任务服务 celery beat</h3><p>在根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py celery beat -l info</span><br></pre></td></tr></table></figure>

<h3 id="添加周期任务"><a href="#添加周期任务" class="headerlink" title="添加周期任务"></a>添加周期任务</h3><p>进入 admin，在 DJCELERY-&gt;Periodic_tasks 表中添加一条记录。</p>
<h3 id="如何在平台部署时，自动启动-celery-进程"><a href="#如何在平台部署时，自动启动-celery-进程" class="headerlink" title="如何在平台部署时，自动启动 celery 进程"></a>如何在平台部署时，自动启动 celery 进程</h3><p>修改 IS_USE_CELERY = True，并在提测发布 SaaS 的时候，勾选使用 Celery 任务</p>
<h3 id="调整-celery-worker-并发数"><a href="#调整-celery-worker-并发数" class="headerlink" title="调整 celery worker 并发数"></a>调整 celery worker 并发数</h3><ul>
<li>CELERYD_CONCURRENCY 参数官方说明：<a href="http://docs.celeryproject.org/en/v2.2.4/configuration.html#celeryd-prefetch-multiplier" target="_blank" rel="noopener">官方文档</a></li>
<li>目前开发框架设置的 celery 并发数是 2，如需调整，有 2 种方法：</li>
</ul>
<p>1)在蓝鲸平台的 APP 环境变量新增 KEY 为 CELERYD_CONCURRENCY 的变量，并设置对应的值(调大前建议咨询平台维护同事)。</p>
<p>2)直接修改 APP 中的配置，即修改 config/default.py 文件中如下配置的默认值 2 为你想要设置的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CELERYD_CONCURRENCY = os.getenv(<span class="string">'BK_CELERYD_CONCURRENCY'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="调整-celery-与-RabbitMQ-心跳包发送时间"><a href="#调整-celery-与-RabbitMQ-心跳包发送时间" class="headerlink" title="调整 celery 与 RabbitMQ 心跳包发送时间"></a>调整 celery 与 RabbitMQ 心跳包发送时间</h3><ul>
<li>BROKER_HEARTBEAT 参数官方说明：<a href="https://docs.celeryproject.org/en/3.1/configuration.html?#std:setting-BROKER_HEARTBEAT" target="_blank" rel="noopener">官方文档</a></li>
<li>目前开发框架设置的 BROKER_HEARTBEAT 发送时间是 60，即每 60 秒发送一个心跳包，如需调整，有以下方法：</li>
</ul>
<p>直接修改 APP 中的配置，即在 config/default.py 文件中添加相应配置，框架默认的配置会被覆盖。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CELERY与RabbitMQ增加60秒心跳设置项</span></span><br><span class="line">BROKER_HEARTBEAT = <span class="number">60</span></span><br></pre></td></tr></table></figure>

<h2 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h2><ul>
<li>日志相关配置方式复用 Django 的配置方式：<a href="https://docs.djangoproject.com/en/2.2/topics/logging/#using-logging" target="_blank" rel="noopener">官方文档</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'app'</span>)       <span class="comment"># 普通日志</span></span><br><span class="line">logger_celery = logging.getLogger(<span class="string">'celery'</span>)   <span class="comment"># celery日志</span></span><br><span class="line">logger.error(<span class="string">'log your info here.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger         <span class="comment"># 普通日志</span></span><br><span class="line"><span class="keyword">from</span> blueapps.util.logger <span class="keyword">import</span> logger_celery  <span class="comment"># celery日志</span></span><br><span class="line">logger.error(<span class="string">'log your info here.'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>日志输出路径：</li>
</ul>
<p>本地输出路径在和项目根目录平级的 logs 目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- PROJCET_ROOT</span><br><span class="line">- logs</span><br><span class="line">    - APP_CODE</span><br><span class="line">        - APP_CODE-celery.log</span><br><span class="line">        - APP_CODE-component.log</span><br><span class="line">        - APP_CODE-django.log</span><br><span class="line">        - APP_CODE-mysql.log</span><br></pre></td></tr></table></figure>

<ul>
<li>日志级别配置：</li>
</ul>
<p>日志级别默认是 INFO，如需修改：</p>
<ol>
<li><p>所有环境下的日志级别，请在 config/default.py 对应位置修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line"><span class="comment"># load logging settings</span></span><br><span class="line">LOGGING = get_logging_config_dict(locals())</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果只希望针对特定环境进行日志级别设置，则在对应环境配置文件（ config/prod.py（只影响生产环境）、config/stag.py（只影响预发布环境）、config/dev.py（只影响预本地开发环境））中取消对应代码注释并修改日志级别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义本地环境日志级别</span></span><br><span class="line"><span class="keyword">from</span> blueapps.conf.log <span class="keyword">import</span> set_log_level <span class="comment"># noqa</span></span><br><span class="line">LOG_LEVEL = <span class="string">"DEBUG"</span></span><br><span class="line">LOGGING = set_log_level(locals())</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: 这种修改方式依赖 blueapps 版本 &gt;= 3.3.1。</p>
</li>
</ol>
<p>其中，不同配置的含义如下：</p>
<ol>
<li>DEBUG：用于调试目的的底层系统信息</li>
<li>INFO：普通的系统信息</li>
<li>WARNING：表示出现一个较小的问题。</li>
<li>ERROR：表示出现一个较大的问题。</li>
<li>CRITICAL：表示出现一个致命的问题。</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>为了减少代码中判断函数调用的判断逻辑，蓝鲸开发框架提出，开发者应该在异常处直接抛出异常，通过 Django 中间件特性来处理该异常。</p>
<h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blueapps.core.exceptions <span class="keyword">import</span> ParamValidationError</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">your_view_func</span><span class="params">(request)</span>:</span></span><br><span class="line">  form = your_form(request.POST)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> form.is_valid():</span><br><span class="line">    <span class="keyword">raise</span> ParamValidationError(<span class="string">u'参数验证失败,请确认后重试'</span>)</span><br><span class="line">  <span class="comment"># do something you want</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：此处只是一个简单的示例。我们强烈的建议开发者应该在任何有错误的地方直接抛出异常，而非返回错误，由上层逻辑处理。</p>
</blockquote>
<h3 id="异常类型介绍"><a href="#异常类型介绍" class="headerlink" title="异常类型介绍"></a>异常类型介绍</h3><p>蓝鲸开发框架异常类主要分为两类：客户端异常及服务端异常，分别对应由于客户端请求引起的错误和后台服务引起的错误。开发者可以根据引起错误的场景来选择需要抛出的异常。</p>
<ul>
<li>异常类所在命名空间<ul>
<li>blueapps.core.exceptionsplainplainplainplainplainplainplainplainplainplainplainplainplainplainplainplainplainplain</li>
</ul>
</li>
<li>服务端异常</li>
</ul>
<table>
<thead>
<tr>
<th>错误类</th>
<th>说明</th>
<th>http 状态码</th>
<th>返回错误码</th>
<th>场景举例</th>
</tr>
</thead>
<tbody><tr>
<td>DatabaseError</td>
<td>数据库异常</td>
<td>501</td>
<td>50110</td>
<td>更新数据库记录失败</td>
</tr>
<tr>
<td>ApiNetworkError</td>
<td>网络异常导致远程服务失效</td>
<td>503</td>
<td>50301</td>
<td>请求第三方接口由于网络连接问题导致失败</td>
</tr>
<tr>
<td>ApiResultError</td>
<td>远程服务请求结果异常</td>
<td>503</td>
<td>50302</td>
<td>请求第三方结果返回 result 结果是 false</td>
</tr>
<tr>
<td>ApiNotAcceptable</td>
<td>远程服务返回结果格式异常</td>
<td>503</td>
<td>50303</td>
<td>第三方接口返回 xml 格式结果，但预期返回 json 格式</td>
</tr>
</tbody></table>
<ul>
<li>客户端异常</li>
</ul>
<table>
<thead>
<tr>
<th>错误类</th>
<th>说明</th>
<th>http 状态码</th>
<th>返回错误码</th>
<th>场景举例</th>
</tr>
</thead>
<tbody><tr>
<td>ParamValidationError</td>
<td>参数验证失败</td>
<td>400</td>
<td>40000</td>
<td>期待为整形的参数，用户提供了一个字符参数</td>
</tr>
<tr>
<td>ParamRequired</td>
<td>请求参数缺失</td>
<td>400</td>
<td>40001</td>
<td>期待的参数找不到</td>
</tr>
<tr>
<td>RioVerifyError</td>
<td>登陆请求经智能网关检测失败</td>
<td>401</td>
<td>40101</td>
<td>用户登录验证</td>
</tr>
<tr>
<td>BkJwtVerifyError</td>
<td>登陆请求经 JWT 检测失败</td>
<td>401</td>
<td>40102</td>
<td>用户登录验证</td>
</tr>
<tr>
<td>AccessForbidden</td>
<td>登陆失败</td>
<td>403</td>
<td>40301</td>
<td>用户身份验证失败</td>
</tr>
<tr>
<td>RequestForbidden</td>
<td>请求拒绝</td>
<td>403</td>
<td>40320</td>
<td>用户企图操作没有权限的任务</td>
</tr>
<tr>
<td>ResourceLock</td>
<td>请求资源被锁定</td>
<td>403</td>
<td>40330</td>
<td>用户企图操作一个已经锁定的任务</td>
</tr>
<tr>
<td>ResourceNotFound</td>
<td>找不到请求的资源</td>
<td>404</td>
<td>40400</td>
<td>找不到用户请求的某个指定 ID 的 model</td>
</tr>
<tr>
<td>MethodError</td>
<td>请求方法不支持</td>
<td>405</td>
<td>40501</td>
<td>用户发送的请求不在预期范围内</td>
</tr>
</tbody></table>
<hr>
<p>参考链接：<br><a href="https://bk.tencent.com/docs/document/5.1/19/576" target="_blank" rel="noopener">腾讯蓝鲸开发框架 2.0 使用说明</a></p>
]]></content>
      <categories>
        <category>蓝鲸</category>
        <category>开发框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>蓝鲸</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之全局解释器锁GIL</title>
    <url>/2020/11/23/python-GIL/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>GIL(Global Interpreter Lock)，也称为全局解释器，官方解释为：</p>
<blockquote>
<p>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p>
</blockquote>
<p>主要意思为：</p>
<blockquote>
<p>GIL是一个互斥锁，它防止多个线程同时执行Python字节码。这个锁是必要的，主要是因为CPython的内存管理不是线程安全的</p>
</blockquote>
<a id="more"></a>

<h3 id="Python解释器有哪些"><a href="#Python解释器有哪些" class="headerlink" title="Python解释器有哪些"></a>Python解释器有哪些</h3><ol>
<li>CPython: 官方默认版本，使用C语言开发，是Python使用最广泛的解释器，有GIL.</li>
<li>IPython: IPython是基于CPython之上的交互式解释器，其它方面和CPython相同.</li>
<li>PyPy: PyPy采用JIT(Just In Time)也就是即时编译编译器，对Python代码执行动态编译，目的是加快执行速度，有GIL.</li>
<li>Jython: 运行在Java平台上的解释器，把Python代码编译为Java字节码执行，没有GIL.</li>
<li>IronPython: IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码，没有GIL.</li>
</ol>
<h2 id="GIL的背景"><a href="#GIL的背景" class="headerlink" title="GIL的背景"></a>GIL的背景</h2><p>由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据一致性和状态同步的困难。</p>
<p>Python当然也逃不开，为了利用多核，Python开始支持多线程。而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。</p>
<h2 id="GIL为什么会存在？"><a href="#GIL为什么会存在？" class="headerlink" title="GIL为什么会存在？"></a>GIL为什么会存在？</h2><p>GIL的问题其实是由于近十几年来应用程序和操作系统逐步从多任务单核心演进到多任务多核心导致的 , 在一个古老的单核CPU上调度多个线程任务，大家相互共享一个全局锁，谁在CPU执行，谁就占有这把锁，直到这个线程因为IO操作或者Timer Tick到期让出CPU，没有在执行的线程就安静的等待着这把锁（除了等待之外，他们应该也无事可做）。下面这个图演示了一个单核CPU的线程调度方式：</p>
<img data-src="/2020/11/23/python-GIL/python-gil-single.jpg" class>

<p>在一个现代多核心的处理器上，上面的模型就有很大优化空间了，原来只能等待的线程任务，现在可以在其它空闲的核心上调度并发执行。由于古老GIL机制，如果线程2需要在CPU 2 上执行，它需要先等待在CPU 1 上执行的线程1释放GIL（记住：GIL是全局的）。如果线程1是因为 i/o 阻塞让出的GIL，那么线程2必定拿到Gil。但如果线程1是因为timer ticks计数满100让出GIL，那么这个时候线程1和线程2公平竞争。但要命的是，在Python 2.x, 线程1不会动态的调整自身的优先级，所以很大概率下次被选中执行的还是线程1，在很多个这样的选举周期内，线程2只能安静的看着线程1拿着GIL在CPU 1上欢快的执行。</p>
<img data-src="/2020/11/23/python-GIL/python-gil-muti.jpg" class>

<p>在稍微极端一点的情况下，比如线程1使用了while True在CPU 1 上执行，那就真是“一核有难，八核围观”了，如下图所示：</p>
<img data-src="/2020/11/23/python-GIL/python-gil-octo.jpg" class>

<h2 id="GIL的影响"><a href="#GIL的影响" class="headerlink" title="GIL的影响"></a>GIL的影响</h2><p>从上文的介绍和官方的定义来看，GIL无疑就是一把全局排他锁。毫无疑问全局锁的存在会对多线程的效率有不小影响。甚至就几乎等于Python是个单线程的程序。</p>
<h3 id="GIL对多线程Python程序的影响"><a href="#GIL对多线程Python程序的影响" class="headerlink" title="GIL对多线程Python程序的影响"></a>GIL对多线程Python程序的影响</h3><p>程序的性能受到计算密集型(CPU)的程序限制和I/O密集型的程序限制影响，那什么是计算密集型和I/O密集型程序?</p>
<h4 id="计算密集型-CPU"><a href="#计算密集型-CPU" class="headerlink" title="计算密集型(CPU)"></a>计算密集型(CPU)</h4><p>高度使用CPU的程序，例如: 进行数学计算，矩阵运算，搜索，图像处理等.</p>
<h4 id="I-O密集型"><a href="#I-O密集型" class="headerlink" title="I/O密集型"></a>I/O密集型</h4><p>I/0(Input/Output)程序是进行数据传输，例如: 文件操作，数据库，网络数据等</p>
<h3 id="顺序执行单线程和并发执行多线程的效率对比"><a href="#顺序执行单线程和并发执行多线程的效率对比" class="headerlink" title="顺序执行单线程和并发执行多线程的效率对比"></a>顺序执行单线程和并发执行多线程的效率对比</h3><h4 id="顺序执行单线程-single-thread-py"><a href="#顺序执行单线程-single-thread-py" class="headerlink" title="- 顺序执行单线程(single_thread.py)"></a>- 顺序执行单线程(single_thread.py)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t1 = threading.Thread(target=test_counter)</span><br><span class="line">        t1.start()</span><br><span class="line">        t1.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time:&#123;&#125;"</span>.format(end_time-start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Total</span> <span class="selector-tag">time</span>: 11<span class="selector-class">.299654722213745</span></span><br></pre></td></tr></table></figure>



<h4 id="并发执行两个线程-multi-thread-py"><a href="#并发执行两个线程-multi-thread-py" class="headerlink" title="- 并发执行两个线程(multi_thread.py)"></a>- 并发执行两个线程(multi_thread.py)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread_array = &#123;&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=test_counter)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_array[tid] = t</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        thread_array[i].join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time:&#123;&#125;"</span>.format(end_time-start_time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Total</span> <span class="selector-tag">time</span><span class="selector-pseudo">:13.7098388671875</span></span><br></pre></td></tr></table></figure>

<p>GIL对I/O绑定多线程程序的性能影响不大，因为线程在等待I/O时共享锁.</p>
<p>GIL对计算型绑定多线程程序有影响，例如: 使用线程处理部分图像的程序，不仅会因锁定而成为单线程，而且还会看到执行时间的增加，这种增加是由锁的获取和释放开销的结果.</p>
<h2 id="如何处理Python中的GIL"><a href="#如何处理Python中的GIL" class="headerlink" title="如何处理Python中的GIL"></a>如何处理Python中的GIL</h2><ul>
<li>计算密集型程序<ul>
<li>使用多进程(什么是多进程呢，后续道来)</li>
<li>使用其它语言(将计算密集程序放到其它语言中执行)</li>
<li>替换解释器(可以自己尝试)</li>
<li>等大神解决GIL</li>
</ul>
</li>
<li>I/O密集型程序<ul>
<li>使用多线程</li>
<li>使用多进程</li>
<li>使用多进程 + 多线程</li>
</ul>
</li>
</ul>
<hr>
<p>参考链接：</p>
<p><a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf" target="_blank" rel="noopener">Understanding the Python GIL</a>  </p>
<p><a href="https://realpython.com/python-gil/" target="_blank" rel="noopener">What Is the Python Global Interpreter Lock (GIL)?</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/75780308" target="_blank" rel="noopener">深入理解Python中的GIL（全局解释器锁）</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>GIL</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>多线程</tag>
        <tag>GIL</tag>
        <tag>全局解释器锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Django之ORM操作</title>
    <url>/2020/11/21/django-orm/</url>
    <content><![CDATA[<blockquote>
<h1 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h1></blockquote>
<p>Django 模型使用自带的 ORM。</p>
<p><kbd>对象关系映射</kbd>（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p>
<p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p>
<p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p>
<img data-src="/2020/11/21/django-orm/django-orm1.png" class>

<a id="more"></a>

<h2 id="使用-ORM-的好处："><a href="#使用-ORM-的好处：" class="headerlink" title="使用 ORM 的好处："></a>使用 ORM 的好处：</h2><ul>
<li>提高开发效率。</li>
<li>不同数据库可以平滑切换。</li>
</ul>
<h2 id="使用-ORM-的缺点："><a href="#使用-ORM-的缺点：" class="headerlink" title="使用 ORM 的缺点："></a>使用 ORM 的缺点：</h2><ul>
<li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li>
<li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li>
</ul>
<h2 id="ORM-解析过程"><a href="#ORM-解析过程" class="headerlink" title="ORM 解析过程:"></a>ORM 解析过程:</h2><ul>
<li>1、ORM 会将 Python 代码转成为 SQL 语句。</li>
<li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li>
<li>3、在数据库中执行 SQL 语句并将结果返回。</li>
</ul>
<h2 id="ORM-对应关系表："><a href="#ORM-对应关系表：" class="headerlink" title="ORM 对应关系表："></a>ORM 对应关系表：</h2><img data-src="/2020/11/21/django-orm/orm-object.png" class>

<h1 id="查询类操作"><a href="#查询类操作" class="headerlink" title="查询类操作"></a>查询类操作</h1><h2 id="查询所有的结果"><a href="#查询所有的结果" class="headerlink" title="查询所有的结果"></a>查询所有的结果</h2><p>相当sql中的select * from</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = Test.objects.all()</span><br></pre></td></tr></table></figure>

<h2 id="条件查询filter相关sql中的where"><a href="#条件查询filter相关sql中的where" class="headerlink" title="条件查询filter相关sql中的where"></a>条件查询filter相关sql中的where</h2><p>用于过滤查询结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = Test.objects.filter(id=<span class="number">1</span>, name=’test’) <span class="comment"># 传多个参数</span></span><br></pre></td></tr></table></figure>

<p>如果多条件与查询，直接用逗号隔开，filter函数里面的参数都是Test Model中的字段</p>
<h2 id="获取单个对象"><a href="#获取单个对象" class="headerlink" title="获取单个对象"></a>获取单个对象</h2><p>get方法的参数一般为Model的主键，如果找不到会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_obj = Test.objects.get(id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="限制返回的结果数据的数量"><a href="#限制返回的结果数据的数量" class="headerlink" title="限制返回的结果数据的数量"></a>限制返回的结果数据的数量</h2><p>相当于sql中的limit，其中order_by是用于排序，如果根据字段a倒序排序，就是order_by(“-time”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.order_by(<span class="string">'name'</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(name=’test’).order_by(“-ctime”)</span><br></pre></td></tr></table></figure>

<h2 id="多条件参数查询"><a href="#多条件参数查询" class="headerlink" title="多条件参数查询"></a>多条件参数查询</h2><p>传字典，构造查询条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = Test.objects.filter(**query_dict).order_by(“-ctime”).values</span><br></pre></td></tr></table></figure>

<p>其中query_dict为一个字典，key为条件字段，value为条件值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query_dict = &#123;<span class="string">'id'</span>:<span class="number">123</span>,<span class="string">'name'</span>:’yyp’&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传Q对象"><a href="#传Q对象" class="headerlink" title="传Q对象"></a>传Q对象</h2><h3 id="构造查询条件"><a href="#构造查询条件" class="headerlink" title="构造查询条件"></a>构造查询条件</h3><ol>
<li><p>在 filter() 等函式中关键字参数彼此之间都是 “and” 关系。但是要执行更复杂的查询(比如，实现筛选条件的 or 关系)，可以使用 Q 对象。</p>
</li>
<li><p>Q对象包括 AND 关系和OR 关系</p>
</li>
<li><p>Q 对象可以用&amp;和 | 运算符进行连接。当某个操作连接两个 Q 对象时，就会产生一个新的等价的 Q 对象。</p>
<ul>
<li>第一步，构造Q对象：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Q(name__startswith=’h’) | Q(name__startswith=’p’)</span><br></pre></td></tr></table></figure></li>
<li>第二步，Q对象以查询参数方式使用，多个Q对象是and关系:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(</span><br><span class="line">Q(date=’<span class="number">2018</span><span class="number">-10</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>’),</span><br><span class="line">Q(name__startswith=’h’) | Q(name__startswith=’p’)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<blockquote>
<p>filter() 等函数可以接受 Q对象和条件参数，但Q对象必须放在条件参数前面 </p>
</blockquote>
<h3 id="传入条件查询"><a href="#传入条件查询" class="headerlink" title="传入条件查询"></a>传入条件查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q1 = Q()</span><br><span class="line">q1.connector = <span class="string">'OR'</span>              <span class="comment">#连接方式</span></span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">1</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">2</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">models.Tb1.objects.filter(q1)</span><br></pre></td></tr></table></figure>



<h3 id="合并条件查询"><a href="#合并条件查询" class="headerlink" title="合并条件查询"></a>合并条件查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">con = Q()</span><br><span class="line"></span><br><span class="line">q1 = Q()</span><br><span class="line">q1.connector = <span class="string">'OR'</span></span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">1</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">2</span>))</span><br><span class="line">q1.children.append((<span class="string">'id'</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">q2 = Q()</span><br><span class="line">q2.connector = <span class="string">'OR'</span></span><br><span class="line">q2.children.append((<span class="string">'status'</span>, <span class="string">'在线'</span>))</span><br><span class="line"></span><br><span class="line">con.add(q1, <span class="string">'AND'</span>)</span><br><span class="line">con.add(q2, <span class="string">'AND'</span>)</span><br><span class="line"></span><br><span class="line">models.Tb1.objects.filter(con)</span><br></pre></td></tr></table></figure>



<h2 id="过滤不满足条件的操作"><a href="#过滤不满足条件的操作" class="headerlink" title="过滤不满足条件的操作"></a>过滤不满足条件的操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = Test.objects.exclude(id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h1 id="增加类操作"><a href="#增加类操作" class="headerlink" title="增加类操作"></a>增加类操作</h1><h2 id="新增一条记录"><a href="#新增一条记录" class="headerlink" title="新增一条记录"></a>新增一条记录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1 = Test(name=<span class="string">'yyp'</span>)</span><br><span class="line">test1.save()</span><br></pre></td></tr></table></figure>



<h1 id="更新类操作"><a href="#更新类操作" class="headerlink" title="更新类操作"></a>更新类操作</h1><h2 id="先查询获取对象，再修改对象的值，再保存"><a href="#先查询获取对象，再修改对象的值，再保存" class="headerlink" title="先查询获取对象，再修改对象的值，再保存"></a>先查询获取对象，再修改对象的值，再保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1 = Test.objects.get(id=<span class="number">1</span>)</span><br><span class="line">test1.name = <span class="string">'Google'</span></span><br><span class="line">test1.save()</span><br></pre></td></tr></table></figure>



<h2 id="条件链式更新"><a href="#条件链式更新" class="headerlink" title="条件链式更新"></a>条件链式更新</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(id=<span class="number">1</span>).update(name=‘Google’)</span><br></pre></td></tr></table></figure>



<h1 id="删除类操作"><a href="#删除类操作" class="headerlink" title="删除类操作"></a>删除类操作</h1><h2 id="先查询获取要删除的对象，然后直接delete操作"><a href="#先查询获取要删除的对象，然后直接delete操作" class="headerlink" title="先查询获取要删除的对象，然后直接delete操作"></a>先查询获取要删除的对象，然后直接delete操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除id=1的数据</span></span><br><span class="line">test1 = Test.objects.get(id=<span class="number">1</span>)</span><br><span class="line">test1.delete()</span><br></pre></td></tr></table></figure>

<h2 id="条件删除："><a href="#条件删除：" class="headerlink" title="条件删除："></a>条件删除：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test.objects.filter(id=<span class="number">1</span>).delete()</span><br></pre></td></tr></table></figure>

<h2 id="QuerySet相关"><a href="#QuerySet相关" class="headerlink" title="QuerySet相关"></a>QuerySet相关</h2><p>Django中model查询出来的结构类型为QuerySet，本质是一个查询对象集。</p>
<h2 id="将多个查询结果转换为字典列表"><a href="#将多个查询结果转换为字典列表" class="headerlink" title="将多个查询结果转换为字典列表"></a>将多个查询结果转换为字典列表</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># all()方法查询出来的是QuerySet，用values方法转成字典集</span></span><br><span class="line">data= Test.objects.all().values()</span><br><span class="line">data_dict_list = list(data)</span><br><span class="line">&lt;QuerySet [&lt;Test:  test&gt;]&gt;    ----&gt;&lt;QuerySet [&#123;“id”:XXX, “name”:XXX&#125;]&gt;</span><br></pre></td></tr></table></figure>



<h2 id="QuerySet对象转换成字典对象"><a href="#QuerySet对象转换成字典对象" class="headerlink" title="QuerySet对象转换成字典对象"></a>QuerySet对象转换成字典对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fromdjango.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line">data = Test.objects.get(id=<span class="number">1</span>)</span><br><span class="line">data_dict = model_to_dict(data)</span><br></pre></td></tr></table></figure>

<h2 id="序列化成json数据"><a href="#序列化成json数据" class="headerlink" title="序列化成json数据"></a>序列化成json数据</h2><p>对于很多web开发接口的时候，要返回的是json数据，而django从DB查询出来的是对象集，可以考虑django-rest-framework 库的serializers类，具体可参考：<a href="https://q1mi.github.io/Django-REST-framework-documentation/tutorial/1-serialization_zh/" target="_blank" rel="noopener"><strong>Tutorial 1: 序列化</strong></a></p>
<h1 id="查询条件总结"><a href="#查询条件总结" class="headerlink" title="查询条件总结"></a>查询条件总结</h1><h2 id="字段名-op"><a href="#字段名-op" class="headerlink" title="字段名__op:"></a>字段名__op:</h2><p>__exact 精确等于 like ‘aaa’</p>
<p>__iexact精确等于忽略大小写ilike‘aaa’</p>
<p>__contains 包含 like ‘%aaa%’</p>
<p>__icontains包含忽略大小写ilike‘%aaa%’，但是对于sqlite来说，contains的作用效果等同于icontains。</p>
<p>__gt大于</p>
<p>__gte大于等于</p>
<p>__lt小于</p>
<p>__lte小于等于</p>
<p>__in 存在于一个list范围内</p>
<p>__startswith以…开头</p>
<p>__istartswith以…开头忽略大小写</p>
<p>__endswith以…结尾</p>
<p>__iendswith以…结尾，忽略大小写</p>
<p>__range 在…范围内</p>
<p>__year 日期字段的年份</p>
<p>__month 日期字段的月份</p>
<p>__day 日期字段的日</p>
<p>__isnull=True/False</p>
<h2 id="使用sql语句进行查询："><a href="#使用sql语句进行查询：" class="headerlink" title="使用sql语句进行查询："></a>使用sql语句进行查询：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fromdjango.db <span class="keyword">import</span> connection</span><br><span class="line">cursor = connection.cursor()</span><br><span class="line">cursor.execute(“select * <span class="keyword">from</span> Test where name = %s”, <span class="string">"yyp"</span>)</span><br><span class="line">row = cursor.fetchone()</span><br></pre></td></tr></table></figure>



<hr>
<p>参考链接：<br><a href="https://mp.weixin.qq.com/s/okaGAbNkFLhwZXvZV7eUBw" target="_blank" rel="noopener">【经验分享】Django开发中常用到的数据库操作总结</a> </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>ORM</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
        <tag>Django</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之Celery</title>
    <url>/2020/11/20/celery/</url>
    <content><![CDATA[<blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3></blockquote>
<ul>
<li>Celery 是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的一系列工具。</li>
<li>Celery 是一款专注于实时处理的异步任务队列，可用于处理实时数据以及任务调度。</li>
</ul>
<h3 id="Celery架构"><a href="#Celery架构" class="headerlink" title="Celery架构"></a>Celery架构</h3><p>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。</p>
<img data-src="/2020/11/20/celery/celery-architecture.png" class>

<a id="more"></a>

<h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ Redis等等</p>
<h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p>
<h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>异步任务：将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p>
<p>定时任务：定时执行某件事情，比如每天数据统计</p>
<h3 id="Celery的安装配置"><a href="#Celery的安装配置" class="headerlink" title="Celery的安装配置"></a>Celery的安装配置</h3><p><code>pip install celery</code></p>
<p>中间人（Broker）消息中间件：RabbitMQ / Redis</p>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>RabbitMQ 是默认的中间人（Broker），只需要配置连接的URL即可，不需要安装额外的的配置以及初始化配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">broker_url = <span class="string">'amqp://myuser:mypassword@localhost:5672/myvhost'</span></span><br></pre></td></tr></table></figure>

<p>有关 Celery 各种中间人（Broker）的配置列表，请查阅代理设置，并且按照说明设置用户名和密码。</p>
<p><code>RabbitMQ</code>的安装和使用这里不多赘述，有空新开一篇文章讲解</p>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis 的配置非常的简单，只需要配置 Redis 的 URL ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.conf.broker_url &#x3D; &#39;redis:&#x2F;&#x2F;localhost:6379&#x2F;0&#39;</span><br></pre></td></tr></table></figure>

<p>URL 的格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis:&#x2F;&#x2F;:password@hostname:port&#x2F;db_number</span><br></pre></td></tr></table></figure>

<p>URL 的所有配置都可以自定义配置的，默认使用的是 localhost 的 6379 端口中 0 数据库。（ Redis 默认有 16 个数据库）</p>
<p>Celery 也可以连接 Redis 哨兵也是非常简单的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.conf.broker_url = <span class="string">'sentinel://localhost:26379;sentinel://localhost:26380;sentinel://localhost:26381'</span></span><br><span class="line">app.conf.broker_transport_options = &#123;<span class="string">'master_name'</span>:<span class="string">'cluster1'</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RabbitMQ-Redis-比较"><a href="#RabbitMQ-Redis-比较" class="headerlink" title="RabbitMQ / Redis 比较"></a>RabbitMQ / Redis 比较</h4><ul>
<li><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> 的功能比较齐全、稳定、便于安装。在生产环境来说是首选的。</p>
</li>
<li><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a> 功能比较全，但是如果突然停止运行或断电会造成数据丢失。</p>
</li>
</ul>
<p>个人比较喜欢Redis作为Broker，Redis安装和使用比较简单，之所以Redis能够用作消息队列，因为其中的列表数据类型，可以存储多个有序的字符串，既然是有序的，就满足消息队列的特点，使用<code>lpush</code>+<code>rpop</code>或者<code>rpush</code>+<code>lpop</code>实现消息队列。除此之外，redis支持阻塞操作，在弹出元素的时候使用阻塞命令来实现阻塞队列。</p>
<p>以上已经在Redis分类的文章中有写到，新版Redis的特性也能更好地支持消息队列，这一块的知识后续新开一个文章进行学习。</p>
<h3 id="Celery异步任务"><a href="#Celery异步任务" class="headerlink" title="Celery异步任务"></a>Celery异步任务</h3><h4 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h4><p>tasks.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">app = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'amqp://guest@localhost//'</span>)</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<h4 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h4><p>需要调用我们创建的实例任务，可以通过 <code>delay()</code> 进行调用。</p>
<p><code>delay()</code> 是 <code>apply_async()</code> 的快捷方法，可以更好的控制任务的执行（详情：<a href><code>调用任务：Calling Tasks</code></a>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h4 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h4><p>如果需要跟踪任务的状态，Celery 需要在某处存储任务的状态信息。Celery 内置了一些后端结果：<a href="https://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy/Django</a> ORM、<a href="http://memcached.org/" target="_blank" rel="noopener">Memcached</a>、<a href="https://redis.io/" target="_blank" rel="noopener">Redis</a>、 RPC (<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a>/AMQP)以及自定义的后端结果存储中间件。</p>
<p>针对本次实例，我们使用 RPC 作为结果后端，将状态信息作为临时消息回传。后端通过 backend 参数指定给 Celery（或者通过配置模块中的 result_backend 选项设定）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Celery(<span class="string">'tasks'</span>, backend=<span class="string">'rpc://'</span>, broker=<span class="string">'pyamqp://'</span>)</span><br></pre></td></tr></table></figure>

<p>例如，可以使用Redis作为Celery结果后端，使用RabbitMQ作为中间人（Broker）可以使用以下配置（这种组合比较流行）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app = Celery(<span class="string">'tasks'</span>, backend=<span class="string">'redis://localhost'</span>, broker=<span class="string">'pyamqp://'</span>)</span><br></pre></td></tr></table></figure>

<p><code>ready()</code> 可以检测是否已经处理完毕：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.ready()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>整个任务执行过程为异步的，如果一直等待任务完成，会将异步调用转换为同步调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.get(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>如果任务出现异常，<code>get()</code> 会再次引发异常，可以通过 propagate 参数进行覆盖：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.get(propagate=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>如果任务出现异常，可以通过以下命令进行回溯：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.traceback</span><br></pre></td></tr></table></figure>

<h3 id="Celery执行定时任务"><a href="#Celery执行定时任务" class="headerlink" title="Celery执行定时任务"></a>Celery执行定时任务</h3><p><code>celery beat</code> 是一个调度程序；它定期启动任务，然后由集群中的可用节点执行任务。</p>
<h4 id="设定时间让celery执行一个任务"><a href="#设定时间让celery执行一个任务" class="headerlink" title="设定时间让celery执行一个任务"></a>设定时间让celery执行一个任务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">ctime = datetime.now()</span><br><span class="line"><span class="comment"># 默认用utc时间</span></span><br><span class="line">utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">time_delay = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">task_time = utc_ctime + time_delay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用apply_async并设定时间</span></span><br><span class="line">result = add.apply_async(args=[<span class="number">4</span>, <span class="number">3</span>], eta=task_time)</span><br></pre></td></tr></table></figure>

<h4 id="类似于contab的定时任务"><a href="#类似于contab的定时任务" class="headerlink" title="类似于contab的定时任务"></a>类似于contab的定时任务</h4><p>多任务结构中celery.py配置如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">cel = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://127.0.0.1:6379/1'</span>, backend=<span class="string">'redis://127.0.0.1:6379/2'</span>, include=[</span><br><span class="line">    <span class="string">'celery_task.tasks1'</span>,</span><br><span class="line">    <span class="string">'celery_task.tasks2'</span>,</span><br><span class="line">])</span><br><span class="line">cel.conf.timezone = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">cel.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">cel.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="comment"># 名字随意命名</span></span><br><span class="line">    <span class="string">'add-every-10-seconds'</span>: &#123;</span><br><span class="line">        <span class="comment"># 执行tasks1下的test_celery函数</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'celery_task.tasks1.test_celery'</span>,</span><br><span class="line">        <span class="comment"># 每隔2秒执行一次</span></span><br><span class="line">        <span class="comment"># 'schedule': 1.0,</span></span><br><span class="line">        <span class="comment"># 'schedule': crontab(minute="*/1"),</span></span><br><span class="line">        <span class="string">'schedule'</span>: timedelta(seconds=<span class="number">2</span>),</span><br><span class="line">        <span class="comment"># 传递参数</span></span><br><span class="line">        <span class="string">'args'</span>: (<span class="string">'test'</span>,)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 'add-every-12-seconds': &#123;</span></span><br><span class="line">    <span class="comment">#     'task': 'celery_task.tasks1.test_celery',</span></span><br><span class="line">    <span class="comment">#     每年4月11号，8点42分执行</span></span><br><span class="line">    <span class="comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span></span><br><span class="line">    <span class="comment">#     'schedule': crontab(minute=42, hour=8, day_of_month=11, month_of_year=4),</span></span><br><span class="line">    <span class="comment">#     'args': (16, 16)</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动一个beat：celery beat -A celery_task -l info</p>
<p>启动work执行：celery worker -A celery_task -l info -P  eventlet</p>
<h3 id="Django中使用Celery"><a href="#Django中使用Celery" class="headerlink" title="Django中使用Celery"></a>Django中使用Celery</h3><p>在Django项目中异步任务和周期任务是必不可少的：</p>
<h4 id="添加Celery配置项"><a href="#添加Celery配置项" class="headerlink" title="添加Celery配置项"></a>添加Celery配置项</h4><p>在项目目录下创建celeryconfig.py（也可以写在settings.py中）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> djcelery</span><br><span class="line">djcelery.setup_loader()</span><br><span class="line"><span class="comment"># CELERY 配置，申明任务的文件路径，即包含有 @task 装饰器的函数文件</span></span><br><span class="line">CELERY_IMPORTS=(</span><br><span class="line">    <span class="string">'app01.tasks'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 有些情况可以防止死锁</span></span><br><span class="line">CELERYD_FORCE_EXECV=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置并发worker数量</span></span><br><span class="line">CELERYD_CONCURRENCY=<span class="number">4</span></span><br><span class="line"><span class="comment"># 允许重试</span></span><br><span class="line">CELERY_ACKS_LATE=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 每个worker最多执行100个任务被销毁，可以防止内存泄漏</span></span><br><span class="line">CELERYD_MAX_TASKS_PER_CHILD=<span class="number">100</span></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line">CELERYD_TASK_TIME_LIMIT=<span class="number">12</span>*<span class="number">30</span></span><br><span class="line"></span><br><span class="line">CELERYBEAT_SCHEDULER = <span class="string">"djcelery.schedulers.DatabaseScheduler"</span></span><br></pre></td></tr></table></figure>

<h4 id="在app目录下创建tasks-py"><a href="#在app目录下创建tasks-py" class="headerlink" title="在app目录下创建tasks.py"></a>在app目录下创建tasks.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'a.text'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'a'</span>)</span><br><span class="line">    print(a+b)</span><br></pre></td></tr></table></figure>

<h4 id="视图函数views-py"><a href="#视图函数views-py" class="headerlink" title="视图函数views.py"></a>视图函数views.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01.tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># result=add.delay(2,3)</span></span><br><span class="line">    ctime = datetime.now()</span><br><span class="line">    <span class="comment"># 默认用utc时间</span></span><br><span class="line">    utc_ctime = datetime.utcfromtimestamp(ctime.timestamp())</span><br><span class="line">    <span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">    time_delay = timedelta(seconds=<span class="number">5</span>)</span><br><span class="line">    task_time = utc_ctime + time_delay</span><br><span class="line">    result = add.apply_async(args=[<span class="number">4</span>, <span class="number">3</span>], eta=task_time)</span><br><span class="line">    print(result.id)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Django的settings-py"><a href="#Django的settings-py" class="headerlink" title="Django的settings.py"></a>Django的settings.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'djcelery'</span>,</span><br><span class="line">    <span class="string">'app'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">from</span> djagocele <span class="keyword">import</span> celeryconfig</span><br><span class="line">BROKER_BACKEND=<span class="string">'redis'</span></span><br><span class="line">BROKER_URL=<span class="string">'redis://127.0.0.1:6379/1'</span></span><br><span class="line">CELERY_RESULT_BACKEND=<span class="string">'redis://127.0.0.1:6379/2'</span></span><br></pre></td></tr></table></figure>

<h4 id="周期任务"><a href="#周期任务" class="headerlink" title="周期任务"></a>周期任务</h4><p>celery beat是用来开启定时任务调度的，一般用法为：启动celery beat，然后启动worker，让beat去调用worker里面的任务。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> celery.task <span class="keyword">import</span> task, periodic_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab设置每天8点</span></span><br><span class="line"><span class="comment"># @periodic_task(run_every=(crontab(minute=0, hour=8)))</span></span><br><span class="line"><span class="comment"># crontab设置每分钟</span></span><br><span class="line"><span class="meta">@periodic_task(run_every=crontab(minute="*/1"))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distribute_task</span><span class="params">()</span>:</span></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 使用周期任务调动异步任务</span></span><br><span class="line">    get_alarm_list.apply_async(args=(now,))</span><br><span class="line">    </span><br><span class="line"><span class="meta">@task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_alarm_list</span><span class="params">(source_time)</span>:</span></span><br><span class="line">    print(source_time)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>写了这么多，从Celery简介、架构，到消息队列选型，再Python中如何使用Celery、Django项目怎么配置集成Celery，也算是Celery的超详细讲解了，用了这么久Celery，总算填了一个坑哈哈。</p>
<p>想要学习Celery更多的设计、调度、优化、路由、并发、信号、调试、测试、扩展等详细内容，可以参考 <a href="https://www.celerycn.io/" target="_blank" rel="noopener">https://www.celerycn.io/</a></p>
<hr>
<p>参考链接：</p>
<p><a href="https://github.com/celery/celery" target="_blank" rel="noopener">Celery 源码 - Github</a></p>
<p><a href="https://github.com/celery/django-celery" target="_blank" rel="noopener">django-celery - Github</a></p>
<p><a href="https://github.com/celery/django-celery-beat" target="_blank" rel="noopener">django-celery-beat 源码 - Github</a></p>
<p><a href="https://www.celerycn.io/" target="_blank" rel="noopener">《Celery 中文手册》</a>  </p>
<p><a href="https://www.jianshu.com/p/620052aadbff" target="_blank" rel="noopener">Celery - 简书</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Celery</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Redis</tag>
        <tag>Django</tag>
        <tag>Celery</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之多线程与多进程</title>
    <url>/2020/11/18/python-thread-process/</url>
    <content><![CDATA[<blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></blockquote>
<p>现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统，操作系统可以同时运行多个任务。</p>
<p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p>
<p>有些进程还不止同时干一件事，比如Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>
<p>多任务的实现有3种方式：</p>
<ul>
<li>多进程模式；</li>
<li>多线程模式；</li>
<li>多进程 + 多线程模式。</li>
</ul>
<p>Python既支持多进程，又支持多线程，线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p>
<p>多进程和多线程的程序涉及到同步、数据共享的问题，编写起来更复杂。</p>
<a id="more"></a>

<h3 id="线程模块"><a href="#线程模块" class="headerlink" title="线程模块"></a>线程模块</h3><p>Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。</p>
<p>_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。</p>
<p>threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法：</p>
<ul>
<li>threading.currentThread(): 返回当前的线程变量。</li>
<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>
<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>
</ul>
<p>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</p>
<ul>
<li>run(): 用以表示线程活动的方法。</li>
<li>start():启动线程活动。</li>
<li>join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li>
<li>isAlive(): 返回线程是否活动的。</li>
<li>getName(): 返回线程名。</li>
<li>setName(): 设置线程名。</li>
</ul>
<hr>
<h4 id="使用-threading-模块创建线程"><a href="#使用-threading-模块创建线程" class="headerlink" title="使用 threading 模块创建线程"></a>使用 threading 模块创建线程</h4><p>我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">exitFlag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadID, name, counter)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.counter = counter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"开始线程："</span> + self.name)</span><br><span class="line">        print_time(self.name, self.counter, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"退出线程："</span> + self.name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, delay, counter)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> counter:</span><br><span class="line">        <span class="keyword">if</span> exitFlag:</span><br><span class="line">            threadName.exit()</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s: %s"</span> % (threadName, time.ctime(time.time())))</span><br><span class="line">        counter -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新线程</span></span><br><span class="line">thread1 = myThread(<span class="number">1</span>, <span class="string">"Thread-1"</span>, <span class="number">1</span>)</span><br><span class="line">thread2 = myThread(<span class="number">2</span>, <span class="string">"Thread-2"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新线程</span></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line">thread1.join()</span><br><span class="line">thread2.join()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"退出主线程"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p>
<p>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：</p>
<p>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。</p>
<p>考虑这样一种情况：一个列表里所有元素都是0，线程”set”从后向前把所有元素改成1，而线程”print”负责从前往后读取列表并打印。</p>
<p>那么，可能线程”set”开始改的时候，线程”print”便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。</p>
<p>锁有两种状态——锁定和未锁定。每当一个线程比如”set”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”set”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”set”继续。</p>
<p>经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。</p>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>在以上代码加以改进，实现线程同步：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadID, name, counter)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.counter = counter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"开启线程： "</span> + self.name)</span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        print_time(self.name, self.counter, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        threadLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(threadName, delay, counter)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> counter:</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%s: %s"</span> % (threadName, time.ctime(time.time())))</span><br><span class="line">        counter -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程锁</span></span><br><span class="line">threadLock = threading.Lock()</span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新线程</span></span><br><span class="line">thread1 = myThread(<span class="number">1</span>, <span class="string">"Thread-1"</span>, <span class="number">1</span>)</span><br><span class="line">thread2 = myThread(<span class="number">2</span>, <span class="string">"Thread-2"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新线程</span></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加线程到线程列表</span></span><br><span class="line">threads.append(thread1)</span><br><span class="line">threads.append(thread2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有线程完成</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"退出主线程"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="线程优先级队列（-Queue）"><a href="#线程优先级队列（-Queue）" class="headerlink" title="线程优先级队列（ Queue）"></a>线程优先级队列（ Queue）</h4><p>Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。</p>
<p>这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。</p>
<p>Queue 模块中的常用方法:</p>
<ul>
<li>Queue.qsize() 返回队列的大小</li>
<li>Queue.empty() 如果队列为空，返回True,反之False</li>
<li>Queue.full() 如果队列满了，返回True,反之False</li>
<li>Queue.full 与 maxsize 大小对应</li>
<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>
<li>Queue.get_nowait() 相当Queue.get(False)</li>
<li>Queue.put(item) 写入队列，timeout等待时间</li>
<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>
<li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>
<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>
</ul>
<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><p>以下是在线程优先级队列Queue下的多线程实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">import queue</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">exitFlag &#x3D; 0</span><br><span class="line"></span><br><span class="line">class myThread (threading.Thread):</span><br><span class="line">    def __init__(self, threadID, name, q):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID &#x3D; threadID</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.q &#x3D; q</span><br><span class="line">    def run(self):</span><br><span class="line">        print (&quot;开启线程：&quot; + self.name)</span><br><span class="line">        process_data(self.name, self.q)</span><br><span class="line">        print (&quot;退出线程：&quot; + self.name)</span><br><span class="line"></span><br><span class="line">def process_data(threadName, q):</span><br><span class="line">    while not exitFlag:</span><br><span class="line">        queueLock.acquire()</span><br><span class="line">        if not workQueue.empty():</span><br><span class="line">            data &#x3D; q.get()</span><br><span class="line">            queueLock.release()</span><br><span class="line">            print (&quot;%s processing %s&quot; % (threadName, data))</span><br><span class="line">        else:</span><br><span class="line">            queueLock.release()</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">threadList &#x3D; [&quot;Thread-1&quot;, &quot;Thread-2&quot;, &quot;Thread-3&quot;]</span><br><span class="line">nameList &#x3D; [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;]</span><br><span class="line">queueLock &#x3D; threading.Lock()</span><br><span class="line">workQueue &#x3D; queue.Queue(10)</span><br><span class="line">threads &#x3D; []</span><br><span class="line">threadID &#x3D; 1</span><br><span class="line"></span><br><span class="line"># 创建新线程</span><br><span class="line">for tName in threadList:</span><br><span class="line">    thread &#x3D; myThread(threadID, tName, workQueue)</span><br><span class="line">    thread.start()</span><br><span class="line">    threads.append(thread)</span><br><span class="line">    threadID +&#x3D; 1</span><br><span class="line"></span><br><span class="line"># 填充队列</span><br><span class="line">queueLock.acquire()</span><br><span class="line">for word in nameList:</span><br><span class="line">    workQueue.put(word)</span><br><span class="line">queueLock.release()</span><br><span class="line"></span><br><span class="line"># 等待队列清空</span><br><span class="line">while not workQueue.empty():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 通知线程是时候退出</span><br><span class="line">exitFlag &#x3D; 1</span><br><span class="line"></span><br><span class="line"># 等待所有线程完成</span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br><span class="line">print (&quot;退出主线程&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。Python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在Python程序中轻松创建子进程。</p>
<p>但是Python是跨平台的，自然也应该提供一个跨平台的多进程支持。<code>multiprocessing</code>模块就是跨平台版本的多进程模块。</p>
<h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><p><code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象：</p>
<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))</span><br><span class="line">    print(<span class="string">'Child process will start.'</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'Child process end.'</span>)</span><br></pre></td></tr></table></figure>



<p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用<code>start()</code>方法启动，<code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p>
<h4 id="进程池Pool"><a href="#进程池Pool" class="headerlink" title="进程池Pool"></a>进程池Pool</h4><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All subprocesses done.'</span>)</span><br></pre></td></tr></table></figure>

<p>其中 <code>p.apply_async(long_time_task, args=(i,))</code> 中，<code>args</code>需要以元组形式传入目标任务<code>long_time_task</code>的参数。</p>
<p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p>
<p><code>Pool</code>的默认大小是CPU的核数，所以只有当子进程数大于CPU数时，才能形成阻塞的现象。</p>
<h4 id="子进程-subprocess"><a href="#子进程-subprocess" class="headerlink" title="子进程 subprocess"></a>子进程 subprocess</h4><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p>
<p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p>
<h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><p><code>subprocess</code>可以实现<code>os</code>模块的功能，启动一个子进程，然后在当前操作系统下执行命令和脚本。(subprocess具体功能可以放到os模块和文件IO学习)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">print(<span class="string">'$ nslookup www.python.org'</span>)</span><br><span class="line">r = subprocess.call([<span class="string">'nslookup'</span>, <span class="string">'www.python.org'</span>])</span><br><span class="line">print(<span class="string">'Exit code:'</span>, r)</span><br></pre></td></tr></table></figure>

<h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p>
<h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = q.get(<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure>

<h4 id="进程小结"><a href="#进程小结" class="headerlink" title="进程小结"></a>进程小结</h4><p>在Unix/Linux下，可以使用<code>fork()</code>调用实现多进程。</p>
<p>要实现跨平台的多进程，可以使用<code>multiprocessing</code>模块。</p>
<p>进程间通信是通过<code>Queue</code>、<code>Pipes</code>等实现的。</p>
<h3 id="多线程和多进程的效率比较"><a href="#多线程和多进程的效率比较" class="headerlink" title="多线程和多进程的效率比较"></a>多线程和多进程的效率比较</h3><p>资料显示，如果多线程的进程是<strong>CPU密集型</strong>的，那多线程并不能有多少效率上的提升，相反还可能会因为线程的频繁切换，导致效率下降，推荐使用多进程；如果是<strong>IO密集型</strong>，多线程进程可以利用IO阻塞等待时的空闲时间执行其他线程，提升效率。所以我们根据实验对比不同场景的效率。</p>
<h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">CPU密集型操作</th>
<th align="left">IO密集型操作</th>
<th>网络请求密集型操作</th>
</tr>
</thead>
<tbody><tr>
<td align="left">线性操作</td>
<td align="left">94.91824996469</td>
<td align="left">22.46199995279</td>
<td>7.3296000004</td>
</tr>
<tr>
<td align="left">多线程操作</td>
<td align="left">101.1700000762</td>
<td align="left">24.8605000973</td>
<td>0.5053332647</td>
</tr>
<tr>
<td align="left">多进程操作</td>
<td align="left">53.8899999857</td>
<td align="left">12.7840000391</td>
<td>0.5045000315</td>
</tr>
</tbody></table>
<p>通过上面的结果，我们可以看到：</p>
<ul>
<li>多线程在IO密集型的操作下似乎也没有很大的优势（也许IO操作的任务再繁重一些就能体现出优势），在CPU密集型的操作下明显地比单线程线性执行性能更差，但是对于网络请求这种忙等阻塞线程的操作，多线程的优势便非常显著了。</li>
<li>多进程无论是在CPU密集型还是IO密集型以及网络请求密集型（经常发生线程阻塞的操作）中，都能体现出性能的优势。不过在类似网络请求密集型的操作上，与多线程相差无几，但却更占用CPU等资源，所以对于这种情况下，我们可以选择多线程来执行。</li>
</ul>
<hr>
<p>参考链接：</p>
<p><a href="https://www.runoob.com/w3cnote/python-single-thread-multi-thread-and-multi-process.html" target="_blank" rel="noopener">Python中单线程、多线程和多进程的效率对比实验</a>  </p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064" target="_blank" rel="noopener">Python中多任务的解决方案之进程和线程</a></p>
<p><a href="https://www.runoob.com/python3/python3-multithreading.html" target="_blank" rel="noopener">Pyhton3多线程的使用</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>多任务</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>多线程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之使用pyvmomi管理VMware</title>
    <url>/2020/11/17/pyvmomi-sample/</url>
    <content><![CDATA[<blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></blockquote>
<p>官方定义：</p>
<p>pyVmomi is the Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter.</p>
<p><a href="https://link.jianshu.com/?t=https://github.com/vmware/pyvmomi/" target="_blank" rel="noopener">pyVmomi</a> 是 VMware vSphere API 的一个 Python sdk，我们可以利用它来管理与交互vCenter、ESX、ESXi，获取我们需要的信息。</p>
<p>由于工作中需要对接vCenter，实现虚拟化平台、数据中心、物理机、物理机和存储的指标采集及监控，也需要通过启停虚拟机网卡来实现灾备切换，所以本文结合了笔者的经验和 pyVmomi 官方案例。</p>
<a id="more"></a>

<p>VMware vSphere 架构图：</p>
<img data-src="/2020/11/17/pyvmomi-sample/vsphere.png" class>

<blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3></blockquote>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>笔者基于 Python3.6.7 与 pyVmomi6.5.0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyVmomi==6.5.0</span><br></pre></td></tr></table></figure>

<p>VMware vSphere 版本：6.5</p>
<h3 id="连接-vSphere"><a href="#连接-vSphere" class="headerlink" title="连接 vSphere"></a>连接 vSphere</h3><p>我这里定义了一个基础的类，使用vCenter的地址、账号（默认管理员为<a href="mailto:administrator@vsphere.local">administrator@vsphere.local</a>）及密码实例化后，可以使用连接、断开连接、根据vSphere中唯一标识获取对应实例，及监控任务结果的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> pyVim <span class="keyword">import</span> connect</span><br><span class="line"><span class="keyword">from</span> ssl <span class="keyword">import</span> SSLEOFError</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vSphereBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    与vCenter交互的基类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user, pwd, host)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.user = user</span><br><span class="line">        self.pwd = pwd</span><br><span class="line">        </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_connect_vc_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 支持SSL连接和非SSL连接 """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)</span><br><span class="line">            context.verify_mode = ssl.CERT_NONE</span><br><span class="line">            si = SmartConnect(host=self.host, user=self.user, pwd=self.pwd, port=<span class="number">443</span>, sslContext=context)</span><br><span class="line">            <span class="keyword">return</span> si, <span class="string">"connect VC success with SSL"</span></span><br><span class="line">        <span class="keyword">except</span> SSLEOFError:</span><br><span class="line">            context = ssl._create_unverified_context()</span><br><span class="line">            context.verify_mode = ssl.CERT_NONE</span><br><span class="line">            si = SmartConnect(host=self.host, user=self.user, pwd=self.pwd, port=<span class="number">443</span>, sslContext=context)</span><br><span class="line">            <span class="keyword">return</span> si, <span class="string">"connect VC success without SSL"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, e</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deconnect_vc</span><span class="params">(self, si)</span>:</span></span><br><span class="line">        connect.Disconnect(si)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_content</span><span class="params">(self)</span>:</span></span><br><span class="line">        si = self._connect_vc()</span><br><span class="line">        content = si.RetrieveContent()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_obj_bymoId</span><span class="params">(self, content, vimtype, moId)</span>:</span></span><br><span class="line">        obj = <span class="literal">None</span></span><br><span class="line">        container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> container.view:</span><br><span class="line">            <span class="keyword">if</span> moId:</span><br><span class="line">                <span class="keyword">if</span> c._moId == moId:</span><br><span class="line">                    obj = c</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                obj = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_obj</span><span class="params">(self, content, vimtype, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return an object by name, if name is None the</span></span><br><span class="line"><span class="string">        first found object is returned</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        obj = <span class="literal">None</span></span><br><span class="line">        container = content.viewManager.CreateContainerView(</span><br><span class="line">            content.rootFolder, vimtype, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> container.view:</span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                <span class="keyword">if</span> c.name == name:</span><br><span class="line">                    obj = c</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                obj = c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_wait_for_task</span><span class="params">(self, task)</span>:</span></span><br><span class="line">        <span class="string">""" wait for a vCenter task to finish """</span></span><br><span class="line">        task_done = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> task_done:</span><br><span class="line">            <span class="keyword">if</span> task.info.state == <span class="string">'success'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">True</span>, <span class="string">"data"</span>: task.info.result&#125;</span><br><span class="line">            <span class="keyword">if</span> task.info.state == <span class="string">'error'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"data"</span>: task.info.error.msg&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Example：虚拟机网卡启停"><a href="#Example：虚拟机网卡启停" class="headerlink" title="Example：虚拟机网卡启停"></a>Example：虚拟机网卡启停</h3><p>以下定义了一个虚拟机的类，继承 vSphere 的基类，在切换虚拟机网络适配器状态的方法中，传入虚拟机的名称、网卡的编号，以及该网卡需要做connect还是disconnect变更，就可以实现该需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"><span class="keyword">from</span> pyVmomi <span class="keyword">import</span> vim</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pyVim.task <span class="keyword">import</span> WaitForTask</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtualMachine</span><span class="params">(vSphereBase)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">change_nic_state</span><span class="params">(self, vmname, unitnumber, state)</span>:</span></span><br><span class="line">        <span class="comment"># 更改虚拟机网络适配器状态</span></span><br><span class="line">        si, message = self._connect_vc_exception_message()</span><br><span class="line">        <span class="keyword">if</span> si <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            logger.error(str(message))</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"message"</span>: str(message)&#125;</span><br><span class="line">        logger.info(str(message))</span><br><span class="line">        <span class="comment"># disconnect vc</span></span><br><span class="line">        atexit.register(Disconnect, si)</span><br><span class="line"></span><br><span class="line">        content = si.RetrieveContent()</span><br><span class="line">        logger.info(<span class="string">'Searching for VM &#123;&#125;'</span>.format(vmname))</span><br><span class="line">        vm_obj = self.get_obj(content, [vim.VirtualMachine], vmname)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> vm_obj:</span><br><span class="line">            result = self.update_virtual_nic_state(vm_obj, unitnumber, state)</span><br><span class="line">            logger.info(<span class="string">'VM NIC &#123;&#125; successfully'</span> \</span><br><span class="line">                        <span class="string">' state changed to &#123;&#125;'</span>.format(unitnumber, state))</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: result&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">'VM not found'</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"message"</span>: <span class="string">"VM not found"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_virtual_nic_state</span><span class="params">(self, vm_obj, nic_number, new_nic_state)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param vm_obj: Virtual Machine Object</span></span><br><span class="line"><span class="string">        :param nic_number: Network Interface Controller Number</span></span><br><span class="line"><span class="string">        :param new_nic_state: Either Connect, Disconnect or Delete</span></span><br><span class="line"><span class="string">        :return: True if success</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nic_prefix_label = <span class="string">'Network adapter '</span></span><br><span class="line">        nic_label = nic_prefix_label + str(nic_number)</span><br><span class="line">        virtual_nic_device = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> vm_obj.config.hardware.device:</span><br><span class="line">            <span class="keyword">if</span> isinstance(dev, vim.vm.device.VirtualEthernetCard) \</span><br><span class="line">                    <span class="keyword">and</span> dev.deviceInfo.label == nic_label:</span><br><span class="line">                virtual_nic_device = dev</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> virtual_nic_device:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Virtual &#123;&#125; could not be found.'</span>.format(nic_label))</span><br><span class="line"></span><br><span class="line">        virtual_nic_spec = vim.vm.device.VirtualDeviceSpec()</span><br><span class="line">        virtual_nic_spec.operation = \</span><br><span class="line">            vim.vm.device.VirtualDeviceSpec.Operation.remove \</span><br><span class="line">                <span class="keyword">if</span> new_nic_state == <span class="string">'delete'</span> \</span><br><span class="line">                <span class="keyword">else</span> vim.vm.device.VirtualDeviceSpec.Operation.edit</span><br><span class="line">        virtual_nic_spec.device = virtual_nic_device</span><br><span class="line">        virtual_nic_spec.device.key = virtual_nic_device.key</span><br><span class="line">        virtual_nic_spec.device.macAddress = virtual_nic_device.macAddress</span><br><span class="line">        virtual_nic_spec.device.backing = virtual_nic_device.backing</span><br><span class="line">        virtual_nic_spec.device.wakeOnLanEnabled = \</span><br><span class="line">            virtual_nic_device.wakeOnLanEnabled</span><br><span class="line">        connectable = vim.vm.device.VirtualDevice.ConnectInfo()</span><br><span class="line">        <span class="keyword">if</span> new_nic_state == <span class="string">'connect'</span>:</span><br><span class="line">            connectable.connected = <span class="literal">True</span></span><br><span class="line">            connectable.startConnected = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> new_nic_state == <span class="string">'disconnect'</span>:</span><br><span class="line">            connectable.connected = <span class="literal">False</span></span><br><span class="line">            connectable.startConnected = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            connectable = virtual_nic_device.connectable</span><br><span class="line">        virtual_nic_spec.device.connectable = connectable</span><br><span class="line">        dev_changes = []</span><br><span class="line">        dev_changes.append(virtual_nic_spec)</span><br><span class="line">        spec = vim.vm.ConfigSpec()</span><br><span class="line">        spec.deviceChange = dev_changes</span><br><span class="line">        task = vm_obj.ReconfigVM_Task(spec=spec)</span><br><span class="line">        WaitForTask(task)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>在上文定义了实例化 vSphere 和切换网卡的方法后，我们使用以下代码进行调用，由于对比简单，这里不进行赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    account = <span class="string">"1.1.1.1"</span></span><br><span class="line">    password = <span class="string">"administrator@vsphere.local"</span></span><br><span class="line">    vc_host = <span class="string">"xxxxxx"</span></span><br><span class="line">    <span class="comment"># 连接vSphere，生成vSphere的实例</span></span><br><span class="line">    vm = vSphereBase(account, password, vc_host)</span><br><span class="line">    <span class="comment"># 对该vSphere中的虚拟机进行网卡变更，返回结果</span></span><br><span class="line">    vm_name = <span class="string">"device-192.168.1.1"</span></span><br><span class="line">    unit_number = <span class="number">1</span></span><br><span class="line">    vm_state = <span class="string">"disconnect"</span></span><br><span class="line">    result = vm.change_nic_state(vm_name, unit_number, vm_state)</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于VMware vSphere中设备众多，且有层级嵌套的关联关系，官方只提供了所有的接口文档和少量案例，更多需求额实现需要自己去开发，就如上文中的描述，首先连接vSphere（vCenter），然后针对需要的概念模型进行数据采集或者操作变更。</p>
<hr>
<p><strong><em>官方文档：</em></strong><br><a href="https://github.com/vmware/pyvmomi/" target="_blank" rel="noopener">Github pyvmomi 官方地址</a><br><a href="https://github.com/vmware/pyvmomi-community-samples/" target="_blank" rel="noopener">Github pyvmomi samples 官方实例</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>VMware vSphere</tag>
        <tag>vCenter</tag>
        <tag>虚拟化</tag>
        <tag>pyvmomi</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis修炼之使用场景</title>
    <url>/2020/11/16/redis-use-case/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>接着Redis数据类型来说，来谈谈Redis的具体使用场景，首先回顾一下：</p>
<p>Redis是一种基于键值对的NoSQL数据库，它的值主要由string（字符串），hash（哈希），list（列表），set（集合），zset（有序集合）五种基本数据结构构成。那么这些数据结构的使用场景有哪些？以下将用内部编码及使用场景的方式浅析Redis的五种数据类型。</p>
<a id="more"></a>


<blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2></blockquote>
<h3 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一 字符串"></a><strong>一 字符串</strong></h3><p>字符串类型是Redis最基础的数据结构，字符串类型可以是<code>JSON</code>、<code>XML</code>甚至是二进制的图片等数据，但是最大值不能超过512MB。</p>
<h4 id="1-1-内部编码"><a href="#1-1-内部编码" class="headerlink" title="1.1 内部编码"></a><strong>1.1 内部编码</strong></h4><p>Redis会根据当前值的类型和长度决定使用哪种内部编码来实现。</p>
<p>字符串类型的内部编码有3种：</p>
<ul>
<li>int：8个字节的长整型。</li>
<li>embstr：小于等于39个字节的字符串。</li>
<li>raw：大于39个字节的字符串。</li>
</ul>
<h4 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a><strong>1.2 使用场景</strong></h4><h5 id="1-2-1-缓存"><a href="#1-2-1-缓存" class="headerlink" title="1.2.1 缓存"></a>1.2.1 缓存</h5><p>在web服务中，使用MySQL作为数据库，Redis作为缓存。由于Redis具有支撑高并发的特性，通常能起到加速读写和降低后端压力的作用。web端的大多数请求都是从Redis中获取的数据，如果Redis中没有需要的数据，则会从MySQL中去获取，并将获取到的数据写入redis。</p>
<h5 id="1-2-2-计数"><a href="#1-2-2-计数" class="headerlink" title="1.2.2 计数"></a>1.2.2 计数</h5><p>Redis中有一个字符串相关的命令<code>incr key</code>，<code>incr</code>命令对值做自增操作，返回结果分为以下三种情况：</p>
<ul>
<li>值不是整数，返回错误</li>
<li>值是整数，返回自增后的结果</li>
<li>key不存在，默认键为<code>0</code>，返回<code>1</code></li>
</ul>
<p>比如文章的阅读量，视频的播放量等等都会使用redis来计数，每播放一次，对应的播放量就会加1，同时将这些数据异步存储到数据库中达到持久化的目的。</p>
<h5 id="1-2-3-共享Session"><a href="#1-2-3-共享Session" class="headerlink" title="1.2.3 共享Session"></a>1.2.3 共享Session</h5><p>在分布式系统中，用户的每次请求会访问到不同的服务器，这就会导致session不同步的问题，假如一个用来获取用户信息的请求落在A服务器上，获取到用户信息后存入session。下一个请求落在B服务器上，想要从session中获取用户信息就不能正常获取了，因为用户信息的session在服务器A上，为了解决这个问题，使用redis集中管理这些session，将session存入redis，使用的时候直接从redis中获取就可以了。</p>
<h5 id="1-2-4-限速"><a href="#1-2-4-限速" class="headerlink" title="1.2.4 限速"></a>1.2.4 限速</h5><p>为了安全考虑，有些网站会对IP进行限制，限制同一IP在一定时间内访问次数不能超过n次。</p>
<h3 id="二-哈希"><a href="#二-哈希" class="headerlink" title="二 哈希"></a><strong>二 哈希</strong></h3><p>Redis中，哈希类型是指一个键值对的存储结构。</p>
<h4 id="2-1-内部编码"><a href="#2-1-内部编码" class="headerlink" title="2.1 内部编码"></a><strong>2.1 内部编码</strong></h4><p>哈希类型的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置（默认512个）同时所有值都小于<code>hash-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，所以比hashtable更加节省内存。</li>
<li>hashtable（哈希表）：当ziplist不能满足要求时，会使用hashtable。</li>
</ul>
<h4 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a><strong>2.2 使用场景</strong></h4><p>由于hash类型存储的是一个键值对，比如数据库有以下一个用户表结构</p>
<table>
<thead>
<tr>
<th align="left">id</th>
<th align="left">name</th>
<th align="left">age</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">豆豆</td>
<td align="left">24</td>
</tr>
</tbody></table>
<p>将以上信息存入redis，用表明:id作为key，用户属性作为值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset user:1 name 豆豆 age 24</span><br></pre></td></tr></table></figure>

<p>使用哈希存储会比字符串更加方便直观</p>
<h3 id="三-列表"><a href="#三-列表" class="headerlink" title="三 列表"></a><strong>三 列表</strong></h3><p>列表类型用来存储多个<strong>有序</strong>的字符串，一个列表最多可以存储<code>2^32-1</code>个元素，列表的两端都可以插入和弹出元素。</p>
<h4 id="3-1-内部编码"><a href="#3-1-内部编码" class="headerlink" title="3.1 内部编码"></a><strong>3.1 内部编码</strong></h4><p>列表的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当哈希类型元素个数小于<code>list-max-ziplist-entries</code>配置（默认512个）同时所有值都小于<code>list-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，所以比hashtable更加节省内存。</li>
<li>linkedlist（链表）：当ziplist不能满足要求时，会使用linkedlist。</li>
</ul>
<h4 id="3-2-使用场景"><a href="#3-2-使用场景" class="headerlink" title="3.2 使用场景"></a><strong>3.2 使用场景</strong></h4><h5 id="3-2-1-消息队列"><a href="#3-2-1-消息队列" class="headerlink" title="3.2.1 消息队列"></a>3.2.1 消息队列</h5><p>列表用来存储多个有序的字符串，既然是有序的，那么就满足消息队列的特点。使用<code>lpush</code>+<code>rpop</code>或者<code>rpush</code>+<code>lpop</code>实现消息队列。除此之外，redis支持阻塞操作，在弹出元素的时候使用阻塞命令来实现阻塞队列。</p>
<p>在蓝鲸SaaS开发中，Django的Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ、Redis等等。SaaS的本地开发中，Celery也默认选择了Redis作为消息队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Celery 消息队列设置 RabbitMQ</span></span><br><span class="line"><span class="comment"># BROKER_URL = 'amqp://guest:guest@localhost:5672//'</span></span><br><span class="line"><span class="comment"># Celery 消息队列设置 Redis</span></span><br><span class="line">BROKER_URL = <span class="string">"redis://localhost:6379/0"</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2-2-栈"><a href="#3-2-2-栈" class="headerlink" title="3.2.2 栈"></a>3.2.2 栈</h5><p>由于列表存储的是有序字符串，满足队列的特点，也就能满足栈先进后出的特点，使用<code>lpush</code>+<code>lpop</code>或者<code>rpush</code>+<code>rpop</code>实现栈。</p>
<h5 id="3-2-3-文章列表"><a href="#3-2-3-文章列表" class="headerlink" title="3.2.3 文章列表"></a>3.2.3 文章列表</h5><p>因为列表的元素不但是有序的，而且还支持按照索引范围获取元素。因此我们可以使用命令<code>lrange key 0 9</code>分页获取文章列表</p>
<h3 id="四-集合"><a href="#四-集合" class="headerlink" title="四 集合"></a><strong>四 集合</strong></h3><p>集合类型也可以保存多个字符串元素，与列表不同的是，集合中不允许有重复元素并且集合中的元素是无序的。一个集合最多可以存储<code>2^32-1</code>个元素。</p>
<h4 id="4-1-内部编码"><a href="#4-1-内部编码" class="headerlink" title="4.1 内部编码"></a><strong>4.1 内部编码</strong></h4><p>集合类型的内部编码有两种：</p>
<ul>
<li>intset（整数集合）：当集合中的元素都是整数且元素个数小于<code>set-max-intset-entries</code>配置（默认512个）时，redis会选用intset来作为集合的内部实现，从而减少内存的使用。</li>
<li>hashtable（哈希表）：当intset不能满足要求时，会使用hashtable。</li>
</ul>
<h4 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a><strong>4.2 使用场景</strong></h4><h5 id="4-2-1-用户标签"><a href="#4-2-1-用户标签" class="headerlink" title="4.2.1 用户标签"></a>4.2.1 用户标签</h5><p>例如一个用户对篮球、足球感兴趣，另一个用户对橄榄球、乒乓球感兴趣，这些兴趣点就是一个标签。有了这些数据就可以得到喜欢同一个标签的人，以及用户的共同感兴趣的标签。给用户打标签的时候需要①给用户打标签，②给标签加用户，需要给这两个操作增加事务。</p>
<ul>
<li>给用户打标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd user:1:tags tag1 tag2</span><br></pre></td></tr></table></figure>

<ul>
<li>给标签添加用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd tag1:users user:1</span><br><span class="line">sadd tag2:users user:1</span><br></pre></td></tr></table></figure>

<p>使用交集（sinter）求两个user的共同标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinter user:1:tags user:2:tags</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-抽奖功能"><a href="#4-2-2-抽奖功能" class="headerlink" title="4.2.2 抽奖功能"></a>4.2.2 抽奖功能</h5><p>集合有两个命令支持获取随机数，分别是：</p>
<ul>
<li>随机获取count个元素，集合元素个数不变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure>

<ul>
<li>随机弹出count个元素，元素从集合弹出，集合元素个数改变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure>

<p>用户点击抽奖按钮，参数抽奖，将用户编号放入集合，然后抽奖，分别抽一等奖、二等奖，如果已经抽中一等奖的用户不能参数抽二等奖则使用<code>spop</code>，反之使用<code>srandmember</code>。</p>
<h3 id="五-有序集合"><a href="#五-有序集合" class="headerlink" title="五 有序集合"></a><strong>五 有序集合</strong></h3><p>有序集合和集合一样，不能有重复元素。但是可以排序，它给每个元素设置一个score作为排序的依据。最多可以存储<code>2^32-1</code>个元素。</p>
<h4 id="5-1-内部编码"><a href="#5-1-内部编码" class="headerlink" title="5.1 内部编码"></a><strong>5.1 内部编码</strong></h4><p>有序集合类型的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当有序集合的元素个数小于<code>list-max-ziplist-entries</code>配置（默认128个）同时所有值都小于<code>list-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，更加节省内存。</li>
<li>skiplist（跳跃表）：当不满足ziplist的要求时，会使用skiplist。</li>
</ul>
<h4 id="5-2-使用场景"><a href="#5-2-使用场景" class="headerlink" title="5.2 使用场景"></a><strong>5.2 使用场景</strong></h4><h5 id="5-2-1-排行榜"><a href="#5-2-1-排行榜" class="headerlink" title="5.2.1 排行榜"></a>5.2.1 排行榜</h5><p>用户发布了n篇文章，其他人看到文章后给喜欢的文章点赞，使用score来记录点赞数，有序集合会根据score排行。流程如下</p>
<p>用户发布一篇文章，初始点赞数为0，即score为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd user:article 0 a</span><br></pre></td></tr></table></figure>

<p>有人给文章a点赞，递增<code>1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zincrby user:article 1 a</span><br></pre></td></tr></table></figure>

<p>查询点赞前三篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrevrangebyscore user:article 0 2</span><br></pre></td></tr></table></figure>

<p>查询点赞后三篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrangebyscore user:article 0 2</span><br></pre></td></tr></table></figure>

<h5 id="5-2-2-延迟消息队列"><a href="#5-2-2-延迟消息队列" class="headerlink" title="5.2.2 延迟消息队列"></a>5.2.2 延迟消息队列</h5><p>下单系统，下单后需要在15分钟内进行支付，如果15分钟未支付则自动取消订单。将下单后的十五分钟后时间作为score，订单作为value存入redis，消费者轮询去消费，如果消费的大于等于这笔记录的score，则将这笔记录移除队列，取消订单。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>在开发中，字符串类型是用的最多的数据类型，导致我们忽视了redis的其他四种数据类型，在具体场景下选择具体的数据类型对提升redis性能有非常大的帮助。redis虽然支持消息队列的实现，但是并不支持ack。所以redis实现的消息队列不能保证消息的可靠性，除非自己实现消息确认机制，不过这非常麻烦，所以如果是重要的消息还是推荐使用专门的消息队列去做，如RabbitMQ、RocketMQ。</p>
<hr>
<p>参考链接：<a href="https://mp.weixin.qq.com/s/FsL-54ALoNUAPcft-u8Leg?v_p=86&WBAPIAnalysisOriUICodes=10000001_10000002&launchid=10000365--x&wm=3333_2001&aid=01A0GdQv0UejmN65Ntcd4pBeamMWOPan5tHaY8rK5tZGJgPOs.&from=10AA393010" target="_blank" rel="noopener">Redis 五大数据类型使用场景</a>  </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Redis使用场景</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis修炼之数据类型</title>
    <url>/2020/11/12/redis-data-types/</url>
    <content><![CDATA[<blockquote>
<p>一、Redis 数据类型:</p>
</blockquote>
<p><strong>1、String（字符串）</strong><br>string 是 Redis 最基本的类型，理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>
<p><strong>2、Hash（哈希）</strong><br>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>
<a id="more"></a>

<p><strong>3、List（列表）</strong><br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>ps：可以使用List实现简单消息队列</p>
<p><strong>4、Set（集合）</strong><br>Redis 的 Set 是 string 类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
<p><strong>5、zset(sorted set：有序集合)</strong><br>Redis zset 和 set 一样也是string类型元素的集合，且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的，但分数(score)却可以重复。</p>
<blockquote>
<p>二、各个数据类型应用场景:</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>简介</th>
<th>特性</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>String(字符串)</td>
<td>二进制安全</td>
<td>可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512M</td>
<td>- - -</td>
</tr>
<tr>
<td>Hash(字典)</td>
<td>键值对集合，即编程语言中的Map类型</td>
<td>适合存储对象，并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>
<td>存储、读取、修改用户属性</td>
</tr>
<tr>
<td>List(列表)</td>
<td>链表(双向链表)</td>
<td>增删快，提供了操作某一段元素的API</td>
<td>1，最新消息排行等功能(比如朋友圈的时间线) 2，消息队列</td>
</tr>
<tr>
<td>Set(集合)</td>
<td>哈希表实现，元素不重复</td>
<td>1、添加、删除，查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td>
<td>1、共同好友 2、利用唯一性，统计访问网站的所有独立ip 3、好友推荐时，根据tag求交集，大于某个阈值就可以推荐</td>
</tr>
<tr>
<td>Sorted Set(有序集合)</td>
<td>将Set中的元素增加一个权重参数score，元素按score有序排列</td>
<td>数据插入集合时，已经进行天然排序</td>
<td>1、排行榜 2、带权重的消息队列</td>
</tr>
</tbody></table>
<blockquote>
<p>三、注意:</p>
</blockquote>
<p>&emsp;&emsp;Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p>
<p>&emsp;&emsp;Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p>
<p>&emsp;&emsp;每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">redis [1] &gt; GET foo</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;然而这些以数字命名的数据库又与我们理解的数据库有所区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内在只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p>
<hr>
<p>参考链接：<a href="https://www.runoob.com/redis/redis-data-types.html" target="_blank" rel="noopener">菜鸟教程——Redis数据类型</a>  </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中构建MySql连接池</title>
    <url>/2020/11/09/python-mysql-pool/</url>
    <content><![CDATA[<blockquote>
<p><b>背景：为何要使用连接池</b></p>
</blockquote>
<p>数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。</p>
<a id="more"></a>

<blockquote>
<p><b>连接池的概念</b></p>
</blockquote>
<p>数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对连接池中的连接进行申请，使用，释放。<br>创建数据库连接池是一个很耗时的操作，也容易对数据库造成安全隐患。所以，在程序初始化的时候，集中创建多个数据库连接池，并把他们集中管理，供程序使用，可以保证较快的数据库读写速度，还更加的安全可靠。</p>
<blockquote>
<p><b>影响因素</b></p>
</blockquote>
<p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数制约。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：</p>
<ul>
<li>最小连接数：<br>是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。</li>
<li>最大连接数：<br>是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</li>
<li>最小连接数与最大连接数差距：<br>最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。</li>
</ul>
<blockquote>
<p><b>python实现</b></p>
</blockquote>
<p>使用 python 模块 <kbd style="color:#ff7600">DBUtils</kbd> 来实现</p>
<ul>
<li>mincached: 最小空闲连接数</li>
<li>maxcached: 最大空闲连接数</li>
<li>maxconnections: 最大允许连接数</li>
</ul>
<p><strong><em>数据库配置config.py:</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File  :config.py</span></span><br><span class="line"><span class="string">@Author:Sapphire</span></span><br><span class="line"><span class="string">@Date  :2020/11/9 15:06</span></span><br><span class="line"><span class="string">@Desc  :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">DBHOST = <span class="string">"localhost"</span></span><br><span class="line">DBPORT = <span class="number">3306</span></span><br><span class="line">DBUSER = <span class="string">"root"</span></span><br><span class="line">DBPWD = <span class="string">"xxxxx"</span></span><br><span class="line">DBNAME = <span class="string">"xxxxx"</span></span><br><span class="line">DBCHAR = <span class="string">"utf8"</span></span><br></pre></td></tr></table></figure>

<p><strong><em>连接池实现，与实现mysql查询、插入、更新、删除数据，及事务等功能：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File  :mysql_pool.py</span></span><br><span class="line"><span class="string">@Author:Sapphire</span></span><br><span class="line"><span class="string">@Date  :2020/11/9 15:02</span></span><br><span class="line"><span class="string">@Desc  :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1、执行带参数的SQL时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</span></span><br><span class="line"><span class="string">２、在格式SQL中不需要使用引号指定数据类型，系统会根据输入参数自动识别</span></span><br><span class="line"><span class="string">３、在输入的值中不需要使用转意函数，系统会自动处理</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> MySQLdb.cursors <span class="keyword">import</span> DictCursor</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="comment"># from PooledDB import PooledDB</span></span><br><span class="line"><span class="keyword">import</span> mysql_pool.config <span class="keyword">as</span> Config</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> home_application.models <span class="keyword">import</span> AlarmDBConfig</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class="line"><span class="string">    释放连接对象：conn.close()或del conn</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 连接池对象</span></span><br><span class="line">    __pool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class="line">        self._conn = Mysql.__getConn()</span><br><span class="line">        self._cursor = self._conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getConn</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class="line"><span class="string">        @return MySQLdb.connection</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> Mysql.__pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            __pool = PooledDB(creator=MySQLdb, mincached=<span class="number">1</span>, maxcached=<span class="number">20</span>,</span><br><span class="line">                              host=Config.DBHOST, port=Config.DBPORT,</span><br><span class="line">                              user=Config.DBUSER,</span><br><span class="line">                              passwd=Config.DBPWD, db=Config.DBNAME, use_unicode=<span class="literal">False</span>,</span><br><span class="line">                              charset=Config.DBCHAR, cursorclass=DictCursor)</span><br><span class="line">        <span class="keyword">return</span> __pool.connection()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAll</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出所有结果集</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchall()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出第一条</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchone()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMany</span><span class="params">(self, sql, num, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出num条结果</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param num:取得的结果条数</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchmany(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertOne</span><span class="params">(self, sql, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 向数据表插入一条记录</span></span><br><span class="line"><span class="string">        @param sql:要插入的SQL格式</span></span><br><span class="line"><span class="string">        @param value:要插入的记录数据tuple/list</span></span><br><span class="line"><span class="string">        @return: insertId 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cursor.execute(sql, value)</span><br><span class="line">        <span class="keyword">return</span> self.__getInsertId()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertMany</span><span class="params">(self, sql, values)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 向数据表插入多条记录</span></span><br><span class="line"><span class="string">        @param sql:要插入的SQL格式</span></span><br><span class="line"><span class="string">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = self._cursor.executemany(sql, values)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getInsertId</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取当前连接最后一次插入操作生成的id,如果没有则为０</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cursor.execute(<span class="string">"SELECT @@IDENTITY AS id"</span>)</span><br><span class="line">        result = self._cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>][<span class="string">'id'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__query</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 更新数据表记录</span></span><br><span class="line"><span class="string">        @param sql: SQL格式及条件，使用(%s,%s)</span></span><br><span class="line"><span class="string">        @param param: 要更新的  值 tuple/list</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__query(sql, param)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 删除数据表记录</span></span><br><span class="line"><span class="string">        @param sql: SQL格式及条件，使用(%s,%s)</span></span><br><span class="line"><span class="string">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__query(sql, param)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 开启事务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._conn.autocommit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self, option=<span class="string">'commit'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 结束事务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> option == <span class="string">'commit'</span>:</span><br><span class="line">            self._conn.commit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._conn.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispose</span><span class="params">(self, isEnd=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 释放连接池资源</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isEnd == <span class="number">1</span>:</span><br><span class="line">            self.end(<span class="string">'commit'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.end(<span class="string">'rollback'</span>)</span><br><span class="line">        self._cursor.close()</span><br><span class="line">        self._conn.close()</span><br></pre></td></tr></table></figure>


<p><strong><em>连接池使用示例：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mysql = Mysql()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找数据</span></span><br><span class="line">    search_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    SELECT id, event FROM monitortb WHERE event in &#123;&#125; AND status = 'OP'</span></span><br><span class="line"><span class="string">    """</span>.format(<span class="string">"test"</span>)</span><br><span class="line">    search_result = mysql.getAll(search_sql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新数据</span></span><br><span class="line">    increase_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    UPDATE monitortb SET cnt = cnt + &#123;&#125; WHERE id = &#123;&#125;</span></span><br><span class="line"><span class="string">    """</span>.format([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    insert_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    INSERT INTO monitortb (</span></span><br><span class="line"><span class="string">    intype, innum, level, sysname, pl, clr, cnt, indate, event, status</span></span><br><span class="line"><span class="string">    ) VALUES (</span></span><br><span class="line"><span class="string">    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 需要插入的多条数据的列表 </span></span><br><span class="line">    insert_value_list = []</span><br><span class="line">    mysql.insertMany(insert_sql, insert_value_list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 断开连接池</span></span><br><span class="line">    mysql.dispose()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySql修炼</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
        <tag>数据库连接池</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2020/11/01/red-black-tree/</url>
    <content><![CDATA[<p>红黑树其实就是一种数据结构，设计它的目的就是为了高效地进行增删改查，我们可以从二叉查找树逐渐引入到红黑树：</p>
<h3 id="一、二叉查找树"><a href="#一、二叉查找树" class="headerlink" title="一、二叉查找树"></a>一、二叉查找树</h3><p>特性：<br>（1）左子树上所有结点的值均小于或等于它的根结点的值；<br>（2）右子树上所有结点的值均大于或等于它的根结点的值。</p>
<a id="more"></a>

<p>如果想要查找一个数：<br>在查找的时候，先与根节点比较，比根节点大则从右子树查找，比根节点小则从左子树查找，然后重复上面的过程，一直到找到我们需要的元素为止。<br>其实对于添加和删除，原理也是一样的，我们第一步就是找到我们需要插入的位置，然后把元素插入即可。</p>
<p>缺点：<br><strong><em>普通的二叉查找树在极端情况下可退化成链表，此时的增删查效率都会比较低下。</em></strong></p>
<p><img data-src="/picture/Binary_search_tree_2.png" alt="avatar"><br>例如，如果以9位根节点，当依次插入13、15、17、19后，就会发生“一边倒”的情况，二叉查找树的优势完全丧失了。<br>二叉搜索树退化成了链表，搜索的时间复杂度为 O(n)。<br>叉查找树在插入的时候变成了“一条腿”，也就是丧失了平衡，那我们干脆做出一点改进，使用平衡二叉树吧。</p>
<h3 id="二、平衡二叉树"><a href="#二、平衡二叉树" class="headerlink" title="二、平衡二叉树"></a>二、平衡二叉树</h3><p>平衡二叉树，也叫作AVL树，</p>
<p><img data-src="/picture/Balanced_binary_tree.png" alt="avatar"></p>
<p>与二叉查找树相比，拥有以下特性：<br>（1）从任何一个节点出发，左右子树深度之差的绝对值不超过1；<br>（2）左右子树仍然为平衡二叉树。</p>
<p>如果需要插入一个数：<br>如果该树破坏了平衡，则平衡二叉树相应地会发生左旋或者右旋，二叉树就重新回到了平衡。<br>最终会发现一个结论，那就是平衡二叉树在插入时最多只需要两次旋转就会重新恢复平衡。</p>
<p>平衡二叉树在查找时既有着二叉查找树的优越性，在插入时还能通过调整继续保持着。<br>那么为什么还要使用到红黑树呢？我觉得可以从以下两个方面来考虑：<br>（1）删除：对于平衡二叉树来说，在最坏情况下，需要维护从被删节点到根节点这条路径上所有节点的平衡性，旋转的量级是O(logN)。<br>但是红黑树就不一样了，最多只需3次旋转就会重新平衡，旋转的量级是O(1)。<br>（2）保持平衡：平衡二叉树高度平衡，这也就意味着在大量插入和删除节点的场景下，平衡二叉树为了保持平衡需要调整的频率会更高。</p>
<h3 id="三、红黑树"><a href="#三、红黑树" class="headerlink" title="三、红黑树"></a>三、红黑树</h3><p>红黑树是一种自平衡的二叉查找树，是一种高效的查找树；<br>红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作；<br>红黑树和名字一样，里面涉及到两种颜色：红色和黑色。</p>
<p><img data-src="/picture/red_black_tree.png" alt="avatar"></p>
<p><em><strong>如图可知，他有如下重要特征：</strong><br>（1）每个节点只有两种颜色：红色和黑色。<br>（2）根节点是黑色的。<br>（3）每个叶子节点（NIL）都是黑色的空节点。<br>（4）从根节点到叶子节点，不会出现两个连续的红色节点。<br>（5）从任何一个节点出发，到叶子节点，这条路径上都有相同数目的黑色节点。</em><br>这段关于 红黑树 的描述来源于<strong>《算法导论》</strong><br>这五条特征看起来真的很复杂，不过正是由于这些复杂的特征才保证了红黑树的良好特性</p>
<h3 id="四、使用场景："><a href="#四、使用场景：" class="headerlink" title="四、使用场景："></a>四、使用场景：</h3><p>1、java中的HashMap和TreeMap；<br>2、Linux内核中一个常见的数据结构。</p>
<hr>
<p>参考链接：<a href="https://www.zhihu.com/question/312327402/answer/1560653215" target="_blank" rel="noopener">红黑树详解</a>  </p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>B树与B+树</title>
    <url>/2020/10/17/B-B-tree/</url>
    <content><![CDATA[<h2 id="一、B树和B-树的区别"><a href="#一、B树和B-树的区别" class="headerlink" title="一、B树和B+树的区别"></a>一、B树和B+树的区别</h2><p>很明显，我们要想弄清楚原因就要知道B树和B+树的区别。为了不长篇大论。我们直接给出他们的形式总结他们的特点。</p>
<h3 id="1、B树"><a href="#1、B树" class="headerlink" title="1、B树"></a>1、B树</h3><p>B树是一种自平衡的搜索树，形式很简单：</p>
<a id="more"></a>

<p><img data-src="/picture/b_tree.png" alt="avatar"></p>
<p>这就是一颗B树。针对我们这个问题的最核心的特点如下：<br>（1）多路，非二叉树<br>（2）每个节点既保存索引，又保存数据<br>（3）搜索时相当于二分查找<br>在这里我们假定都已经了解了B树相关的结构。</p>
<h3 id="2、B-树"><a href="#2、B-树" class="headerlink" title="2、B+树"></a>2、B+树</h3><p>B+树是B-树的变种：</p>
<p><img data-src="/picture/b+_tree.png" alt="avatar"></p>
<p>最核心的特点如下：<br>（1）多路非二叉<br>（2）只有叶子节点保存数据<br>（3）搜索时相当于二分查找<br>（4）增加了相邻接点的指向指针。<br>从上面我们可以看出最核心的区别主要有俩，一个是数据的保存位置，一个是相邻节点的指向。<br>就是这俩造成了MongoDB和Mysql的差别。为什么呢？</p>
<h3 id="3、B树和B-树的区别"><a href="#3、B树和B-树的区别" class="headerlink" title="3、B树和B+树的区别"></a>3、B树和B+树的区别</h3><p>（1）B+树查询时间复杂度固定是logn，B树查询复杂度最好是 O(1)。<br>（2）B+树相邻接点的指针可以大大增加区间访问性，可使用在范围查询等，而B-树每个节点 key 和 data 在一起，则无法区间查找。<br>（3）B+树更适合外部存储，也就是磁盘存储。由于内节点无 data 域，每个节点能索引的范围更大更精确<br>（4）注意这个区别相当重要，是基于（1）（2）（3）的，B树每个节点即保存数据又保存索引，所以磁盘IO的次数很少，B+树只有叶子节点保存，磁盘IO多，但是区间访问比较好。</p>
<p>有了他们的区别之后，现在我们再来解释这个原因就好多了。</p>
<h2 id="二、原因解释"><a href="#二、原因解释" class="headerlink" title="二、原因解释"></a>二、原因解释</h2><p>想要解释原因，我们还必须要了解一下MongoDB和Mysql的基本概念。</p>
<h4 id="1、MongoDB"><a href="#1、MongoDB" class="headerlink" title="1、MongoDB"></a>1、MongoDB</h4><p>MongoDB 是文档型的数据库，是一种 nosql，它使用类 Json 格式保存数据。比如之前我们的表可能有用户表、订单表、购物篮表等等，还要建立他们之间的外键关联关系。<br>但是类Json就不一样了。我们可以看到这种形式更简单，通俗易懂。那为什么 MongoDB 使用B-树呢？</p>
<p>MongoDB使用B树，所有节点都有Data域，只要找到指定索引就可以进行访问，无疑单次查询平均快于Mysql。</p>
<h4 id="2、Mysql"><a href="#2、Mysql" class="headerlink" title="2、Mysql"></a>2、Mysql</h4><p>Mysql作为一个关系型数据库，数据的关联性是非常强的，区间访问是常见的一种情况，B+树由于数据全部存储在叶子节点，并且通过指针串在一起，这样就很容易的进行区间遍历甚至全部遍历。</p>
<hr>
<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/102628897" target="_blank" rel="noopener">为什么 MongoDB 索引选择B树，而 Mysql 选择B+树</a>  </p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>B树与B+树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware vSphere 之 vCenter 指标采集</title>
    <url>/2020/10/09/vmware-vsphere/</url>
    <content><![CDATA[<blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></blockquote>
<p>VMware vSphere 是 VMware 的虚拟化平台，可将数据中心转换为包括 CPU、存储和网络资源的聚合计算基础架构。vSphere 将这些基础架构作为一个统一的运行环境进行管理，并提供工具来管理加入该环境的数据中心。</p>
<p>在对接或采集VMware vSphere虚拟化平台的场景中，比如配置八爪鱼，需要对其中的虚拟化数据中心、虚拟化集群、物理机、虚拟机、存储等指标进行多方位的采集，我们根据VMware提供的相应sdk接口，对接到蓝鲸的SaaS中。</p>
<a id="more"></a>
<blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3></blockquote>
<h3 id="一-vSphere的模型结构"><a href="#一-vSphere的模型结构" class="headerlink" title="一   vSphere的模型结构"></a>一   vSphere的模型结构</h3><h4 id="1-1-模型及关联关系"><a href="#1-1-模型及关联关系" class="headerlink" title="1.1    模型及关联关系"></a>1.1    模型及关联关系</h4><h5 id="1-1-1-名词解释"><a href="#1-1-1-名词解释" class="headerlink" title="1.1.1   名词解释"></a>1.1.1   名词解释</h5><p>VCenter: 虚拟机管理中心，</p>
<p>DCenter: 虚拟化数据中心，</p>
<p>Cluster: 虚拟化集群</p>
<p>Server: 物理机</p>
<p>Virtual: 虚拟机</p>
<p>Storage: 存储</p>
<h5 id="1-1-2-从属关系"><a href="#1-1-2-从属关系" class="headerlink" title="1.1.2   从属关系"></a>1.1.2   从属关系</h5><p>从属关系: VCenter =&gt; DCenter =&gt; Cluster =&gt; Server =&gt; Virtual &amp; Storage</p>
<h5 id="1-1-3-指标采集"><a href="#1-1-3-指标采集" class="headerlink" title="1.1.3   指标采集"></a>1.1.3   指标采集</h5><p>以上是最常见、最标准的多级结构，管理平台到数据中心，到集群，再到物理机，物理机包含虚拟机和存储单元。但是这并不是固定的，某些情况，我们也可以直接把物理机挂载在数据中心DCenter中，而存储也可以直接关联到集群，这就导致了我们采集各项指标的时候，事先并不知道客户环境是否按照标准化的结构来构建VCenter，关联关系也各不相同，导致采集到的数据与CMDB模型和关联关系不适配。这些问题需要调研的时候确定环境的VCenter结构，并且CMDB建模时与之适配，这才能使得数据采集上报工作正常开展。</p>
<h3 id="二-vSphere采集"><a href="#二-vSphere采集" class="headerlink" title="二   vSphere采集"></a>二   vSphere采集</h3><h4 id="2-1-对接vSphere"><a href="#2-1-对接vSphere" class="headerlink" title="2.1    对接vSphere"></a>2.1    对接vSphere</h4><h5 id="2-1-1-使用VMware官方sdk"><a href="#2-1-1-使用VMware官方sdk" class="headerlink" title="2.1.1   使用VMware官方sdk"></a>2.1.1   使用VMware官方sdk</h5><p>VMware官方提供了多种多种sdk，由于我们使用Django开发SaaS，直接使用pip安装依赖即可，版本号由vSphere版本确定，现最新版为7.0，6.x是最常见的版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyvmomi==6.5</span><br></pre></td></tr></table></figure>



<h5 id="2-1-2-连接vSphere"><a href="#2-1-2-连接vSphere" class="headerlink" title="2.1.2   连接vSphere"></a>2.1.2   连接vSphere</h5><p>采集之前，我们需要提供vSphere的地址，ip或者有DNS的域名都可以，以及需要vSphere的管理员账号和密码，账号通常为<a href="mailto:administrator@vsphere.local">administrator@vsphere.local</a>。有了以上信息后，我们通过ssl模块连接到vSphere，具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_vc</span><span class="params">(vcserver)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1) </span><br><span class="line">        context.verify_mode = ssl.CERT_NONE  </span><br><span class="line">        si = SmartConnect(host=vcserver[<span class="string">"ip"</span>], user=vcserver[<span class="string">"user"</span>], pwd=vcserver[<span class="string">"password"</span>], port=<span class="number">443</span>, sslContext=context)  </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        context = ssl._create_unverified_context()  </span><br><span class="line">        context.verify_mode = ssl.CERT_NONE  </span><br><span class="line">        si = SmartConnect(host=vcserver[<span class="string">"ip"</span>], user=vcserver[<span class="string">"user"</span>], pwd=vcserver[<span class="string">"password"</span>], port=<span class="number">443</span>, sslContext=context)  </span><br><span class="line">    <span class="keyword">return</span> si.RetrieveContent()</span><br></pre></td></tr></table></figure>



<h4 id="2-2-采集模型指标"><a href="#2-2-采集模型指标" class="headerlink" title="2.2    采集模型指标"></a>2.2    采集模型指标</h4><p>由于vSphere是层级结构，我们想要采集某一层的指标，就需要从上往下逐层采集，开发时，我们需要引入vSphere的sdk。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect </span><br><span class="line"><span class="keyword">from</span> pyVmomi <span class="keyword">import</span> vim, vmodl</span><br></pre></td></tr></table></figure>



<h5 id="2-2-1-VCenter"><a href="#2-2-1-VCenter" class="headerlink" title="2.2.1   VCenter"></a>2.2.1   VCenter</h5><p>VCenter是关联关系最上的一层结构，获取VCenter的信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vc_info</span><span class="params">(content)</span>:</span> </span><br><span class="line">    <span class="string">"""获取VC服务器配置信"""</span> </span><br><span class="line">    hostname = content.setting.QueryOptions(<span class="string">"VirtualCenter.FQDN"</span>)[<span class="number">0</span>].value </span><br><span class="line">    ver = content.about.version </span><br><span class="line">    licensesinfo = [&#123;<span class="string">"name"</span>: l.name, <span class="string">"license"</span>: l.licenseKey, <span class="string">"costUnit"</span>: l.costUnit,  <span class="string">"total"</span>: l.total <span class="keyword">if</span> l.total != <span class="number">0</span> <span class="keyword">else</span> <span class="string">"Unlimited"</span>, <span class="string">"used"</span>: l.used&#125; <span class="keyword">for</span> l <span class="keyword">in</span> content.licenseManager.licenses] </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"hostname"</span>: hostname, <span class="string">"version"</span>: ver, <span class="string">"licensesinfo"</span>: licensesinfo&#125;</span><br></pre></td></tr></table></figure>

<p>如上，使用connect_vc连接vSphere返回的content作为参数，实例代码中展示了采集版本和licenses的信息，更多的参数如日志的等级、日志文件大小及数据库信息等，可以自行添加，不做展示。而想要采集该VCenter下有多少DCenter，则需要往下继续采集统计。</p>
<h5 id="2-2-2-DCenter"><a href="#2-2-2-DCenter" class="headerlink" title="2.2.2   DCenter"></a>2.2.2   DCenter</h5><p>同上，由于一个vSphere只有一个VCenter，所以我们可以直接采集到所有DCenter，不需要额外的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dcenter</span><span class="params">(self)</span>:</span></span><br><span class="line">    container = self.connect.viewManager.CreateContainerView(self.connect.rootFolder, [vim.Datacenter], <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> dcenter <span class="keyword">in</span> container.view:</span><br><span class="line">        dcenter_name = dcenter.name</span><br><span class="line">        dcenter_moid = dcenter._moId</span><br><span class="line">    <span class="keyword">return</span> dcenter_moid</span><br></pre></td></tr></table></figure>

<p>self.connect为连接成功vSphere后返回的content，这样我们就采集到了DCenter的名称及moid（唯一标识），同理，需要额外参数可自行添加，官方文档有详细指标说明。</p>
<h5 id="2-2-3-Cluster"><a href="#2-2-3-Cluster" class="headerlink" title="2.2.3   Cluster"></a>2.2.3   Cluster</h5><p>Cluster集群是属于DCenter数据中心下的结构，所以我们需要通过数据中心的moid来获取对应集群信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster</span><span class="params">(self, dcenter_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> dcenter_data <span class="keyword">in</span> dcenter_list:</span><br><span class="line">        moId = dcenter_data[<span class="string">"detail"</span>][<span class="string">"moId"</span>]</span><br><span class="line">        com_info = vm_helper.get_obj_bymoId(self.connect, [vim.Datacenter], moId)</span><br><span class="line">        container = self.connect.viewManager.CreateContainerView(com_info.hostFolder, [vim.ComputeResource], <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> cluster <span class="keyword">in</span> container.view:</span><br><span class="line">            cluster_moid = cluster._moId</span><br><span class="line">            get_cluster_resource(content, cluster_moid)</span><br></pre></td></tr></table></figure>

<p>以上代码通过DCenter的moid获取了属于它的全部Cluster信息，我们使用cluster._moId，便可采集到集群的多项指标，也是最常见的需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster_resource</span><span class="params">(self, content, cluster_moId)</span>:</span></span><br><span class="line">    <span class="string">"""获取群集资源概况"""</span></span><br><span class="line">    cluster = get_obj_bymoId(content, [vim.ClusterComputeResource], cluster_moId)</span><br><span class="line">    summary = cluster.summary</span><br><span class="line">    totalCpuMhz = summary.totalCpu</span><br><span class="line">    totalMemMB = summary.totalMemory</span><br><span class="line">    capacity_list = []</span><br><span class="line">    freeSpace_list = []</span><br><span class="line">    <span class="keyword">for</span> datastore <span class="keyword">in</span> cluster.datastore:</span><br><span class="line">        capacity_list.append(datastore.summary.capacity)</span><br><span class="line">        freeSpace_list.append(datastore.summary.freeSpace)</span><br><span class="line">    totalDiskTB = <span class="string">"%.3f"</span> % (float(sum(capacity_list)) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">    DiskUsedTB = <span class="string">"%.3f"</span> % (float(sum(capacity_list) - sum(freeSpace_list)) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">    resource_quickstats = cluster.resourcePool.summary.quickStats</span><br><span class="line">    cpuUsedMhz = resource_quickstats.overallCpuUsage</span><br><span class="line">    memUsedMB = resource_quickstats.hostMemoryUsage</span><br><span class="line">    <span class="keyword">return</span> cluster</span><br></pre></td></tr></table></figure>

<p>以上代码中，我演示了如何获取集群CPU、内存、磁盘的一些指标，包括总容量和已使用量等，同理，如需更多指标，参照官方文档的字段说明。</p>
<h5 id="2-2-4-Server"><a href="#2-2-4-Server" class="headerlink" title="2.2.4   Server"></a>2.2.4   Server</h5><p>物理机是隶属于集群下的，只需提供集群的moid，便可获取物理机列表，物理机各项指标通过对应物理机的moid获取，参照官方文档字段说明，不多赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_server</span><span class="params">(self, cluster_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> cluster_data <span class="keyword">in</span> cluster_list:</span><br><span class="line">        moId = cluster_data[<span class="string">"detail"</span>][<span class="string">"moId"</span>]</span><br><span class="line">        com_info = vm_helper.get_obj_bymoId(self.connect, [vim.ComputeResource], moId)</span><br><span class="line">        <span class="keyword">for</span> server <span class="keyword">in</span> com_info.host:</span><br><span class="line">            server_name = server.name</span><br><span class="line">            server_moid = server._moId</span><br></pre></td></tr></table></figure>



<h5 id="2-2-5-Virtual-amp-Storage"><a href="#2-2-5-Virtual-amp-Storage" class="headerlink" title="2.2.5   Virtual &amp; Storage"></a>2.2.5   Virtual &amp; Storage</h5><p>虚拟机和存储是挂载在物理机下的，采集方法相同，以下只列出虚拟机的采集方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vm</span><span class="params">(self, server)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> server.vm:</span><br><span class="line">        <span class="keyword">if</span> vm.summary.guest.ipAddress:</span><br><span class="line">            vm_ip = vm.summary.guest.ipAddress</span><br><span class="line">            vm_name = vm.name</span><br><span class="line">            vm_moid = vm.moid</span><br></pre></td></tr></table></figure>

<p>这样就可以采集到虚拟机的ip和名称，适用moid可以同集群一般，采集更多指标。</p>
<h3 id="三-个人总结"><a href="#三-个人总结" class="headerlink" title="三   个人总结"></a>三   个人总结</h3><h4 id="3-1-适用场景分析"><a href="#3-1-适用场景分析" class="headerlink" title="3.1    适用场景分析"></a>3.1    适用场景分析</h4><p>在大多情况下，以上vSphere采集是获取vSphere资产全貌的手段，不推荐作为监控的手段，尤其是在庞大体量的VCenter中，循环且频繁地调用sdk不是长久的方法，或许会对本身产生未知影响。vSphere采集适用的场景为：适用配置八爪鱼获取VCenter下所有层级的实例数据和关联关系，然后录入CMDB，主要为虚拟机的IP，通过IP安装可监控指标的Agent，实现对物理机、虚拟机和存储的指标和健康度。</p>
<hr>
<p>更多指标采集参考官方文档：</p>
<p><a href="https://vdc-download.vmware.com/vmwb-repository/dcr-public/6b586ed2-655c-49d9-9029-bc416323cb22/fa0b429a-a695-4c11-b7d2-2cbc284049dc/doc/index-methods.html" target="_blank" rel="noopener">https://vdc-download.vmware.com/vmwb-repository/dcr-public/6b586ed2-655c-49d9-9029-bc416323cb22/fa0b429a-a695-4c11-b7d2-2cbc284049dc/doc/index-methods.html</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>VMware vSphere</tag>
        <tag>vCenter</tag>
        <tag>虚拟化</tag>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次持续到凌晨两点半的coding</title>
    <url>/2020/09/26/2020-09-26/</url>
    <content><![CDATA[<p><strong>二叉搜索树的后序遍历序列</strong></p>
<p><strong>题干</strong>：<br>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。<br>如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<a id="more"></a>

<p><strong>解题思路</strong>：<br>1、后续遍历的最后一个节点是根节点<br>2、BST(二叉搜索树)特性：<br>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值<br>3、综上，除去末尾根节点，BST的后续遍历中，前面一部分都小于根节点的数是左子树，后一部分都大于根节点的是右子树。<br>不符合则判断不是BST的后序遍历。<br>然后递归剩下的左右子树，直到所有子树都满足以上条件，才判断是BST的后序遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    todo 优化：子树序列长度只需 &lt;= 2，则该子树满足BST的后续遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">VerifySquenceOfBST</span><span class="params">(self, sequence)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sequence:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        root = sequence.pop()</span><br><span class="line">        left = []</span><br><span class="line">        right = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sequence) + <span class="number">1</span>):</span><br><span class="line">            tmp_list = copy.deepcopy(sequence)</span><br><span class="line">            tmp_list.insert(i, root)</span><br><span class="line">            left = tmp_list[:i + <span class="number">1</span>]</span><br><span class="line">            right = tmp_list[i:]</span><br><span class="line">            <span class="keyword">if</span> max(left) &lt;= root &lt;= min(right):</span><br><span class="line">                left.pop()</span><br><span class="line">                right.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(right) &lt;= <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        result_left = self.VerifySquenceOfBST(left) <span class="keyword">if</span> left <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">        result_right = self.VerifySquenceOfBST(right) <span class="keyword">if</span> right <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> result_left <span class="keyword">and</span> result_right</span><br></pre></td></tr></table></figure>
<p>测试用例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">back_list = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">10</span>]</span><br><span class="line">solution = Solution()</span><br><span class="line">print(solution.VerifySquenceOfBST(back_list))</span><br></pre></td></tr></table></figure>

<hr>
<p>原题链接：<a href="https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&&tqId=11176&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二叉搜索树的后序遍历序列</a>  </p>
]]></content>
      <categories>
        <category>算法修炼</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>剑指offer</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>企业(政务)微信浏览器的前端开发兼容问题</title>
    <url>/2020/08/20/weixin-app/</url>
    <content><![CDATA[<p><strong>windows版本的企业（政务）微信浏览器基于Chromium 53版本，对ES7某些新特性不兼容</strong></p>
<img data-src="/2020/08/20/weixin-app/weixin_browser.png" class>
<a id="more"></a>

<h3 id="1、不支持Async-Await异步函数"><a href="#1、不支持Async-Await异步函数" class="headerlink" title="1、不支持Async/Await异步函数"></a>1、不支持Async/Await异步函数</h3><p>官方的方法兼容文档：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a> </p>
<img data-src="/2020/08/20/weixin-app/browser_compatibility.png" class>

<h3 id="2、不支持Axios的promise-prototype-finally方法："><a href="#2、不支持Axios的promise-prototype-finally方法：" class="headerlink" title="2、不支持Axios的promise.prototype.finally方法："></a>2、不支持Axios的promise.prototype.finally方法：</h3><img data-src="/2020/08/20/weixin-app/weixin_error.png" class>

<p>解决办法：通过main.js引入依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i promise.prototype.finally</span><br><span class="line">require(&#39;promise.prototype.finally&#39;).shim();</span><br></pre></td></tr></table></figure>

<h3 id="3、本地安装模拟企业（政务）微信内置Chromium-53版本："><a href="#3、本地安装模拟企业（政务）微信内置Chromium-53版本：" class="headerlink" title="3、本地安装模拟企业（政务）微信内置Chromium 53版本："></a>3、本地安装模拟企业（政务）微信内置Chromium 53版本：</h3><h4 id="3-1、下载附件的安装包（Chromium-53版本）"><a href="#3-1、下载附件的安装包（Chromium-53版本）" class="headerlink" title="3.1、下载附件的安装包（Chromium 53版本）"></a>3.1、下载附件的安装包（Chromium 53版本）</h4><p><a href="https://file.tapd.cn/51310665/attachments/download/1151310665001000266/wiki" target="_blank" rel="noopener">点此下载</a>  </p>
<h4 id="3-2、右键解压成Chrome-7z，继续解压成Chrome-bin文件夹"><a href="#3-2、右键解压成Chrome-7z，继续解压成Chrome-bin文件夹" class="headerlink" title="3.2、右键解压成Chrome.7z，继续解压成Chrome-bin文件夹"></a>3.2、右键解压成Chrome.7z，继续解压成Chrome-bin文件夹</h4><img data-src="/2020/08/20/weixin-app/download_file.png" class>

<h4 id="3-3、直接执行Chrome-bin-chrome-exe会跳转到本地最新版的chrome。"><a href="#3-3、直接执行Chrome-bin-chrome-exe会跳转到本地最新版的chrome。" class="headerlink" title="3.3、直接执行Chrome-bin / chrome.exe会跳转到本地最新版的chrome。"></a>3.3、直接执行Chrome-bin / chrome.exe会跳转到本地最新版的chrome。</h4><p>在此目录下编写脚本start.bat，点击脚本即可打开Chromium 53：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start &quot;&quot; &quot;.&#x2F;chrome.exe&quot;  &quot; --user-data-dir&#x3D;User Data&quot;</span><br></pre></td></tr></table></figure>

<img data-src="/2020/08/20/weixin-app/file_setting.png" class>]]></content>
      <categories>
        <category>前端开发指南</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>微信轻应用</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 - Zabbix</title>
    <url>/2020/07/02/zabbix-summary/</url>
    <content><![CDATA[<h1 id="Zabbix-介绍"><a href="#Zabbix-介绍" class="headerlink" title="Zabbix 介绍"></a>Zabbix 介绍</h1><ul>
<li>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</li>
<li>Zabbix 是一个企业级分布式开源监控解决方案。</li>
<li>Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</li>
<li>Zabbix 支持主动轮询（polling）和被动捕获（trapping）。Zabbix所有的报表、统计数据和配置参数都可以通过基于 Web 的前端页面进行访问。基于 Web 的前端页面确保您可以在任何地方访问您监控的网络状态和服务器健康状况。适当的配置后，Zabbix 可以在监控 IT 基础设施方面发挥重要作用。无论是对于有少量服务器的小型组织，还是拥有大量服务器的大企业而言，同样适用。</li>
<li>Zabbix 是免费的。Zabbix 是根据 GPL 通用公共许可证的第二版编写和发布的。这意味着产品源代码是免费发布的，可供公共使用。</li>
</ul>
<a id="more"></a>

<h1 id="Zabbix-功能"><a href="#Zabbix-功能" class="headerlink" title="Zabbix 功能"></a>Zabbix 功能</h1><p>Zabbix 是一个高度成熟完善的网络监控解决方案，一个的软件包中包含了多种功能。</p>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/items" target="_blank" rel="noopener">数据采集</a></strong></p>
<ul>
<li>可用性和性能检查；</li>
<li>支持 SNMP（包括主动轮询和被动捕获）、IPMI、JMX、VMware 监控；</li>
<li>自定义检查；</li>
<li>按照自定义的时间间隔采集需要的数据；</li>
<li>通过 Server/Proxy 和 Agents 来执行数据采集。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/triggers" target="_blank" rel="noopener">灵活的阈值定义</a></strong></p>
<ul>
<li>您可以参考后端数据库定义非常灵活的告警阈值，即触发器</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/notifications" target="_blank" rel="noopener">高度可配置化的告警</a></strong></p>
<ul>
<li>可以根据递增计划、接收者、媒介类型自定义发送告警通知；</li>
<li>使用宏变量可以使告警通知变得更加高效有用；</li>
<li>自动操作包含远程执行命令。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/visualisation/graphs/simple" target="_blank" rel="noopener">实时图形</a></strong></p>
<ul>
<li>使用内置图形功能可以将监控项实时绘制成图形。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/web_monitoring" target="_blank" rel="noopener">Web 监控功能</a></strong></p>
<ul>
<li>Zabbix可以追踪模拟鼠标在 Web 网站上的点击操作，来检查 Web 网站的功能和响应时间。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/visualisation" target="_blank" rel="noopener">丰富的可视化选项</a></strong></p>
<ul>
<li>可以组合多个监控项到单个视图中，创建自定义图表；</li>
<li>网络拓扑图；</li>
<li>以仪表盘样式展示自定义聚合图形和幻灯片演示；</li>
<li>报表；</li>
<li>监控资源的更高层次展示视图（业务视图）。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/installation/requirements#database_size" target="_blank" rel="noopener">历史数据存储</a></strong></p>
<ul>
<li>存储在数据库中的数据；</li>
<li>历史配置；</li>
<li>内置数据管理机制（housekeeping）。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/hosts" target="_blank" rel="noopener">配置简单</a></strong></p>
<ul>
<li>将被监控设备添加为主机；</li>
<li>主机一旦添加到数据库中，就会采集数据用于监控；</li>
<li>将模板用于监控设备。</li>
</ul>
<p><strong>使用<a href="https://www.zabbix.com/documentation/4.0/manual/config/templates" target="_blank" rel="noopener">模板</a></strong></p>
<ul>
<li>模板中分组检查；</li>
<li>模板可以关联模板，继承已关联模板的属性。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/discovery" target="_blank" rel="noopener">网络发现</a></strong></p>
<ul>
<li>自动发现网络设备；</li>
<li>Zabbix Agent 发现设备后自动注册；</li>
<li>自动发现文件系统、网络接口和 SNMP OIDs 值。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/web_interface" target="_blank" rel="noopener">快捷的 Web 界面</a></strong></p>
<ul>
<li>基于 PHP 的 Web 前端；</li>
<li>可以从任何地方访问；</li>
<li>您可以定制自己的操作方式；</li>
<li>您可以通过审计日志来查看你的操作。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/api" target="_blank" rel="noopener">Zabbix API</a></strong></p>
<ul>
<li>Zabbix API 为 Zabbix 提供可编程接口，用于批量操作、第三方软件集成和其他用途。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/config/users_and_usergroups" target="_blank" rel="noopener">权限管理系统</a></strong></p>
<ul>
<li>安全的用户身份验证；</li>
<li>指定的用户只能查看指定的权限范围内的视图。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/agent" target="_blank" rel="noopener">功能强大且易于扩展的 Zabbix Agent</a></strong></p>
<ul>
<li>部署于被监控对象上；</li>
<li>支持 Linux 和 Windows ；</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/server" target="_blank" rel="noopener">二进制守护进程</a></strong></p>
<ul>
<li>为了更好的性能和更少的内存占用，采用 C 语言编写；</li>
<li>便于移植。</li>
</ul>
<p><strong><a href="https://www.zabbix.com/documentation/4.0/manual/distributed_monitoring" target="_blank" rel="noopener">适应更复杂的环境</a></strong></p>
<ul>
<li>使用 Zabbix Proxy 代理，可以轻松实现分布式远程监控。</li>
</ul>
<h1 id="Zabbix-概述"><a href="#Zabbix-概述" class="headerlink" title="Zabbix 概述"></a>Zabbix 概述</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Zabbix 由几个主要的功能组件组成，其功能介绍如下所示。</p>
<h3 id="SERVER"><a href="#SERVER" class="headerlink" title="SERVER"></a>SERVER</h3><p><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/server" target="_blank" rel="noopener">Zabbix server</a> 是 Zabbix软件的核心组件，agent 向其报告可用性、系统完整性信息和统计信息。server也是存储所有配置信息、统计信息和操作信息的核心存储库。</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>所有配置信息以及 Zabbix 采集到的数据都被存储在数据库中。</p>
<h3 id="WEB-界面"><a href="#WEB-界面" class="headerlink" title="WEB 界面"></a>WEB 界面</h3><p>为了从任何地方和任何平台轻松访问 Zabbix ，我们提供了基于 web 的界面。该界面是 Zabbix server 的一部分，通常（但不一定）和 Zabbix server 运行在同一台物理机器上。</p>
<h3 id="PROXY"><a href="#PROXY" class="headerlink" title="PROXY"></a>PROXY</h3><p><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/proxy" target="_blank" rel="noopener">Zabbix proxy</a> 可以代替 Zabbix server采集性能和可用性数据。Zabbix proxy在Zabbix的部署是可选部分；但是proxy的部署可以很好的分担单个Zabbix server的负载。</p>
<h3 id="AGENT"><a href="#AGENT" class="headerlink" title="AGENT"></a>AGENT</h3><p><a href="https://www.zabbix.com/documentation/4.0/manual/concepts/agent" target="_blank" rel="noopener">Zabbix agents</a> 部署在被监控目标上，用于主动监控本地资源和应用程序，并将收集的数据发送给 Zabbix server。</p>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>另外，回过头来整体的了解下 Zabbix 内部的数据流对Zabbix的使用也很重要。首先，为了创建一个采集数据的监控项，您就必须先创建主机。其次，在任务的另外一端，必须要有监控项才能创建触发器（trigger），必须要有触发器来创建动作（action）。因此，如果您想要收到类似“X个server上CPU负载过高”这样的告警，您必须首先为 <em>Server X</em> 创建一个主机条目，其次创建一个用于监控其 CPU的监控项，最后创建一个触发器，用来触发 CPU负载过高这个动作，并将其发送到您的邮箱里。虽然这些步骤看起来很繁琐，但是使用模板的话，实际操作非常简单。也正是由于这种设计，使得 Zabbix 的配置变得更加灵活易用。</p>
<h1 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h1><p>以下描述来自<strong>开源中国</strong>：</p>
<p>Zabbix 是一个基于 WEB 界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。</p>
<p>zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供柔软的通知机制以让系统管理员快速定位/解决存在的各种问题。</p>
<p><strong>zabbix</strong>由2部分构成，<strong>zabbix server</strong>与可选组件zabbix agent。<br><strong>zabbix server</strong>可以通过SNMP，<strong>zabbix agent</strong>，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux, Solaris, HP-UX, AIX, Free BSD, Open BSD, OS X等平台之上。<br><strong>zabbix agent</strong>需要安装在被监视的目标服务器上，它主要完成对硬件信息或与操作系统有关的内存，CPU等信息的收集。<strong>zabbix agent</strong>可以运行在Linux ,Solaris, HP-UX, AIX, Free BSD, Open BSD, OS X, Tru64/OSF1, Windows NT4.0, Windows 2000/2003/XP/Vista)等系统之上。</p>
<p><strong>zabbix server</strong>可以单独监视远程服务器的服务状态；同时也可以与<strong>zabbix agent</strong>配合，可以轮询<strong>zabbix agent</strong>主动接收监视数据（trapping方式），同时还可被动接收<strong>zabbix agent</strong>发送的数据（trapping方式）。<br>另外<strong>zabbix server</strong>还支持SNMP (v1,v2)，可以与SNMP软件(例如：net-snmp)等配合使用。</p>
<h2 id="zabbix的主要特点"><a href="#zabbix的主要特点" class="headerlink" title="zabbix的主要特点"></a>zabbix的主要特点</h2><ul>
<li>安装与配置简单，学习成本低</li>
<li>支持多语言（包括中文）</li>
<li>免费开源</li>
<li>自动发现服务器与网络设备</li>
<li>分布式监视以及WEB集中管理功能</li>
<li>可以无agent监视</li>
<li>用户安全认证和柔软的授权方式</li>
<li>通过WEB界面设置或查看监视结果</li>
<li>email等通知功能</li>
<li>等等</li>
</ul>
<h2 id="Zabbix主要功能"><a href="#Zabbix主要功能" class="headerlink" title="Zabbix主要功能"></a>Zabbix主要功能</h2><ul>
<li>CPU负荷</li>
<li>内存使用</li>
<li>磁盘使用</li>
<li>网络状况</li>
<li>端口监视</li>
<li>日志监视</li>
</ul>
<hr>
<p><a href="https://www.zabbix.com/documentation/5.0/manual/introduction/about" target="_blank" rel="noopener">Zabbix Documentation 5.0 - Introduction</a></p>
<p><a href="https://www.oschina.net/p/zabbix?hmsr=aladdin1e1" target="_blank" rel="noopener">开源中国- Zabbix软件简介</a></p>
]]></content>
      <categories>
        <category>监控</category>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>Zabbix</tag>
        <tag>告警</tag>
        <tag>开源</tag>
        <tag>初识</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 垃圾回收机制</title>
    <url>/2020/06/26/python-garbage-collection/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>python采用的是<strong>引用计数</strong>机制为主，<strong>标记-清除</strong>和<strong>分代收集</strong>两种机制为辅的策略。</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ul>
<li>Python语言默认采用的垃圾收集机制是『引用计数法 <code>Reference Counting</code>』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。</li>
<li>『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数<code>ob_ref</code>加<code>1</code>，每当该对象的引用失效时计数<code>ob_ref</code>减<code>1</code>，一旦对象的引用计数为<code>0</code>，该对象立即被回收，对象占用的内存空间将被释放。</li>
<li>它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</li>
</ul>
<a id="more"></a>

<h3 id="引用计数案例"><a href="#引用计数案例" class="headerlink" title="引用计数案例"></a>引用计数案例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''初始化对象'''</span></span><br><span class="line">        print(<span class="string">'object born id:%s'</span> %str(hex(id(self))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''循环引用变量与删除变量'''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=A()</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(c)</span>:</span></span><br><span class="line">    print(<span class="string">'obejct refcount is: '</span>,sys.getrefcount(c)) <span class="comment">#getrefcount()方法用于返回对象的引用计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="comment">#生成对象</span></span><br><span class="line">    a=A()</span><br><span class="line">    func(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#增加引用</span></span><br><span class="line">    b=a</span><br><span class="line">    func(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#销毁引用对象b</span></span><br><span class="line">    <span class="keyword">del</span> b</span><br><span class="line">    func(a)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">object born id:0x265c56a56d8</span><br><span class="line">obejct refcount is:  4</span><br><span class="line">obejct refcount is:  5</span><br><span class="line">obejct refcount is:  4</span><br></pre></td></tr></table></figure>

<h4 id="导致引用计数-1的情况"><a href="#导致引用计数-1的情况" class="headerlink" title="导致引用计数+1的情况"></a>导致引用计数+1的情况</h4><ul>
<li>对象被创建，例如a=23</li>
<li>对象被引用，例如b=a</li>
<li>对象被作为参数，传入到一个函数中，例如<code>func(a)</code></li>
<li>对象作为一个元素，存储在容器中，例如<code>list1=[a,a]</code></li>
</ul>
<h4 id="导致引用计数-1的情况-1"><a href="#导致引用计数-1的情况-1" class="headerlink" title="导致引用计数-1的情况"></a>导致引用计数-1的情况</h4><ul>
<li>对象的别名被显式销毁，例如<code>del a</code></li>
<li>对象的别名被赋予新的对象，例如<code>a=24</code></li>
<li>一个对象离开它的作用域，例如f函数执行完毕时，<code>func</code>函数中的局部变量（全局变量不会）</li>
<li>对象所在的容器被销毁，或从容器中删除对象</li>
</ul>
<h3 id="循环引用导致内存泄露"><a href="#循环引用导致内存泄露" class="headerlink" title="循环引用导致内存泄露"></a>循环引用导致内存泄露</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''循环引用'''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=A()</span><br><span class="line">        c2=A()</span><br><span class="line">        c1.t=c2</span><br><span class="line">        c2.t=c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id:0x1feb9f691d0</span><br><span class="line">object born id:0x1feb9f69438</span><br><span class="line">object born id:0x1feb9f690b8</span><br><span class="line">object born id:0x1feb9f69d68</span><br><span class="line">object born id:0x1feb9f690f0</span><br><span class="line">object born id:0x1feb9f694e0</span><br><span class="line">object born id:0x1feb9f69f60</span><br><span class="line">object born id:0x1feb9f69eb8</span><br><span class="line">object born id:0x1feb9f69128</span><br><span class="line">object born id:0x1feb9f69c88</span><br><span class="line">object born id:0x1feb9f69470</span><br><span class="line">object born id:0x1feb9f69e48</span><br><span class="line">object born id:0x1feb9f69ef0</span><br><span class="line">object born id:0x1feb9f69dd8</span><br><span class="line">object born id:0x1feb9f69e10</span><br><span class="line">object born id:0x1feb9f69ac8</span><br><span class="line">object born id:0x1feb9f69198</span><br><span class="line">object born id:0x1feb9f69cf8</span><br><span class="line">object born id:0x1feb9f69da0</span><br><span class="line">object born id:0x1feb9f69c18</span><br><span class="line">object born id:0x1feb9f69d30</span><br><span class="line">object born id:0x1feb9f69ba8</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>创建了<code>c1</code>，<code>c2</code>后，这两个对象的引用计数都是<code>1</code>，执行<code>c1.t=c2</code>和<code>c2.t=c1</code>后，引用计数变成<code>2</code>.</li>
<li>在<code>del c1</code>后，内存<code>c1</code>的对象的引用计数变为<code>1</code>，由于不是为<code>0</code>，所以<code>c1</code>的对象不会被销毁,同理，在<code>del c2</code>后也是一样的。</li>
<li>虽然它们两个的对象都是可以被销毁的，但是由于循环引用，导致垃圾回收器都不会回收它们，所以就会导致内存泄露。</li>
</ul>
<h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><ul>
<li>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。</li>
<li>新创建的对象都会分配在<strong>年轻代</strong>，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到<strong>中年代</strong>去，依此类推，<strong>老年代</strong>中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。</li>
<li>同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</li>
</ul>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>有三种情况会触发垃圾回收：</p>
<ol>
<li>调用<code>gc.collect()</code>,需要先导入<code>gc</code>模块。</li>
<li>当<code>gc</code>模块的计数器达到阀值的时候。</li>
<li>程序退出的时候。</li>
</ol>
<h4 id="gc模块"><a href="#gc模块" class="headerlink" title="gc模块"></a>gc模块</h4><p>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>
<p><strong>常用函数</strong>：</p>
<ol>
<li><code>gc.set_debug(flags)</code> 设置gc的debug日志，一般设置为<code>gc.DEBUG_LEAK</code></li>
<li><code>gc.collect([generation])</code><br>显式进行垃圾回收，可以输入参数，<code>0</code>代表只检查第一代的对象，<code>1</code>代表检查一，二代的对象，<code>2</code>代表检查一，二，三代的对象，如果不传参数，执行一个<code>full collection</code>，也就是等于传2。返回不可达（unreachable objects）对象的数目。</li>
<li><code>gc.set_threshold(threshold0[, threshold1[, threshold2])</code><br>设置自动执行垃圾回收的频率。</li>
<li><code>gc.get_count()</code> 获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</li>
</ol>
<p>扩展资料：<a href="https://docs.python.org/3.5/library/gc.html" target="_blank" rel="noopener">Garbage Collector interface</a></p>
<h4 id="gc实践案例"><a href="#gc实践案例" class="headerlink" title="gc实践案例"></a>gc实践案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''循环引用'''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1=A()</span><br><span class="line">        c2=A()</span><br><span class="line">        c1.t=c2</span><br><span class="line">        c2.t=c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br><span class="line">        <span class="comment">#增加垃圾回收机制</span></span><br><span class="line">        print(gc.garbage)</span><br><span class="line">        print(gc.collect())</span><br><span class="line">        print(gc.garbage)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">object born id:0x21d1a5dc470</span><br><span class="line">object born id:0x21d1a5dc9e8</span><br><span class="line">[]</span><br><span class="line">4</span><br><span class="line">gc: collectable &lt;A 0x0000021D1A5DC470&gt;</span><br><span class="line">[&lt;__main__.A object at 0x0000021D1A5DC470&gt;, &lt;__main__.A object at 0x0000021D1A5DC9E8&gt;, &#123;'t': &lt;__main__.A object at 0x0000021D1A5DC9E8&gt;&#125;, &#123;'t': &lt;__main__.A object at 0x0000021D1A5DC470&gt;&#125;]</span><br><span class="line">gc: collectable &lt;A 0x0000021D1A5DC9E8&gt;</span><br><span class="line">gc: collectable &lt;dict 0x0000021D1A156C88&gt;</span><br><span class="line">gc: collectable &lt;dict 0x0000021D1A5CABC8&gt;</span><br></pre></td></tr></table></figure>



<h3 id="gc模块的自动垃圾回收机制"><a href="#gc模块的自动垃圾回收机制" class="headerlink" title="gc模块的自动垃圾回收机制"></a>gc模块的自动垃圾回收机制</h3><p>必须要import gc模块，并且is_enable()=True才会启动自动垃圾回收。<br>这个机制的主要作用就是发现并处理不可达的垃圾对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">垃圾回收 = 垃圾检查 + 垃圾回收</span><br></pre></td></tr></table></figure>

<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，改对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>
<p>gc模块里面会有一个长度为3的列表的计数器，可以通过<code>gc.get_count()</code>获取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''垃圾自动回收'''</span></span><br><span class="line">    print(gc.get_count())</span><br><span class="line">    a=A()</span><br><span class="line">    print(gc.get_count())</span><br><span class="line">    <span class="keyword">del</span> a</span><br><span class="line">    print(gc.get_count())</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(621, 10, 0)</span><br><span class="line">object born id:0x2ca32a8c588</span><br><span class="line">(624, 10, 0)</span><br><span class="line">(623, 10, 0)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>621</code>指距离上一次<code>一代</code>垃圾检查，Python分配内存的数目减去释放内存的数目，注意:是内存分配，而不是引用计数的增加。</li>
<li><code>10</code>指距离上一次<code>二代</code>垃圾检查，<code>一代</code>垃圾检查的次数。</li>
<li><code>0</code>是指距离上一次<code>三代</code>垃圾检查，<code>二代</code>垃圾检查的次数。</li>
</ul>
<h3 id="自动回收阈值"><a href="#自动回收阈值" class="headerlink" title="自动回收阈值"></a>自动回收阈值</h3><p>gc模快有一个自动垃圾回收的阀值，即通过<code>gc.get_threshold</code>函数获取到的长度为3的元组，例如<code>(700,10,10)</code><br>每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器</p>
<p>注意：<br>如果循环引用中，两个对象都定义了<code>__del__</code>方法，gc模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的<code>__del__</code>方法，所以为了安全起见，gc模块会把对象放到<code>gc.garbage</code>中，但是不会销毁对象。</p>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p>
<img data-src="/2020/06/26/python-garbage-collection/mark-sweep.svg" class>

<p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。 mark-sweepg 在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>
<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://www.memorymanagement.org/mmref/recycle.html#tracing-collectors" target="_blank" rel="noopener">https://www.memorymanagement.org/mmref/recycle.html#tracing-collectors</a></p>
<p><a href="https://foofish.net/python-gc.html" target="_blank" rel="noopener">FOOFISH-PYTHON之禅- Python中的垃圾回收机制</a></p>
<p><a href="https://sutune.me/2018/10/14/python-GC/#comments" target="_blank" rel="noopener">Python 垃圾回收机制</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>基础原理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>垃圾回收</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>理解Python协程(Coroutine)</title>
    <url>/2020/06/22/python-coroutine/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>由于GIL的存在，导致Python多线程性能甚至比单线程更糟。</p>
<blockquote>
<p>GIL: 全局解释器锁（英语：Global Interpreter Lock，缩写GIL），是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。[1]即便在多核心处理器上，使用 GIL 的解释器也只允许同一时间执行一个线程。</p>
</blockquote>
<p>于是出现了协程（Coroutine）这么个东西。</p>
<blockquote>
<p>协程: 协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行.</p>
</blockquote>
<p>协程由于由程序主动控制切换，没有线程切换的开销，所以执行效率极高。对于IO密集型任务非常适用，如果是cpu密集型，推荐多进程+协程的方式。</p>
<p>在Python3.4之前，官方没有对协程的支持，存在一些三方库的实现，比如gevent和Tornado。3.4之后就内置了asyncio标准库，官方真正实现了协程这一特性。</p>
<p>而Python对协程的支持，是通过Generator实现的，协程是遵循某些规则的生成器。因此，我们在了解协程之前，我们先要学习生成器。</p>
<a id="more"></a>

<h2 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器(Generator)"></a>生成器(Generator)</h2><p>我们这里主要讨论<code>yield</code>和<code>yield from</code>这两个表达式，这两个表达式和协程的实现息息相关。</p>
<ul>
<li>Python2.5中引入<code>yield</code>表达式，参见<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0342/">PEP342</a></li>
<li>Python3.3中增加<code>yield from</code>语法，参见<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0380/">PEP380</a>，</li>
</ul>
<p>方法中包含<code>yield</code>表达式后，Python会将其视作generator对象，不再是普通的方法。</p>
<h3 id="yield表达式的使用"><a href="#yield表达式的使用" class="headerlink" title="yield表达式的使用"></a><code>yield</code>表达式的使用</h3><p>我们先来看该表达式的具体使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"generator start"</span>)</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        yield_expression_value = <span class="keyword">yield</span> n</span><br><span class="line">        print(<span class="string">"yield_expression_value = %d"</span> % yield_expression_value)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ①创建generator对象</span></span><br><span class="line">generator = test()</span><br><span class="line">print(type(generator))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---------------\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ②启动generator</span></span><br><span class="line">next_result = generator.__next__()</span><br><span class="line">print(<span class="string">"next_result = %d"</span> % next_result)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---------------\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③发送值给yield表达式</span></span><br><span class="line">send_result = generator.send(<span class="number">666</span>)</span><br><span class="line">print(<span class="string">"send_result = %d"</span> % send_result)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">---------------</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">generator</span> <span class="title">start</span></span></span><br><span class="line">next_result = 1</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">yield_expression_value = <span class="number">666</span></span><br><span class="line">send_result = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>方法说明：</p>
<ul>
<li><code>__next__()</code>方法: 作用是启动或者恢复generator的执行，相当于send(None)</li>
<li><code>send(value)</code>方法：作用是发送值给yield表达式。启动generator则是调用send(None)</li>
</ul>
<p>执行结果的说明：</p>
<ul>
<li>①创建generator对象：包含yield表达式的函数将不再是一个函数，调用之后将会返回generator对象</li>
<li>②启动generator：使用生成器之前需要先调用<code>__next__</code>或者<code>send(None)</code>，否则将报错。启动generator后，代码将执行到<code>yield</code>出现的位置，也就是执行到<code>yield n</code>，然后将n传递到<code>generator.__next__()</code>这行的返回值。（注意，生成器执行到<code>yield n</code>后将暂停在这里，直到下一次生成器被启动）</li>
<li>③发送值给yield表达式：调用send方法可以发送值给yield表达式，同时恢复生成器的执行。生成器从上次中断的位置继续向下执行，然后遇到下一个<code>yield</code>，生成器再次暂停，切换到主函数打印出send_result。</li>
</ul>
<p>理解这个demo的关键是：生成器启动或恢复执行一次，将会在<code>yield</code>处暂停。上面的第②步仅仅执行到了<code>yield n</code>，并没有执行到赋值语句，到了第③步，生成器恢复执行才给<code>yield_expression_value</code>赋值。</p>
<h3 id="生产者和消费者模型"><a href="#生产者和消费者模型" class="headerlink" title="生产者和消费者模型"></a>生产者和消费者模型</h3><p>上面的例子中，代码中断–&gt;切换执行，体现出了协程的部分特点。</p>
<p>我们再举一个生产者、消费者的例子，这个例子来自<a href="https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090171191d05dae6e129940518d1d6cf6eeaaa969000">廖雪峰的Python教程</a>：</p>
<blockquote>
<p>传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。<br>现在改用协程，生产者生产消息后，直接通过<code>yield</code>跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"[CONSUMER] start"</span>)</span><br><span class="line">    r = <span class="string">'start'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            print(<span class="string">"n is empty"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">"[CONSUMER] Consumer is consuming %s"</span> % n)</span><br><span class="line">        r = <span class="string">"200 ok"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="comment"># 启动generator</span></span><br><span class="line">    start_value = c.send(<span class="literal">None</span>)</span><br><span class="line">    print(start_value)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"[PRODUCER] Producer is producing %d"</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        print(<span class="string">'[PRODUCER] Consumer return: %s'</span> % r)</span><br><span class="line">    <span class="comment"># 关闭generator</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建生成器</span></span><br><span class="line">c = consumer()</span><br><span class="line"><span class="comment"># 传入generator</span></span><br><span class="line">producer(c)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[CONSUMER] start</span><br><span class="line">start</span><br><span class="line">[PRODUCER] producer <span class="keyword">is</span> producing <span class="number">1</span></span><br><span class="line">[CONSUMER] consumer <span class="keyword">is</span> consuming <span class="number">1</span></span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> ok</span><br><span class="line">[PRODUCER] producer <span class="keyword">is</span> producing <span class="number">2</span></span><br><span class="line">[CONSUMER] consumer <span class="keyword">is</span> consuming <span class="number">2</span></span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> ok</span><br><span class="line">[PRODUCER] producer <span class="keyword">is</span> producing <span class="number">3</span></span><br><span class="line">[CONSUMER] consumer <span class="keyword">is</span> consuming <span class="number">3</span></span><br><span class="line">[PRODUCER] Consumer <span class="keyword">return</span>: <span class="number">200</span> ok</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意到<code>consumer</code>函数是一个<code>generator</code>，把一个<code>consumer</code>传入<code>produce</code>后：</p>
</blockquote>
<ol>
<li>首先调用<code>c.send(None)</code>启动生成器；</li>
<li>然后，一旦生产了东西，通过<code>c.send(n)</code>切换到consumer执行；</li>
<li><code>consumer</code>通过<code>yield</code>拿到消息，处理，又通过<code>yield</code>把结果传回；</li>
<li><code>produce</code>拿到<code>consumer</code>处理的结果，继续生产下一条消息；</li>
<li><code>produce</code>决定不生产了，通过<code>c.close()</code>关闭<code>consumer</code>，整个过程结束。</li>
</ol>
<blockquote>
<p>整个流程无锁，由一个线程执行，<code>produce</code>和<code>consumer</code>协作完成任务，所以称为“协程”，而非线程的抢占式多任务。</p>
</blockquote>
<h3 id="yield-from表达式"><a href="#yield-from表达式" class="headerlink" title="yield from表达式"></a><code>yield from</code>表达式</h3><p>Python3.3版本新增<code>yield from</code>语法，新语法用于将一个生成器部分操作委托给另一个生成器。此外，允许子生成器（即yield from后的“参数”）返回一个值，该值可供委派生成器（即包含yield from的生成器）使用。并且在委派生成器中，可对子生成器进行优化。</p>
<p>我们先来看最简单的应用，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 委派生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"test_yield_from start"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    print(<span class="string">"test_yield_from end"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_yield_from(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test_yield_from start</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">test_yield_from end</span><br></pre></td></tr></table></figure>

<p>这里我们仅仅给这个生成器添加了一些打印，如果是正式的代码中，你可以添加正常的执行逻辑。</p>
<p>如果上面的<code>test_yield_from</code>函数中有两个<code>yield from</code>语句，将串行执行。比如将上面的<code>test_yield_from</code>函数改写成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"test_yield_from start"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    print(<span class="string">"test_yield_from doing"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> test(n)</span><br><span class="line">    print(<span class="string">"test_yield_from end"</span>)</span><br></pre></td></tr></table></figure>

<p>将输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_yield_from start</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">test_yield_from doing</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">test_yield_from end</span><br></pre></td></tr></table></figure>

<p>在这里，<code>yield from</code>起到的作用相当于下面写法的简写形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> test(n):</span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<p>看起来这个<code>yield from</code>也没做什么大不了的事，其实它还帮我们处理了异常之类的。具体可以看stackoverflow上的这个问题：<a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/9708902/in-practice-what-are-the-main-uses-for-the-new-yield-from-syntax-in-python-3">In practice, what are the main uses for the new “yield from” syntax in Python 3.3?</a></p>
<h2 id="协程-Coroutine"><a href="#协程-Coroutine" class="headerlink" title="协程(Coroutine)"></a>协程(Coroutine)</h2><ul>
<li>Python3.4开始，新增了asyncio相关的API，语法使用[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>和</code>yield from`实现协程</li>
<li>Python3.5中引入<code>async</code>/<code>await</code>语法，参见<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0492/">PEP492</a></li>
</ul>
<p>我们先来看Python3.4的实现。</p>
<h3 id="asyncio-coroutine-mailto-asyncio-coroutine"><a href="#asyncio-coroutine-mailto-asyncio-coroutine" class="headerlink" title="[@asyncio.coroutine](mailto:@asyncio.coroutine)`"></a>[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`</h3><p>Python3.4中，使用[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`装饰的函数称为协程。不过没有从语法层面进行严格约束。</p>
<blockquote>
<p>对装饰器不了解的小伙伴可以看我的上一篇博客–<a href="https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/ee82b941772a">《理解Python装饰器》</a></p>
</blockquote>
<p>对于Python原生支持的协程来说，Python对协程和生成器做了一些区分，便于消除这两个不同但相关的概念的歧义：</p>
<ul>
<li>标记了[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>装饰器的函数称为协程函数，</code>iscoroutinefunction()`方法返回True</li>
<li>调用协程函数返回的对象称为协程对象，<code>iscoroutine()</code>函数返回True</li>
</ul>
<p>举个栗子，我们给上面<code>yield from</code>的demo中添加[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield_from</span><span class="params">(n)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否是协程函数</span></span><br><span class="line">print(asyncio.iscoroutinefunction(test_yield_from))</span><br><span class="line"><span class="comment"># 是否是协程对象</span></span><br><span class="line">print(asyncio.iscoroutine(test_yield_from(<span class="number">3</span>)))</span><br></pre></td></tr></table></figure>

<p>毫无疑问输出结果是True。</p>
<p>可以看下[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`的源码中查看其做了什么，我将其源码简化下，大致如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="comment"># 判断是否是生成器</span></span><br><span class="line">    <span class="keyword">if</span> inspect.isgeneratorfunction(func):</span><br><span class="line">        coro = func</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 将普通函数变成generator</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">coro</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            res = func(*args, **kw)</span><br><span class="line">            res = <span class="keyword">yield</span> <span class="keyword">from</span> res</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment"># 将generator转换成coroutine</span></span><br><span class="line">    wrapper = types.coroutine(coro)</span><br><span class="line">    <span class="comment"># For iscoroutinefunction().</span></span><br><span class="line">    wrapper._is_coroutine = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>将这个装饰器标记在一个生成器上，就会将其转换成coroutine。</p>
<p>然后，我们来实际使用下[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>和</code>yield from`：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"Compute %s + %s ..."</span> % (x, y))</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    result = <span class="keyword">yield</span> <span class="keyword">from</span> compute(x, y)</span><br><span class="line">    print(<span class="string">"%s + %s = %s"</span> % (x, y, result))</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line"><span class="comment"># 中断调用，直到协程执行结束</span></span><br><span class="line">loop.run_until_complete(print_sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">"end"</span>)</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">Compute <span class="number">1</span> + <span class="number">2</span> ...</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><code>print_sum</code>这个协程中调用了子协程<code>compute</code>，它将等待<code>compute</code>执行结束才返回结果。</p>
<p>这个demo点调用流程如下图：</p>
<p><img data-src="https://pic2.zhimg.com/v2-551d0dabcd42f19f957835b19d2504d9_b.jpg" alt="img"></p>
<p>EventLoop将会把<code>print_sum</code>封装成Task对象</p>
<p>流程图展示了这个demo的控制流程，不过没有展示其全部细节。比如其中“暂停”的1s，实际上创建了一个future对象, 然后通过<code>BaseEventLoop.call_later()</code>在1s后唤醒这个任务。</p>
<p>值得注意的是，[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)`将在Python3.10版本中移除。</p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a><code>async</code>/<code>await</code></h3><p>Python3.5开始引入<code>async</code>/<code>await</code>语法（<a href="https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0492">PEP 492</a>），用来简化协程的使用并且便于理解。</p>
<p><code>async</code>/<code>await</code>实际上只是[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>和</code>yield from`的语法糖：</p>
<ul>
<li>把[<code>@asyncio.coroutine](mailto:</code>@asyncio.coroutine)<code>替换为</code>async`</li>
<li>把<code>yield from</code>替换为<code>await</code></li>
</ul>
<p>即可。</p>
<p>比如上面的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"Compute %s + %s ..."</span> % (x, y))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    result = <span class="keyword">await</span> compute(x, y)</span><br><span class="line">    print(<span class="string">"%s + %s = %s"</span> % (x, y, result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">print(<span class="string">"start"</span>)</span><br><span class="line">loop.run_until_complete(print_sum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">"end"</span>)</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>我们再来看一个asyncio中Future的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">future = asyncio.Future()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"wait 1 second"</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"set_result"</span>)</span><br><span class="line">    future.set_result(<span class="string">'data'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro2</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="keyword">await</span> future</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait([</span><br><span class="line">    coro1()</span><br><span class="line">    coro2()</span><br><span class="line">]))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait <span class="number">1</span> second</span><br><span class="line">(大约等待<span class="number">1</span>秒)</span><br><span class="line">set_result</span><br><span class="line">data</span><br></pre></td></tr></table></figure>

<p>这里await后面跟随的future对象，协程中yield from或者await后面可以调用future对象，其作用是：暂停协程，直到future执行结束或者返回result或抛出异常。</p>
<p>而在我们的例子中，<code>await future</code>必须要等待<code>future.set_result(&#39;data&#39;)</code>后才能够结束。将<code>coro2()</code>作为第二个协程可能体现得不够明显，可以将协程的调用改成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait([</span><br><span class="line">    <span class="comment"># coro1(),</span></span><br><span class="line">    coro2(),</span><br><span class="line">    coro1()</span><br><span class="line">]))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure>

<p>输出的结果仍旧与上面相同。</p>
<p>其实，<code>async</code>这个关键字的用法不止能用在函数上，还有<code>async with</code>异步上下文管理器，<code>async for</code>异步迭代器. 对这些感兴趣且觉得有用的可以网上找找资料，这里限于篇幅就不过多展开了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文就生成器和协程做了一些学习、探究和总结，不过并没有做过多深入深入的研究。权且作为入门到一个笔记，之后将会尝试自己实现一下异步API，希望有助于理解学习。</p>
<hr>
<p>参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/68043798" target="_blank" rel="noopener">理解<em>Python协程</em>(Coroutine)</a></p>
<p><a href="https://eastlakeside.gitbook.io/interpy-zh/coroutines" target="_blank" rel="noopener">Python进阶 - 协程</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923057403198272" target="_blank" rel="noopener">廖雪峰 - Python协程</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>协程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>协程</tag>
        <tag>生成器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 uWSGI + Nginx 部署 Django 项目</title>
    <url>/2020/05/20/uWSGI-Nginx-Django/</url>
    <content><![CDATA[<blockquote>
<p>摘要</p>
</blockquote>
<p>在开发<kbd>Django</kbd>框架时，我们通常使用<kbd>python manage.py runserver</kbd>来运行本地服务,但是这只适用开发环境中使用，此时启动的Django项目通过127.0.0.1:8000的本地端口进行转发，也只能在本地环境下进行访问。那么我们基于Django的SaaS是怎样发布在公网、局域网环境下，并且通过域名访问站点的呢？通常的方案是：我们就需要用到<kbd>uWSGI</kbd>配合<kbd>Nginx(Apache)</kbd>进行代理转发。以下是笔者在实践此方案的过程中整理的一些要点。</p>
<a id="more"></a>
<blockquote>
<p>正文</p>
</blockquote>
<h2 id="一、uWSGI简介"><a href="#一、uWSGI简介" class="headerlink" title="一、uWSGI简介"></a>一、uWSGI简介</h2><p>uWSGI是一个快速的、纯C语言开发的、自维护的、对开发者友好的WSGI服务器，旨在提供专业的Python web应用发布和开发。可使用C/C++/Objective-C来为uWSGI编写插件。我们在根目录下的requirements.py中可以找到uWSGI的依赖，Windows环境本地安装依赖的时候一般都会注释掉它，因为uWSGI是运行在Linux上的服务器。可能大家对WSGI、uwsgi、uWSGI这几个概念很头疼，简单地说，WSGI是一个规范协议，定义了Web服务器如何与Python应用程序进行交互；uwsgi和WSGI一样是通信协议，是uWSGI服务器的单独形式，用于自定义传输类型；而uWSGI是重头戏，他是一个web服务器,实现了WSGI协议、uwsgi协议。以下是WSGI，uwsgi，uWSGI的实现过程图解。</p>
<p><img data-src="uwsgi.png" alt="uWSGI"></p>
<h2 id="二、Nginx简介"><a href="#二、Nginx简介" class="headerlink" title="二、Nginx简介"></a>二、Nginx简介</h2><p>相比uWSGI，Nginx的知名度高了许多，它是一个开源的、支持高性能、高并发的代理服务软件，Nginx不但是一个优秀的web服务软件,还可以作为反想代理和负载均衡,以及缓存服务或使用。<br>实际上，一个uWSGI的web服务器，再加上Django这样的web框架，就已经可以实现网站的功能了。那为什么还需要Nginx呢？经过笔者查阅资料，总结有以下几点：</p>
<h3 id="2-1、安全问题："><a href="#2-1、安全问题：" class="headerlink" title="2.1、安全问题："></a>2.1、安全问题：</h3><p>程序不能直接被浏览器访问到，而是通过Nginx只开放某个接口，uWSGI本身是内网接口，这样运维人员在Nginx上加上安全性的限制，可以达到保护程序的作用；</p>
<h3 id="2-2、载均衡问题："><a href="#2-2、载均衡问题：" class="headerlink" title="2.2、载均衡问题："></a>2.2、载均衡问题：</h3><p>一个uWSGI很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了Nginx做代理，一个Nginx可以代理多台uWSGI完成负载均衡；</p>
<h3 id="2-3、静态文件问题："><a href="#2-3、静态文件问题：" class="headerlink" title="2.3、静态文件问题："></a>2.3、静态文件问题：</h3><p>用Django或是uWSGI这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如Nginx好，所以整个静态文件的处理都直接由nginx完成。</p>
<h2 id="三、uWSGI-Nginx-部署-Django-网站的实践"><a href="#三、uWSGI-Nginx-部署-Django-网站的实践" class="headerlink" title="三、uWSGI + Nginx 部署 Django 网站的实践"></a>三、uWSGI + Nginx 部署 Django 网站的实践</h2><p>接下来笔者将使用uWSGI+Nginx搭建Django网站，此方案的架构图如下：<br><img data-src="uwsgi+nginx+django.png" alt="uwsgi+nginx+django"></p>
<h3 id="3-1、安装配置uWSGI："><a href="#3-1、安装配置uWSGI：" class="headerlink" title="3.1、安装配置uWSGI："></a>3.1、安装配置uWSGI：</h3><h4 id="3-1-1安装uWSGI："><a href="#3-1-1安装uWSGI：" class="headerlink" title="3.1.1安装uWSGI："></a>3.1.1安装uWSGI：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>
<p>也可以指定版本安装；</p>
<h4 id="3-1-2-uWSGI配置："><a href="#3-1-2-uWSGI配置：" class="headerlink" title="3.1.2    uWSGI配置："></a>3.1.2    uWSGI配置：</h4><p>实际上，我们可以uwsgi命令配合参数来启动Django项目，但是我们可以把这些参数放在uwsgi9090.ini配置文件中，记录配置并且实现后台运行uWSGI：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket &#x3D; 127.0.0.1:9090</span><br><span class="line">master &#x3D; true         &#x2F;&#x2F;主进程</span><br><span class="line">vhost &#x3D; true          &#x2F;&#x2F;多站模式</span><br><span class="line">no-site &#x3D; true        &#x2F;&#x2F;多站模式时不设置入口模块和文件</span><br><span class="line">workers &#x3D; 2           &#x2F;&#x2F;子进程数</span><br><span class="line">reload-mercy &#x3D; 10     </span><br><span class="line">vacuum &#x3D; true         &#x2F;&#x2F;退出、重启时清理文件</span><br><span class="line">max-requests &#x3D; 1000   </span><br><span class="line">limit-as &#x3D; 512</span><br><span class="line">buffer-size &#x3D; 30000</span><br><span class="line">pidfile &#x3D; &#x2F;var&#x2F;run&#x2F;uwsgi9090.pid    &#x2F;&#x2F;pid文件，用于下面的脚本启动、停止该进程</span><br><span class="line">daemonize &#x3D; &#x2F;website&#x2F;uwsgi9090.log</span><br></pre></td></tr></table></figure>
<p>如上配置，接下来运行uwsgi uwsgi9090.ini即可uWSGI后台启动Django；</p>
<h4 id="3-1-3-Django项目根目录的settings-py中配置收集静态资源："><a href="#3-1-3-Django项目根目录的settings-py中配置收集静态资源：" class="headerlink" title="3.1.3    Django项目根目录的settings.py中配置收集静态资源："></a>3.1.3    Django项目根目录的settings.py中配置收集静态资源：</h4><p>配置完毕后运行python manage.py collectstatic</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态资源访问的起始url</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"><span class="comment"># 指定静态资源所在的目录</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 设置收集静态资源的路径(部署时使用)</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'collect_static/'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-安装配置Nginx："><a href="#3-2-安装配置Nginx：" class="headerlink" title="3.2    安装配置Nginx："></a>3.2    安装配置Nginx：</h3><h4 id="3-2-1、安装编译工具及库文件："><a href="#3-2-1、安装编译工具及库文件：" class="headerlink" title="3.2.1、安装编译工具及库文件："></a>3.2.1、安装编译工具及库文件：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2、编译安装Nginx，版本可自定义："><a href="#3-2-2、编译安装Nginx，版本可自定义：" class="headerlink" title="3.2.2、编译安装Nginx，版本可自定义："></a>3.2.2、编译安装Nginx，版本可自定义：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nginx.org/download/nginx-1.6.2.tar.gz</span><br><span class="line">tar zxvf nginx-1.6.2.tar.gz</span><br><span class="line">cd nginx-1.6.2</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3、找到Nginx的安装目录，打开conf-nginx-conf文件，修改server配置："><a href="#3-2-3、找到Nginx的安装目录，打开conf-nginx-conf文件，修改server配置：" class="headerlink" title="3.2.3、找到Nginx的安装目录，打开conf/nginx.conf文件，修改server配置："></a>3.2.3、找到Nginx的安装目录，打开conf/nginx.conf文件，修改server配置：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 default_server ssl;  &#x2F;&#x2F;https必须用ssl和443端口，http可以用80</span><br><span class="line">        server_name  xxx.xxx.com;     &#x2F;&#x2F;个人的已经注册过的域名</span><br><span class="line">        location &#x2F; &#123;  </span><br><span class="line">		include  uwsgi_params;</span><br><span class="line">            uwsgi_pass  127.0.0.1:9090;              &#x2F;&#x2F;必须和uwsgi中的设置一致</span><br><span class="line">            uwsgi_param UWSGI_SCRIPT demosite.wsgi;  &#x2F;&#x2F;入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录</span><br><span class="line">            uwsgi_param UWSGI_CHDIR &#x2F;demosite;       &#x2F;&#x2F;项目根目录</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            client_max_body_size 35m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-4、使用systemctl-restart-nginx重启Nginx服务器。"><a href="#3-2-4、使用systemctl-restart-nginx重启Nginx服务器。" class="headerlink" title="3.2.4、使用systemctl restart nginx重启Nginx服务器。"></a>3.2.4、使用systemctl restart nginx重启Nginx服务器。</h4><h2 id="四、项目启动及维护"><a href="#四、项目启动及维护" class="headerlink" title="四、项目启动及维护"></a>四、项目启动及维护</h2><p>使用<code>ss -lntpd | grep nginx（uwsgi）</code>和<code>ps -ef | grep nginx（uwsgi）</code>来确认nginx、uwsgi是否启动成功、转发代理的端口是否正确。<br>如果为启动失败，请确认配置是否正确，使用systemctl restart nginx重启nginx，使用killall -9 uwsgi杀死uwsgi服务，使用uwsgi uwsgi9090.ini重启uwsgi和Django项目；如果一切正常，我们可以在浏览器中输入nginx.conf中配置的server_name域名，来访问已启动的Django web项目，这样就实现了uWSGI+Nginx部署Django web项目了。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>技术文章</tag>
        <tag>Django</tag>
        <tag>uWSGI</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言之顺序编程</title>
    <url>/2020/04/23/go-basis-sequence/</url>
    <content><![CDATA[<blockquote>
<h2 id="Go语言之顺序编程"><a href="#Go语言之顺序编程" class="headerlink" title="Go语言之顺序编程"></a>Go语言之顺序编程</h2></blockquote>
<p>以下是笔者学习Go语言基础的代码随笔，本次练习内容为<kbd>条件语句</kbd>与<kbd>循环语句</kbd>。</p>
<h3 id="Go-语言条件语句"><a href="#Go-语言条件语句" class="headerlink" title="Go 语言条件语句"></a>Go 语言条件语句</h3><p>Go 语言提供了以下几种条件判断语句：</p>
<table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-if-statement.html" target="_blank" rel="noopener">if 语句</a></td>
<td align="left"><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-if-else-statement.html" target="_blank" rel="noopener">if…else 语句</a></td>
<td align="left"><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-nested-if-statements.html" target="_blank" rel="noopener">if 嵌套语句</a></td>
<td align="left">你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-switch-statement.html" target="_blank" rel="noopener">switch 语句</a></td>
<td align="left"><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-select-statement.html" target="_blank" rel="noopener">select 语句</a></td>
<td align="left"><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td>
</tr>
</tbody></table>
<p><em>注意：Go 没有三目运算符，所以不支持</em> <strong>?:</strong> <em>形式的条件判断。</em></p>
<a id="more"></a>

<h3 id="Go-语言循环语句"><a href="#Go-语言循环语句" class="headerlink" title="Go 语言循环语句"></a>Go 语言循环语句</h3><p>Go 语言提供了以下几种类型循环处理语句：</p>
<table>
<thead>
<tr>
<th align="left">循环类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-for-loop.html" target="_blank" rel="noopener">for 循环</a></td>
<td align="left">重复执行语句块</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-nested-loops.html" target="_blank" rel="noopener">循环嵌套</a></td>
<td align="left">在 for 循环中嵌套一个或多个 for 循环</td>
</tr>
</tbody></table>
<h4 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h4><p>循环控制语句可以控制循环体内语句的执行过程。</p>
<p>GO 语言支持以下几种循环控制语句：</p>
<table>
<thead>
<tr>
<th align="left">控制语句</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/go/go-break-statement.html" target="_blank" rel="noopener">break 语句</a></td>
<td align="left">经常用于中断当前 for 循环或跳出 switch 语句</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-continue-statement.html" target="_blank" rel="noopener">continue 语句</a></td>
<td align="left">跳过当前循环的剩余语句，然后继续进行下一轮循环。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/go/go-goto-statement.html" target="_blank" rel="noopener">goto 语句</a></td>
<td align="left">将控制转移到被标记的语句。</td>
</tr>
</tbody></table>
<h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// ifFn()</span></span><br><span class="line">	<span class="comment">// forFn()</span></span><br><span class="line">	<span class="comment">// switchFn()</span></span><br><span class="line">	loopFn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ifFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">2</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"第一种方式"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> a, b := i, <span class="number">7</span>; a == <span class="number">2</span> &#123;</span><br><span class="line">		fmt.Println(b)</span><br><span class="line">		fmt.Println(<span class="string">"第二种方式"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// s := []int&#123;1, 2, 4, 5, 7&#125;</span></span><br><span class="line">	m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(k, v)</span><br><span class="line">	&#125;</span><br><span class="line">	i := <span class="number">4</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"第一种：无限循环，可通过break结束."</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">		a := <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> a &lt;= <span class="number">2</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"第二种：条件循环，类似while. (a=%v) \n"</span>, a)</span><br><span class="line">			a++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">2</span>; a++ &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"第三种：与第二种相同，带初始化和自增. (a=%v) \n"</span>, a)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">3</span></span><br><span class="line">	<span class="keyword">switch</span> i &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		a := <span class="number">3</span></span><br><span class="line">		<span class="keyword">switch</span> a &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第一种方式, a==1"</span>)</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第一种方式，a==2"</span>)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第一种方式，default"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		a := <span class="number">2</span></span><br><span class="line">		<span class="keyword">switch</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> a == <span class="number">1</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第二种方式, a==1"</span>)</span><br><span class="line">		<span class="keyword">case</span> a == <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第二种方式, a==2"</span>)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第二种方式，default"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">switch</span> a := <span class="number">3</span>; &#123;</span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">1</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=1"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> a &gt;= <span class="number">2</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式, a&gt;=2"</span>)</span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">"第三种方式，default"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loopFn</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">LABEL2:</span><br><span class="line">	<span class="keyword">goto</span> LABEL</span><br><span class="line">LABEL:</span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> &#123;</span><br><span class="line">				i++</span><br><span class="line">				<span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">"跳过打印i=3"</span>)</span><br><span class="line">					<span class="keyword">continue</span> LABEL</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">"goto一下"</span>)</span><br><span class="line">					<span class="keyword">goto</span> LABEL2</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> i == <span class="number">7</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">"不打印剩下的"</span>)</span><br><span class="line">					<span class="keyword">break</span> LABEL</span><br><span class="line">				&#125;</span><br><span class="line">				fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go</category>
        <category>顺序编程</category>
      </categories>
      <tags>
        <tag>Go语言</tag>
        <tag>基础练习</tag>
        <tag>顺序编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础练习二</title>
    <url>/2020/04/09/go-basis-exercise-2/</url>
    <content><![CDATA[<blockquote>
<h2 id="Go语言基础练习二"><a href="#Go语言基础练习二" class="headerlink" title="Go语言基础练习二"></a>Go语言基础练习二</h2></blockquote>
<p>以下是笔者学习Go语言基础的代码随笔，延续了练习一中的数据类型、变量常量申明，以及Go 语言的几种运算符。</p>
<h3 id="变量申明"><a href="#变量申明" class="headerlink" title="变量申明"></a>变量申明</h3><p><strong>第一种，指定变量类型，如果没有初始化，则变量默认为零值</strong>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name v_type</span><br><span class="line">v_name = value</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>第二种，根据值自行判定变量类型。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name = value</span><br></pre></td></tr></table></figure>

<p><strong>第三种，省略 var, 注意 \</strong>:=** 左侧如果没有声明新的变量，就产生编译错误，格式：**</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v_name := value</span><br></pre></td></tr></table></figure>

<h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型相同多个变量, 非全局变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br><span class="line">vname1, vname2, vname3 = v1, v2, v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 和 python 很像,不需要显示声明类型，自动推断</span></span><br><span class="line"></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    vname1 v_type1</span><br><span class="line">    vname2 v_type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Go-语言运算符"><a href="#Go-语言运算符" class="headerlink" title="Go 语言运算符"></a>Go 语言运算符</h3><p>运算符用于在程序运行时执行数学或逻辑运算。</p>
<p>Go 语言内置的运算符有：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
<h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// TODO -&gt; 并发、map、切片、类型转换、循环、条件语句</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Go数据类型、变量常量申明 */</span></span><br><span class="line">	<span class="comment">//var a string = "Runoob"</span></span><br><span class="line">	<span class="comment">//var bool bool = true</span></span><br><span class="line">	<span class="comment">//var b string</span></span><br><span class="line">	<span class="comment">//b = "sapphire"</span></span><br><span class="line">	<span class="comment">//var c = "spr"</span></span><br><span class="line">	fmt.Println(<span class="string">"first Go: "</span> + <span class="string">"hello world!"</span>)</span><br><span class="line">	<span class="comment">//fmt.Print(c)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//const申明常量</span></span><br><span class="line">	<span class="keyword">const</span> a, b = <span class="number">100</span>, <span class="string">"gogogo"</span></span><br><span class="line">	fmt.Println(b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//声明一个变量并初始化方式</span></span><br><span class="line">	<span class="comment">//方式1</span></span><br><span class="line">	<span class="keyword">var</span> test_1 = <span class="string">"RUNOOB"</span></span><br><span class="line">	fmt.Println(test_1)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 没有初始化就为零值</span></span><br><span class="line">	<span class="keyword">var</span> test_2 <span class="keyword">int</span></span><br><span class="line">	fmt.Println(test_2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// bool 零值为 false</span></span><br><span class="line">	<span class="keyword">var</span> test_3 <span class="keyword">bool</span></span><br><span class="line">	fmt.Println(test_3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 = (自动判断类型)</span></span><br><span class="line">	<span class="keyword">var</span> test_4 = <span class="literal">true</span></span><br><span class="line">	fmt.Println(test_4)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3 := (必须申明新变量)</span></span><br><span class="line">	test_5 := <span class="string">"申明变量"</span></span><br><span class="line">	fmt.Println(test_5)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//iota，特殊常量，const每申明一次iota+=1</span></span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		aa = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">		bb          <span class="comment">//1</span></span><br><span class="line">		cc          <span class="comment">//2</span></span><br><span class="line">		dd = <span class="string">"ha"</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">		ee          <span class="comment">//"ha"   iota += 1</span></span><br><span class="line">		ff = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">		gg          <span class="comment">//100  iota +=1</span></span><br><span class="line">		hh = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">		ii          <span class="comment">//8</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(aa,bb,cc,dd,ee,ff,gg,hh,ii)</span><br><span class="line">	<span class="comment">// 输出：0 1 2 ha ha 100 100 7 8</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 运算符 */</span></span><br><span class="line">	<span class="comment">// 加+ 减- 乘* 除/ 余% 自增++ 自减--</span></span><br><span class="line">	<span class="keyword">var</span> operator <span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">	operator++</span><br><span class="line">	fmt.Printf(<span class="string">"operator 的值为 %d\n"</span>, operator )</span><br><span class="line">	operator--</span><br><span class="line">	fmt.Printf(<span class="string">"operator 的值为 %d\n"</span>, operator )</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 关系运算符 判断 */</span></span><br><span class="line">	<span class="comment">// 相等== 不等!= 大于&gt; 小于&lt; 大于等于&gt;= 小于等于&lt;=</span></span><br><span class="line">	fmt.Println(<span class="number">21</span> == <span class="number">22</span>)</span><br><span class="line">	fmt.Println(<span class="number">21</span> != <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 逻辑运算符 */</span></span><br><span class="line">	<span class="comment">// 与(逻辑and)&amp;&amp; 或(逻辑or)|| 非(逻辑not)!</span></span><br><span class="line">	and1, and2 := <span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line">	<span class="keyword">if</span> (and1 &amp;&amp; and2) &#123;</span><br><span class="line">		fmt.Println(<span class="string">"条件为true"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (and1 || and2) &#123;</span><br><span class="line">		fmt.Println(<span class="string">"条件为true"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 位运算符 */</span></span><br><span class="line">	<span class="comment">// 按位与&amp; 按位或| 按位异或^ 左移&lt;&lt; 右移&gt;&gt;</span></span><br><span class="line">	<span class="keyword">var</span> example <span class="keyword">uint</span> = <span class="number">13</span> <span class="comment">// 13二进制 1101</span></span><br><span class="line">	fmt.Println(example &gt;&gt; <span class="number">1</span>) <span class="comment">// 右移1位 -&gt; 0110</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 赋值运算符</span></span><br><span class="line"><span class="comment">	运算符	描述	          实例</span></span><br><span class="line"><span class="comment">	=		简单的赋值运算符 C = A + B 将 A + B 表达式结果赋值给 C</span></span><br><span class="line"><span class="comment">	+=		相加后再赋值	  C += A 等于 C = C + A</span></span><br><span class="line"><span class="comment">	-=		相减后再赋值	  C -= A 等于 C = C - A</span></span><br><span class="line"><span class="comment">	*=		相乘后再赋值	  C *= A 等于 C = C * A</span></span><br><span class="line"><span class="comment">	/=		相除后再赋值	  C /= A 等于 C = C / A</span></span><br><span class="line"><span class="comment">	%=		求余后再赋值	  C %= A 等于 C = C % A</span></span><br><span class="line"><span class="comment">	&lt;&lt;=		左移后赋值	  C &lt;&lt;= 2 等于 C = C &lt;&lt; 2</span></span><br><span class="line"><span class="comment">	&gt;&gt;=		右移后赋值	  C &gt;&gt;= 2 等于 C = C &gt;&gt; 2</span></span><br><span class="line"><span class="comment">	&amp;=		按位与后赋值	  C &amp;= 2 等于 C = C &amp; 2</span></span><br><span class="line"><span class="comment">	^=		按位异或后赋值	  C ^= 2 等于 C = C ^ 2</span></span><br><span class="line"><span class="comment">	|=		按位或后赋值	  C |= 2 等于 C = C | 2</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 其他运算符</span></span><br><span class="line">	<span class="comment">// &amp;返回变量储存地址 *指针变量</span></span><br><span class="line">	var_tmp := <span class="number">99</span></span><br><span class="line">	fmt.Println(&amp;var_tmp) <span class="comment">// 指针地址</span></span><br><span class="line">	fmt.Println(*(&amp;var_tmp)) <span class="comment">// 指针的值</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">"谁大一点:"</span>, max(<span class="number">100</span>,<span class="number">99</span>))</span><br><span class="line"></span><br><span class="line">	swap_a ,swap_b := swap(<span class="string">"lang"</span>, <span class="string">"go"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"交换顺序"</span>, swap_a ,swap_b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 数组</span></span><br><span class="line">	<span class="keyword">var</span> balance1 [<span class="number">10</span>] <span class="keyword">float32</span></span><br><span class="line">	<span class="comment">// 赋值</span></span><br><span class="line">	<span class="keyword">var</span> balance2 = [...]<span class="keyword">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br><span class="line">	fmt.Println(balance1, balance2)</span><br><span class="line">	<span class="keyword">var</span> salary <span class="keyword">float32</span> = balance2[<span class="number">3</span>]</span><br><span class="line">	fmt.Println(salary)</span><br><span class="line"></span><br><span class="line">	array()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> book1 Books</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 结构体</span></span><br><span class="line">	book1.title = <span class="string">"三国演义"</span></span><br><span class="line">	book1.bookId = <span class="number">1</span></span><br><span class="line">	book1.author = <span class="string">"罗贯中"</span></span><br><span class="line">	book1.subject = <span class="string">"历史"</span></span><br><span class="line">	fmt.Println(book1)</span><br><span class="line">	<span class="comment">// 结构体指针</span></span><br><span class="line">	<span class="keyword">var</span> book_pointer *Books</span><br><span class="line">	book_pointer = &amp;book1</span><br><span class="line">	fmt.Println(book_pointer)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数返回两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="comment">/* 声明局部变量 */</span></span><br><span class="line">	<span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">		result = num1</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result = num2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值有多个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">array</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> n [<span class="number">10</span>]<span class="keyword">int</span> <span class="comment">/* n 是一个长度为 10 的数组 */</span></span><br><span class="line">	<span class="keyword">var</span> i,j <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 为数组 n 初始化元素 */</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		n[i] = i + <span class="number">100</span> <span class="comment">/* 设置元素为 i + 100 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">	<span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"Element[%d] = %d\n"</span>, j, n[j] )</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结构体 */</span></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">	title   <span class="keyword">string</span></span><br><span class="line">	author  <span class="keyword">string</span></span><br><span class="line">	subject <span class="keyword">string</span></span><br><span class="line">	bookId  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go语言</category>
        <category>基础练习</category>
      </categories>
      <tags>
        <tag>Go语言</tag>
        <tag>基础练习</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础练习一</title>
    <url>/2020/04/03/go-basis-exercise-1/</url>
    <content><![CDATA[<blockquote>
<h2 id="Go语言基础练习一"><a href="#Go语言基础练习一" class="headerlink" title="Go语言基础练习一"></a>Go语言基础练习一</h2></blockquote>
<p>以下是笔者学习Go语言基础的代码随笔，主要为数据类型与变量申明。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p>
<p>Go 语言按类别有以下几种数据类型：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">类型和描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	aa = <span class="literal">iota</span></span><br><span class="line">	bb = <span class="literal">iota</span></span><br><span class="line">	cc = <span class="literal">iota</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">test</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> test1 <span class="keyword">int16</span> = <span class="number">99</span></span><br><span class="line">	<span class="keyword">var</span> str1, str2 = <span class="string">"hhh"</span>, <span class="string">"eee"</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="literal">true</span></span><br><span class="line">	b := <span class="string">"sapphire"</span></span><br><span class="line">	c, d, e := <span class="string">"office"</span>, <span class="string">"word"</span>, <span class="string">"ppt"</span></span><br><span class="line">	fmt.Println(test1)</span><br><span class="line">	fmt.Println(str1)</span><br><span class="line">	fmt.Println(str2)</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	pointer := &amp;b</span><br><span class="line">	fmt.Println(&amp;b)</span><br><span class="line">	fmt.Println(c + d + e)</span><br><span class="line">	fmt.Println(pointer, <span class="string">"gogogo"</span>)</span><br><span class="line">	<span class="keyword">const</span> spr = <span class="string">"sapphire"</span></span><br><span class="line">	fmt.Println(<span class="string">"my name is:"</span>, spr)</span><br><span class="line">	fmt.Println(unsafe.Sizeof(spr))</span><br><span class="line">	fmt.Println(unsafe.Sizeof(test1))</span><br><span class="line">	fmt.Println(bb)</span><br><span class="line">	<span class="keyword">if</span> bb != <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"bb is not 0"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">uint</span> = <span class="number">60</span>      <span class="comment">/* 60 = 0011 1100 */</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">uint</span> = <span class="number">13</span>      <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">uint</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	c = a &amp; b       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第一行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a | b       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第二行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a ^ b       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第三行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a &lt;&lt; <span class="number">2</span>     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第四行 - c 的值为 %d\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	c = a &gt;&gt; <span class="number">2</span>     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第五行 - c 的值为 %d\n"</span>, c )</span><br><span class="line">	test3()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line">	str1 := <span class="string">"sapphire"</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">int32</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">float32</span></span><br><span class="line">	<span class="keyword">var</span> ptr *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 运算符实例 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"第 1 行 - a 变量类型为 = %T\n"</span>, a )</span><br><span class="line">	fmt.Printf(<span class="string">"第 2 行 - b 变量类型为 = %T\n"</span>, b )</span><br><span class="line">	fmt.Printf(<span class="string">"第 3 行 - c 变量类型为 = %T\n"</span>, c )</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*  &amp; 和 * 运算符实例 */</span></span><br><span class="line">	ptr = &amp;a     <span class="comment">/* 'ptr' 包含了 'a' 变量的地址 */</span></span><br><span class="line">	fmt.Printf(<span class="string">"a 的值为  %d\n"</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">"*ptr 为 %d\n"</span>, *ptr)</span><br><span class="line">	fmt.Printf(<span class="string">"name 为 %s\n"</span>, str1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go语言</category>
        <category>基础练习</category>
      </categories>
      <tags>
        <tag>Go语言</tag>
        <tag>数据类型</tag>
        <tag>基础练习</tag>
      </tags>
  </entry>
  <entry>
    <title>pearson相关系数</title>
    <url>/2020/02/26/pearson-formula/</url>
    <content><![CDATA[<p><strong>pearson相关系数</strong></p>
<p><img data-src="/picture/pearson%E5%85%AC%E5%BC%8F.png" alt="avatar"></p>
<p>公式定义为： 两个连续变量(X,Y)的pearson相关性系数(Px,y)等于它们之间的协方差cov(X,Y)除以它们各自标准差的乘积(σX,σY)。系数的取值总是在-1.0到1.0之间，接近0的变量被成为无相关性，接近1或者-1被称为具有强相关性。</p>
<p>简单来说，它用来衡量两个数据集合是否在一条线上面，是否有相关性，这在数据分析中是很有效的。</p>
<p>用python3实现：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pearson</span><span class="params">(vector1, vector2)</span>:</span></span><br><span class="line">    n = len(vector1)</span><br><span class="line">    <span class="comment">#simple sums</span></span><br><span class="line">    sum1 = sum(float(vector1[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    sum2 = sum(float(vector2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    <span class="comment">#sum up the squares</span></span><br><span class="line">    sum1_pow = sum([pow(v, <span class="number">2.0</span>) <span class="keyword">for</span> v <span class="keyword">in</span> vector1])</span><br><span class="line">    sum2_pow = sum([pow(v, <span class="number">2.0</span>) <span class="keyword">for</span> v <span class="keyword">in</span> vector2])</span><br><span class="line">    <span class="comment">#sum up the products</span></span><br><span class="line">    p_sum = sum([vector1[i]*vector2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">    <span class="comment">#分子num，分母den</span></span><br><span class="line">    num = p_sum - (sum1*sum2/n)</span><br><span class="line">    den = math.sqrt((sum1_pow-pow(sum1, <span class="number">2</span>)/n)*(sum2_pow-pow(sum2, <span class="number">2</span>)/n))</span><br><span class="line">    <span class="keyword">if</span> den == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">return</span> num/den</span><br></pre></td></tr></table></figure>
<p>选择两组数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vector1 &#x3D; [2, 7, 18, 88, 157, 90, 177, 570]</span><br><span class="line">vector2 &#x3D; [3, 5, 15, 90, 180, 88, 160, 580]</span><br><span class="line">print(&#39;result is: &#39; + int(pearson(vector1, vector2)))</span><br></pre></td></tr></table></figure>
<p>运行结果为0.998，可见这两组数是高度正相关的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result is: 0.998348748644</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;美国零售业有这样一个案例，美国沃尔玛百货将他们的纸尿裤和啤酒并排摆在一起销售，结果纸尿裤和啤酒的销量双双增长。<br>原来，美国的太太们常叮嘱她们的丈夫下班后为小孩买尿布，而丈夫们在买尿布后又随手带回了两瓶啤酒。<br>这一消费行为导致了这两件商品经常被同时购买。这其实是经过数据挖掘、趋势分析后做出的决策。</p>
<hr>
<p>参考：<a href="https://blog.csdn.net/AlexMerer/article/details/74908435" target="_blank" rel="noopener">统计学三大相关系数之皮尔森（pearson）相关系数</a><br>&emsp;&emsp;&emsp;<a href="https://www.jianshu.com/p/a8349052a2a0" target="_blank" rel="noopener">从啤酒和纸尿裤，你能想到什么？</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>大数据分析</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数中参数 * 和 ** 的区别</title>
    <url>/2019/11/26/python-single-double-asterisk/</url>
    <content><![CDATA[<p>在 Python 的函数中经常能看到输入的参数前面有一个或者两个星号，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(param1, *param2)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(param1, **param2)</span>:</span></span><br></pre></td></tr></table></figure>

<p>这两种用法其实都是用来将任意个数的参数导入到 Python 函数中。</p>
<a id="more"></a>

<h3 id="单星号（-）：-agrs"><a href="#单星号（-）：-agrs" class="headerlink" title="单星号（*）：*agrs"></a><strong>单星号（*）：*agrs</strong></h3><p>将所有参数以<code>元组(tuple)</code>的形式导入：</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(param1, *param2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (param1)</span><br><span class="line">    <span class="keyword">print</span> (param2)</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="双星号（-）：-kwargs"><a href="#双星号（-）：-kwargs" class="headerlink" title="双星号（*）：*kwargs"></a><strong>双星号（*）：*kwargs</strong></h3><p>双星号（**）将参数以<code>字典(dict)</code>的形式导入:</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(param1, **param2)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (param1)</span><br><span class="line">    <span class="keyword">print</span> (param2)</span><br><span class="line">bar(<span class="number">1</span>,a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">&#123;&#39;a&#39;: 2, &#39;b&#39;: 3&#125;</span><br></pre></td></tr></table></figure>

<p>此外，单星号的另一个用法是解压参数列表：</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(runoob_1, runoob_2)</span>:</span></span><br><span class="line">    print(runoob_1, runoob_2)</span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">foo(*l)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>当然这两个用法可以同时出现在一个函数中：</p>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a><strong>实例</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=<span class="number">10</span>, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (a)</span><br><span class="line">    <span class="keyword">print</span> (b)</span><br><span class="line">    <span class="keyword">print</span> (args)</span><br><span class="line">    <span class="keyword">print</span> (kwargs)</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, e=<span class="number">5</span>, f=<span class="number">6</span>, g=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">'e'</span>: <span class="number">5</span>, <span class="string">'f'</span>: <span class="number">6</span>, <span class="string">'g'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>基础原理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Git原理及实践</title>
    <url>/2019/11/12/git-basis/</url>
    <content><![CDATA[<h1 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么?"></a>Git是什么?</h1><h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><p>版本控制是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理，是软件配置管理的核心思想之一。</p>
<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h2><p><img data-src="/picture/git_logo.png" alt="avatar"><br>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS， Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<a id="more"></a>
<h2 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h2><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。<br>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。<br>Git 与 SVN 区别点：<br>1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。<br>2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。<br>3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。<br>4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。<br>5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>
<h1 id="Git的理论基础"><a href="#Git的理论基础" class="headerlink" title="Git的理论基础"></a>Git的理论基础</h1><ul>
<li>Git的四大工作区域</li>
<li>Git的工作流程</li>
<li>Git文件的四种状态</li>
<li>Git的工作原理</li>
</ul>
<h2 id="Git的四大工作区域"><a href="#Git的四大工作区域" class="headerlink" title="Git的四大工作区域"></a>Git的四大工作区域</h2><p><img data-src="/picture/git_4_workspace.png" alt="avatar"></p>
<ul>
<li><kbd style="color:#ff7600">Workspace</kbd>：你电脑本地看到的文件和目录，在Git的版本控制下，构成了工作区。</li>
<li><kbd style="color:#ff7600">Index/Stage</kbd>：暂存区，一般存放在 .git目录下，即.git/index，它又叫待提交更新区，用于临时存放你未提交的改动。比如，你执行git add，这些改动就添加到这个区域啦。</li>
<li><kbd style="color:#ff7600">Repository</kbd>：本地仓库，你执行git clone 地址，就是把远程仓库克隆到本地仓库。它是一个存放在本地的版本库，其中HEAD指向最新放入仓库的版本。当你执行git commit，文件改动就到本地仓库来了~</li>
<li><kbd style="color:#ff7600">Remote</kbd>：远程仓库，就是类似github，码云等网站所提供的仓库，可以理解为远程数据交换的仓库~</li>
</ul>
<h2 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h2><p><img data-src="/picture/git_work_process.png" alt="avatar"></p>
<h2 id="Git文件的四种状态"><a href="#Git文件的四种状态" class="headerlink" title="Git文件的四种状态"></a>Git文件的四种状态</h2><p>根据一个文件是否已加入版本控制，可以把文件状态分为：Tracked(已跟踪)和Untracked(未跟踪)，而tracked(已跟踪)又包括三种工作状态：Unmodified，Modified，Staged</p>
<p><img data-src="/picture/git_file_status.png" alt="avatar"></p>
<ul>
<li>Untracked: 文件还没有加入到git库，还没参与版本控制，即未跟踪状态。这时候的文件，通过git add 状态，可以变为Staged状态</li>
<li>Unmodified：文件已经加入git库， 但是呢，还没修改， 就是说版本库中的文件快照内容与文件夹中还完全一致。修改变为Modified. 可用git remove移出版本库， 变为Untracked。</li>
<li>Modified：文件被修改了，就进入modified状态啦，通过stage命令进入staged状态</li>
<li>staged：暂存状态. 执行git commit将修改同步到库中，这时库中的文件和本地文件变为一致，为Unmodified状态.</li>
</ul>
<h2 id="Git的工作原理"><a href="#Git的工作原理" class="headerlink" title="Git的工作原理"></a>Git的工作原理</h2><p><img data-src="/picture/git_work_principle.png" alt="avatar"></p>
<h1 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h1><h2 id="Git命令流程"><a href="#Git命令流程" class="headerlink" title="Git命令流程"></a>Git命令流程</h2><p>以下是命令使用的大致流程<br><img data-src="/picture/git_use_detail.png" alt="avatar"></p>
<h2 id="Git常用命令集"><a href="#Git常用命令集" class="headerlink" title="Git常用命令集"></a>Git常用命令集</h2><p>遇事不决查文档，<kbd style="color:#ff7600">git -help</kbd> + <kbd style="color:#ff7600">git command -help</kbd></p>
<h3 id="git-init-初始化仓库"><a href="#git-init-初始化仓库" class="headerlink" title="git init -初始化仓库"></a>git init -初始化仓库</h3><h3 id="git-clone-url-克隆远程版本库"><a href="#git-clone-url-克隆远程版本库" class="headerlink" title="git clone url -克隆远程版本库"></a>git clone url -克隆远程版本库</h3><h3 id="git-remote-add-newRemote-url-添加另一个远程仓库"><a href="#git-remote-add-newRemote-url-添加另一个远程仓库" class="headerlink" title="git remote add newRemote url -添加另一个远程仓库"></a>git remote add newRemote url -添加另一个远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] -添加仓库的高级版</span><br><span class="line">git remote [-v | --verbose] -查看远程所有仓库</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt; -重命名仓库名</span><br><span class="line">git remote remove &lt;name&gt; -移除本地绑定的远程仓库</span><br></pre></td></tr></table></figure>

<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b newBranch  [origin&#x2F;newBranch ] 创建开发分支dev，并切换到该分支下在上面基础上[并关联远程分支]</span><br><span class="line">git checkout [file]  丢弃某个文件file(还未add进暂存区)</span><br><span class="line">git checkout .  丢弃所有文件(还未add进暂存区)(已经add了则用reset)</span><br></pre></td></tr></table></figure>

<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .	添加当前目录的所有文件到暂存区</span><br><span class="line">git add [dir]	添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [file1]	添加指定文件到暂存区</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m [message] 提交暂存区到仓库区，message为说明信息</span><br><span class="line">git commit [file1] -m [message] 提交暂存区的指定文件到本地仓库</span><br><span class="line">git commit --amend -m [message] 使用一次新的commit，替代上一次提交</span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log  查看提交历史</span><br><span class="line">git log --oneline 以精简模式显示查看提交历史</span><br><span class="line">git log -p &lt;file&gt; 查看指定文件的提交历史</span><br><span class="line">git blame &lt;file&gt; 一列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>

<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff 显示暂存区和工作区的差异</span><br><span class="line">git diff filepath   filepath路径文件中，工作区与暂存区的比较差异</span><br><span class="line">git diff HEAD filepath 工作区与HEAD ( 当前工作分支)的比较差异</span><br><span class="line">git diff branchName filepath 当前分支的文件与branchName分支的文件的比较差异</span><br><span class="line">git diff commitId filepath 与某一次提交的比较差异</span><br></pre></td></tr></table></figure>

<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status  查看当前工作区暂存区变动</span><br><span class="line">git status -s  查看当前工作区暂存区变动，概要信息</span><br><span class="line">git status  --show-stash 查询工作区中是否有stash（暂存的文件）</span><br></pre></td></tr></table></figure>

<h3 id="git-pull-git-fetch"><a href="#git-pull-git-fetch" class="headerlink" title="git pull/git fetch"></a>git pull/git fetch</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull  拉取远程仓库所有分支更新并合并到本地分支。</span><br><span class="line">git pull origin master 将远程master分支合并到当前本地分支</span><br><span class="line">git pull origin master:master 将远程master分支合并到当前本地master分支，冒号后面表示本地分支</span><br><span class="line">git fetch --all  拉取所有远端的最新代码</span><br><span class="line">git fetch origin master 拉取远程最新master分支代码</span><br></pre></td></tr></table></figure>

<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master 将本地分支的更新全部推送到远程仓库master分支。</span><br><span class="line">git push origin -d &lt;branchname&gt;   删除远程branchname分支</span><br><span class="line">git push --tags 推送所有标签</span><br></pre></td></tr></table></figure>

<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p><em>使用模式：</em><br><img data-src="/picture/git_reset.png" alt="avatar"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD --file 回退暂存区里的某个文件，回退到当前版本工作区状态</span><br><span class="line">git reset –-soft 目标版本号 可以把版本库上的提交回退到暂存区，修改记录保留</span><br><span class="line">git reset –-mixed 目标版本号 可以把版本库上的提交回退到工作区，修改记录保留</span><br><span class="line">git reset –-hard  可以把版本库上的提交彻底回退，修改的记录全部revert。</span><br></pre></td></tr></table></figure>
<p>代码git add到暂存区，并未commit提交，如何回退：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD file 取消暂存</span><br><span class="line">git checkout file 撤销修改</span><br></pre></td></tr></table></figure>

<h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name  &quot;username&quot;</span><br><span class="line">git config --global user.email  &quot;username&quot;</span><br></pre></td></tr></table></figure>

<h4 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config –system –unset credential.helper</span><br><span class="line">git config –global http.emptyAuth true</span><br></pre></td></tr></table></figure>

<h4 id="Windows凭据管理-git-密码"><a href="#Windows凭据管理-git-密码" class="headerlink" title="Windows凭据管理 git 密码"></a>Windows凭据管理 git 密码</h4><p>进入控制面板 -&gt; 用户账号 -&gt; 凭据管理器 -&gt; windows凭据 -&gt; 普通凭据，在里面找到对应git域名，点开编辑密码，更新为最新密码之后就可以正常操作了。</p>
<hr>
<p>参考链接：<br><a href="https://git-scm.com/docs" target="_blank" rel="noopener">Git Reference</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git Book</a>  </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>平平淡淡的一天</title>
    <url>/2019/10/19/first-blog/</url>
    <content><![CDATA[<h1 id="我的一天："><a href="#我的一天：" class="headerlink" title="我的一天：  "></a>我的一天：  </h1><hr>
<p>上午：改bug  </p>
<hr>
<p>下午：<del><strong>摸摸鱼</strong></del> 远程学习</p>
<hr>
<p>晚上：打FF14  </p>
<hr>
<p><img data-src="/picture/first.jpg" alt="avatar"></p>
<hr>
]]></content>
      <categories>
        <category>摸鱼随笔</category>
      </categories>
      <tags>
        <tag>第一条博客</tag>
        <tag>非技术</tag>
      </tags>
  </entry>
</search>
