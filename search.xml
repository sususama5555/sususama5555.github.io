<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python之使用pyvmomi管理VMware</title>
    <url>/2020/11/17/pyvmomi-sample/</url>
    <content><![CDATA[<blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></blockquote>
<p>官方定义：</p>
<p>pyVmomi is the Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter.</p>
<p><a href="https://link.jianshu.com/?t=https://github.com/vmware/pyvmomi/" target="_blank" rel="noopener">pyVmomi</a> 是 VMware vSphere API 的一个 Python sdk，我们可以利用它来管理与交互vCenter、ESX、ESXi，获取我们需要的信息。</p>
<p>由于工作中需要对接vCenter，实现虚拟化平台、数据中心、物理机、物理机和存储的指标采集及监控，也需要通过启停虚拟机网卡来实现灾备切换，所以本文结合了笔者的经验和 pyVmomi 官方案例。</p>
<a id="more"></a>

<p>VMware vSphere 架构图：</p>
<img data-src="/2020/11/17/pyvmomi-sample/vsphere.png" class>

<blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3></blockquote>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>笔者基于 Python3.6.7 与 pyVmomi6.5.0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyVmomi==6.5.0</span><br></pre></td></tr></table></figure>

<p>VMware vSphere 版本：6.5</p>
<h3 id="连接-vSphere"><a href="#连接-vSphere" class="headerlink" title="连接 vSphere"></a>连接 vSphere</h3><p>我这里定义了一个基础的类，使用vCenter的地址、账号（默认管理员为<a href="mailto:administrator@vsphere.local">administrator@vsphere.local</a>）及密码实例化后，可以使用连接、断开连接、根据vSphere中唯一标识获取对应实例，及监控任务结果的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> pyVim <span class="keyword">import</span> connect</span><br><span class="line"><span class="keyword">from</span> ssl <span class="keyword">import</span> SSLEOFError</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vSphereBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    与vCenter交互的基类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user, pwd, host)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.user = user</span><br><span class="line">        self.pwd = pwd</span><br><span class="line">        </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_connect_vc_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 支持SSL连接和非SSL连接 """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)</span><br><span class="line">            context.verify_mode = ssl.CERT_NONE</span><br><span class="line">            si = SmartConnect(host=self.host, user=self.user, pwd=self.pwd, port=<span class="number">443</span>, sslContext=context)</span><br><span class="line">            <span class="keyword">return</span> si, <span class="string">"connect VC success with SSL"</span></span><br><span class="line">        <span class="keyword">except</span> SSLEOFError:</span><br><span class="line">            context = ssl._create_unverified_context()</span><br><span class="line">            context.verify_mode = ssl.CERT_NONE</span><br><span class="line">            si = SmartConnect(host=self.host, user=self.user, pwd=self.pwd, port=<span class="number">443</span>, sslContext=context)</span><br><span class="line">            <span class="keyword">return</span> si, <span class="string">"connect VC success without SSL"</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, e</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deconnect_vc</span><span class="params">(self, si)</span>:</span></span><br><span class="line">        connect.Disconnect(si)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_content</span><span class="params">(self)</span>:</span></span><br><span class="line">        si = self._connect_vc()</span><br><span class="line">        content = si.RetrieveContent()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_obj_bymoId</span><span class="params">(self, content, vimtype, moId)</span>:</span></span><br><span class="line">        obj = <span class="literal">None</span></span><br><span class="line">        container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> container.view:</span><br><span class="line">            <span class="keyword">if</span> moId:</span><br><span class="line">                <span class="keyword">if</span> c._moId == moId:</span><br><span class="line">                    obj = c</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                obj = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_obj</span><span class="params">(self, content, vimtype, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return an object by name, if name is None the</span></span><br><span class="line"><span class="string">        first found object is returned</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        obj = <span class="literal">None</span></span><br><span class="line">        container = content.viewManager.CreateContainerView(</span><br><span class="line">            content.rootFolder, vimtype, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> container.view:</span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                <span class="keyword">if</span> c.name == name:</span><br><span class="line">                    obj = c</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                obj = c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_wait_for_task</span><span class="params">(self, task)</span>:</span></span><br><span class="line">        <span class="string">""" wait for a vCenter task to finish """</span></span><br><span class="line">        task_done = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> task_done:</span><br><span class="line">            <span class="keyword">if</span> task.info.state == <span class="string">'success'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">True</span>, <span class="string">"data"</span>: task.info.result&#125;</span><br><span class="line">            <span class="keyword">if</span> task.info.state == <span class="string">'error'</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"data"</span>: task.info.error.msg&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Example：虚拟机网卡启停"><a href="#Example：虚拟机网卡启停" class="headerlink" title="Example：虚拟机网卡启停"></a>Example：虚拟机网卡启停</h3><p>以下定义了一个虚拟机的类，继承 vSphere 的基类，在切换虚拟机网络适配器状态的方法中，传入虚拟机的名称、网卡的编号，以及该网卡需要做connect还是disconnect变更，就可以实现该需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"><span class="keyword">from</span> pyVmomi <span class="keyword">import</span> vim</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> pyVim.task <span class="keyword">import</span> WaitForTask</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtualMachine</span><span class="params">(vSphereBase)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">change_nic_state</span><span class="params">(self, vmname, unitnumber, state)</span>:</span></span><br><span class="line">        <span class="comment"># 更改虚拟机网络适配器状态</span></span><br><span class="line">        si, message = self._connect_vc_exception_message()</span><br><span class="line">        <span class="keyword">if</span> si <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            logger.error(str(message))</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"message"</span>: str(message)&#125;</span><br><span class="line">        logger.info(str(message))</span><br><span class="line">        <span class="comment"># disconnect vc</span></span><br><span class="line">        atexit.register(Disconnect, si)</span><br><span class="line"></span><br><span class="line">        content = si.RetrieveContent()</span><br><span class="line">        logger.info(<span class="string">'Searching for VM &#123;&#125;'</span>.format(vmname))</span><br><span class="line">        vm_obj = self.get_obj(content, [vim.VirtualMachine], vmname)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> vm_obj:</span><br><span class="line">            result = self.update_virtual_nic_state(vm_obj, unitnumber, state)</span><br><span class="line">            logger.info(<span class="string">'VM NIC &#123;&#125; successfully'</span> \</span><br><span class="line">                        <span class="string">' state changed to &#123;&#125;'</span>.format(unitnumber, state))</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: result&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">'VM not found'</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"message"</span>: <span class="string">"VM not found"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_virtual_nic_state</span><span class="params">(self, vm_obj, nic_number, new_nic_state)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param vm_obj: Virtual Machine Object</span></span><br><span class="line"><span class="string">        :param nic_number: Network Interface Controller Number</span></span><br><span class="line"><span class="string">        :param new_nic_state: Either Connect, Disconnect or Delete</span></span><br><span class="line"><span class="string">        :return: True if success</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nic_prefix_label = <span class="string">'Network adapter '</span></span><br><span class="line">        nic_label = nic_prefix_label + str(nic_number)</span><br><span class="line">        virtual_nic_device = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> vm_obj.config.hardware.device:</span><br><span class="line">            <span class="keyword">if</span> isinstance(dev, vim.vm.device.VirtualEthernetCard) \</span><br><span class="line">                    <span class="keyword">and</span> dev.deviceInfo.label == nic_label:</span><br><span class="line">                virtual_nic_device = dev</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> virtual_nic_device:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Virtual &#123;&#125; could not be found.'</span>.format(nic_label))</span><br><span class="line"></span><br><span class="line">        virtual_nic_spec = vim.vm.device.VirtualDeviceSpec()</span><br><span class="line">        virtual_nic_spec.operation = \</span><br><span class="line">            vim.vm.device.VirtualDeviceSpec.Operation.remove \</span><br><span class="line">                <span class="keyword">if</span> new_nic_state == <span class="string">'delete'</span> \</span><br><span class="line">                <span class="keyword">else</span> vim.vm.device.VirtualDeviceSpec.Operation.edit</span><br><span class="line">        virtual_nic_spec.device = virtual_nic_device</span><br><span class="line">        virtual_nic_spec.device.key = virtual_nic_device.key</span><br><span class="line">        virtual_nic_spec.device.macAddress = virtual_nic_device.macAddress</span><br><span class="line">        virtual_nic_spec.device.backing = virtual_nic_device.backing</span><br><span class="line">        virtual_nic_spec.device.wakeOnLanEnabled = \</span><br><span class="line">            virtual_nic_device.wakeOnLanEnabled</span><br><span class="line">        connectable = vim.vm.device.VirtualDevice.ConnectInfo()</span><br><span class="line">        <span class="keyword">if</span> new_nic_state == <span class="string">'connect'</span>:</span><br><span class="line">            connectable.connected = <span class="literal">True</span></span><br><span class="line">            connectable.startConnected = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> new_nic_state == <span class="string">'disconnect'</span>:</span><br><span class="line">            connectable.connected = <span class="literal">False</span></span><br><span class="line">            connectable.startConnected = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            connectable = virtual_nic_device.connectable</span><br><span class="line">        virtual_nic_spec.device.connectable = connectable</span><br><span class="line">        dev_changes = []</span><br><span class="line">        dev_changes.append(virtual_nic_spec)</span><br><span class="line">        spec = vim.vm.ConfigSpec()</span><br><span class="line">        spec.deviceChange = dev_changes</span><br><span class="line">        task = vm_obj.ReconfigVM_Task(spec=spec)</span><br><span class="line">        WaitForTask(task)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>在上文定义了实例化 vSphere 和切换网卡的方法后，我们使用以下代码进行调用，由于对比简单，这里不进行赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    account = <span class="string">"1.1.1.1"</span></span><br><span class="line">    password = <span class="string">"administrator@vsphere.local"</span></span><br><span class="line">    vc_host = <span class="string">"xxxxxx"</span></span><br><span class="line">    <span class="comment"># 连接vSphere，生成vSphere的实例</span></span><br><span class="line">    vm = vSphereBase(account, password, vc_host)</span><br><span class="line">    <span class="comment"># 对该vSphere中的虚拟机进行网卡变更，返回结果</span></span><br><span class="line">    vm_name = <span class="string">"device-192.168.1.1"</span></span><br><span class="line">    unit_number = <span class="number">1</span></span><br><span class="line">    vm_state = <span class="string">"disconnect"</span></span><br><span class="line">    result = vm.change_nic_state(vm_name, unit_number, vm_state)</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于VMware vSphere中设备众多，且有层级嵌套的关联关系，官方只提供了所有的接口文档和少量案例，更多需求额实现需要自己去开发，就如上文中的描述，首先连接vSphere（vCenter），然后针对需要的概念模型进行数据采集或者操作变更。</p>
<hr>
<p><strong><em>官方文档：</em></strong><br><a href="https://github.com/vmware/pyvmomi/" target="_blank" rel="noopener">Github pyvmomi 官方地址</a><br><a href="https://github.com/vmware/pyvmomi-community-samples/" target="_blank" rel="noopener">Github pyvmomi samples 官方实例</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>VMware vSphere</tag>
        <tag>vCenter</tag>
        <tag>虚拟化</tag>
        <tag>Python</tag>
        <tag>pyvmomi</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis修炼之使用场景</title>
    <url>/2020/11/16/redis-use-case/</url>
    <content><![CDATA[<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>接着Redis数据类型来说，来谈谈Redis的具体使用场景，首先回顾一下：</p>
<p>Redis是一种基于键值对的NoSQL数据库，它的值主要由string（字符串），hash（哈希），list（列表），set（集合），zset（有序集合）五种基本数据结构构成。那么这些数据结构的使用场景有哪些？以下将用内部编码及使用场景的方式浅析Redis的五种数据类型。</p>
<a id="more"></a>


<blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2></blockquote>
<h3 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一 字符串"></a><strong>一 字符串</strong></h3><p>字符串类型是Redis最基础的数据结构，字符串类型可以是<code>JSON</code>、<code>XML</code>甚至是二进制的图片等数据，但是最大值不能超过512MB。</p>
<h4 id="1-1-内部编码"><a href="#1-1-内部编码" class="headerlink" title="1.1 内部编码"></a><strong>1.1 内部编码</strong></h4><p>Redis会根据当前值的类型和长度决定使用哪种内部编码来实现。</p>
<p>字符串类型的内部编码有3种：</p>
<ul>
<li>int：8个字节的长整型。</li>
<li>embstr：小于等于39个字节的字符串。</li>
<li>raw：大于39个字节的字符串。</li>
</ul>
<h4 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a><strong>1.2 使用场景</strong></h4><h5 id="1-2-1-缓存"><a href="#1-2-1-缓存" class="headerlink" title="1.2.1 缓存"></a>1.2.1 缓存</h5><p>在web服务中，使用MySQL作为数据库，Redis作为缓存。由于Redis具有支撑高并发的特性，通常能起到加速读写和降低后端压力的作用。web端的大多数请求都是从Redis中获取的数据，如果Redis中没有需要的数据，则会从MySQL中去获取，并将获取到的数据写入redis。</p>
<h5 id="1-2-2-计数"><a href="#1-2-2-计数" class="headerlink" title="1.2.2 计数"></a>1.2.2 计数</h5><p>Redis中有一个字符串相关的命令<code>incr key</code>，<code>incr</code>命令对值做自增操作，返回结果分为以下三种情况：</p>
<ul>
<li>值不是整数，返回错误</li>
<li>值是整数，返回自增后的结果</li>
<li>key不存在，默认键为<code>0</code>，返回<code>1</code></li>
</ul>
<p>比如文章的阅读量，视频的播放量等等都会使用redis来计数，每播放一次，对应的播放量就会加1，同时将这些数据异步存储到数据库中达到持久化的目的。</p>
<h5 id="1-2-3-共享Session"><a href="#1-2-3-共享Session" class="headerlink" title="1.2.3 共享Session"></a>1.2.3 共享Session</h5><p>在分布式系统中，用户的每次请求会访问到不同的服务器，这就会导致session不同步的问题，假如一个用来获取用户信息的请求落在A服务器上，获取到用户信息后存入session。下一个请求落在B服务器上，想要从session中获取用户信息就不能正常获取了，因为用户信息的session在服务器A上，为了解决这个问题，使用redis集中管理这些session，将session存入redis，使用的时候直接从redis中获取就可以了。</p>
<h5 id="1-2-4-限速"><a href="#1-2-4-限速" class="headerlink" title="1.2.4 限速"></a>1.2.4 限速</h5><p>为了安全考虑，有些网站会对IP进行限制，限制同一IP在一定时间内访问次数不能超过n次。</p>
<h3 id="二-哈希"><a href="#二-哈希" class="headerlink" title="二 哈希"></a><strong>二 哈希</strong></h3><p>Redis中，哈希类型是指一个键值对的存储结构。</p>
<h4 id="2-1-内部编码"><a href="#2-1-内部编码" class="headerlink" title="2.1 内部编码"></a><strong>2.1 内部编码</strong></h4><p>哈希类型的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当哈希类型元素个数小于<code>hash-max-ziplist-entries</code>配置（默认512个）同时所有值都小于<code>hash-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，所以比hashtable更加节省内存。</li>
<li>hashtable（哈希表）：当ziplist不能满足要求时，会使用hashtable。</li>
</ul>
<h4 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a><strong>2.2 使用场景</strong></h4><p>由于hash类型存储的是一个键值对，比如数据库有以下一个用户表结构</p>
<table>
<thead>
<tr>
<th align="left">id</th>
<th align="left">name</th>
<th align="left">age</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">豆豆</td>
<td align="left">24</td>
</tr>
</tbody></table>
<p>将以上信息存入redis，用表明:id作为key，用户属性作为值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset user:1 name 豆豆 age 24</span><br></pre></td></tr></table></figure>

<p>使用哈希存储会比字符串更加方便直观</p>
<h3 id="三-列表"><a href="#三-列表" class="headerlink" title="三 列表"></a><strong>三 列表</strong></h3><p>列表类型用来存储多个<strong>有序</strong>的字符串，一个列表最多可以存储<code>2^32-1</code>个元素，列表的两端都可以插入和弹出元素。</p>
<h4 id="3-1-内部编码"><a href="#3-1-内部编码" class="headerlink" title="3.1 内部编码"></a><strong>3.1 内部编码</strong></h4><p>列表的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当哈希类型元素个数小于<code>list-max-ziplist-entries</code>配置（默认512个）同时所有值都小于<code>list-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，所以比hashtable更加节省内存。</li>
<li>linkedlist（链表）：当ziplist不能满足要求时，会使用linkedlist。</li>
</ul>
<h4 id="3-2-使用场景"><a href="#3-2-使用场景" class="headerlink" title="3.2 使用场景"></a><strong>3.2 使用场景</strong></h4><h5 id="3-2-1-消息队列"><a href="#3-2-1-消息队列" class="headerlink" title="3.2.1 消息队列"></a>3.2.1 消息队列</h5><p>列表用来存储多个有序的字符串，既然是有序的，那么就满足消息队列的特点。使用<code>lpush</code>+<code>rpop</code>或者<code>rpush</code>+<code>lpop</code>实现消息队列。除此之外，redis支持阻塞操作，在弹出元素的时候使用阻塞命令来实现阻塞队列。</p>
<p>在蓝鲸SaaS开发中，Django的Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ、Redis等等。SaaS的本地开发中，Celery也默认选择了Redis作为消息队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Celery 消息队列设置 RabbitMQ</span></span><br><span class="line"><span class="comment"># BROKER_URL = 'amqp://guest:guest@localhost:5672//'</span></span><br><span class="line"><span class="comment"># Celery 消息队列设置 Redis</span></span><br><span class="line">BROKER_URL = <span class="string">"redis://localhost:6379/0"</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2-2-栈"><a href="#3-2-2-栈" class="headerlink" title="3.2.2 栈"></a>3.2.2 栈</h5><p>由于列表存储的是有序字符串，满足队列的特点，也就能满足栈先进后出的特点，使用<code>lpush</code>+<code>lpop</code>或者<code>rpush</code>+<code>rpop</code>实现栈。</p>
<h5 id="3-2-3-文章列表"><a href="#3-2-3-文章列表" class="headerlink" title="3.2.3 文章列表"></a>3.2.3 文章列表</h5><p>因为列表的元素不但是有序的，而且还支持按照索引范围获取元素。因此我们可以使用命令<code>lrange key 0 9</code>分页获取文章列表</p>
<h3 id="四-集合"><a href="#四-集合" class="headerlink" title="四 集合"></a><strong>四 集合</strong></h3><p>集合类型也可以保存多个字符串元素，与列表不同的是，集合中不允许有重复元素并且集合中的元素是无序的。一个集合最多可以存储<code>2^32-1</code>个元素。</p>
<h4 id="4-1-内部编码"><a href="#4-1-内部编码" class="headerlink" title="4.1 内部编码"></a><strong>4.1 内部编码</strong></h4><p>集合类型的内部编码有两种：</p>
<ul>
<li>intset（整数集合）：当集合中的元素都是整数且元素个数小于<code>set-max-intset-entries</code>配置（默认512个）时，redis会选用intset来作为集合的内部实现，从而减少内存的使用。</li>
<li>hashtable（哈希表）：当intset不能满足要求时，会使用hashtable。</li>
</ul>
<h4 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a><strong>4.2 使用场景</strong></h4><h5 id="4-2-1-用户标签"><a href="#4-2-1-用户标签" class="headerlink" title="4.2.1 用户标签"></a>4.2.1 用户标签</h5><p>例如一个用户对篮球、足球感兴趣，另一个用户对橄榄球、乒乓球感兴趣，这些兴趣点就是一个标签。有了这些数据就可以得到喜欢同一个标签的人，以及用户的共同感兴趣的标签。给用户打标签的时候需要①给用户打标签，②给标签加用户，需要给这两个操作增加事务。</p>
<ul>
<li>给用户打标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd user:1:tags tag1 tag2</span><br></pre></td></tr></table></figure>

<ul>
<li>给标签添加用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd tag1:users user:1</span><br><span class="line">sadd tag2:users user:1</span><br></pre></td></tr></table></figure>

<p>使用交集（sinter）求两个user的共同标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinter user:1:tags user:2:tags</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-抽奖功能"><a href="#4-2-2-抽奖功能" class="headerlink" title="4.2.2 抽奖功能"></a>4.2.2 抽奖功能</h5><p>集合有两个命令支持获取随机数，分别是：</p>
<ul>
<li>随机获取count个元素，集合元素个数不变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure>

<ul>
<li>随机弹出count个元素，元素从集合弹出，集合元素个数改变</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure>

<p>用户点击抽奖按钮，参数抽奖，将用户编号放入集合，然后抽奖，分别抽一等奖、二等奖，如果已经抽中一等奖的用户不能参数抽二等奖则使用<code>spop</code>，反之使用<code>srandmember</code>。</p>
<h3 id="五-有序集合"><a href="#五-有序集合" class="headerlink" title="五 有序集合"></a><strong>五 有序集合</strong></h3><p>有序集合和集合一样，不能有重复元素。但是可以排序，它给每个元素设置一个score作为排序的依据。最多可以存储<code>2^32-1</code>个元素。</p>
<h4 id="5-1-内部编码"><a href="#5-1-内部编码" class="headerlink" title="5.1 内部编码"></a><strong>5.1 内部编码</strong></h4><p>有序集合类型的内部编码有两种：</p>
<ul>
<li>ziplist（压缩列表）：当有序集合的元素个数小于<code>list-max-ziplist-entries</code>配置（默认128个）同时所有值都小于<code>list-max-ziplist-value</code>配置（默认64字节）时使用。ziplist使用更加紧凑的结构实现多个元素的连续存储，更加节省内存。</li>
<li>skiplist（跳跃表）：当不满足ziplist的要求时，会使用skiplist。</li>
</ul>
<h4 id="5-2-使用场景"><a href="#5-2-使用场景" class="headerlink" title="5.2 使用场景"></a><strong>5.2 使用场景</strong></h4><h5 id="5-2-1-排行榜"><a href="#5-2-1-排行榜" class="headerlink" title="5.2.1 排行榜"></a>5.2.1 排行榜</h5><p>用户发布了n篇文章，其他人看到文章后给喜欢的文章点赞，使用score来记录点赞数，有序集合会根据score排行。流程如下</p>
<p>用户发布一篇文章，初始点赞数为0，即score为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd user:article 0 a</span><br></pre></td></tr></table></figure>

<p>有人给文章a点赞，递增<code>1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zincrby user:article 1 a</span><br></pre></td></tr></table></figure>

<p>查询点赞前三篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrevrangebyscore user:article 0 2</span><br></pre></td></tr></table></figure>

<p>查询点赞后三篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrangebyscore user:article 0 2</span><br></pre></td></tr></table></figure>

<h5 id="5-2-2-延迟消息队列"><a href="#5-2-2-延迟消息队列" class="headerlink" title="5.2.2 延迟消息队列"></a>5.2.2 延迟消息队列</h5><p>下单系统，下单后需要在15分钟内进行支付，如果15分钟未支付则自动取消订单。将下单后的十五分钟后时间作为score，订单作为value存入redis，消费者轮询去消费，如果消费的大于等于这笔记录的score，则将这笔记录移除队列，取消订单。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>在开发中，字符串类型是用的最多的数据类型，导致我们忽视了redis的其他四种数据类型，在具体场景下选择具体的数据类型对提升redis性能有非常大的帮助。redis虽然支持消息队列的实现，但是并不支持ack。所以redis实现的消息队列不能保证消息的可靠性，除非自己实现消息确认机制，不过这非常麻烦，所以如果是重要的消息还是推荐使用专门的消息队列去做，如RabbitMQ、RocketMQ。</p>
<hr>
<p>参考链接：<a href="https://mp.weixin.qq.com/s/FsL-54ALoNUAPcft-u8Leg?v_p=86&WBAPIAnalysisOriUICodes=10000001_10000002&launchid=10000365--x&wm=3333_2001&aid=01A0GdQv0UejmN65Ntcd4pBeamMWOPan5tHaY8rK5tZGJgPOs.&from=10AA393010" target="_blank" rel="noopener">Redis 五大数据类型使用场景</a>  </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Redis使用场景</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis修炼之数据类型</title>
    <url>/2020/11/12/redis-data-types/</url>
    <content><![CDATA[<blockquote>
<p>一、Redis 数据类型:</p>
</blockquote>
<p><strong>1、String（字符串）</strong><br>string 是 Redis 最基本的类型，理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>
<p><strong>2、Hash（哈希）</strong><br>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>
<a id="more"></a>

<p><strong>3、List（列表）</strong><br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>ps：可以使用List实现简单消息队列</p>
<p><strong>4、Set（集合）</strong><br>Redis 的 Set 是 string 类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
<p><strong>5、zset(sorted set：有序集合)</strong><br>Redis zset 和 set 一样也是string类型元素的集合，且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的，但分数(score)却可以重复。</p>
<blockquote>
<p>二、各个数据类型应用场景:</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>简介</th>
<th>特性</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>String(字符串)</td>
<td>二进制安全</td>
<td>可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512M</td>
<td>- - -</td>
</tr>
<tr>
<td>Hash(字典)</td>
<td>键值对集合，即编程语言中的Map类型</td>
<td>适合存储对象，并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>
<td>存储、读取、修改用户属性</td>
</tr>
<tr>
<td>List(列表)</td>
<td>链表(双向链表)</td>
<td>增删快，提供了操作某一段元素的API</td>
<td>1，最新消息排行等功能(比如朋友圈的时间线) 2，消息队列</td>
</tr>
<tr>
<td>Set(集合)</td>
<td>哈希表实现，元素不重复</td>
<td>1、添加、删除，查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td>
<td>1、共同好友 2、利用唯一性，统计访问网站的所有独立ip 3、好友推荐时，根据tag求交集，大于某个阈值就可以推荐</td>
</tr>
<tr>
<td>Sorted Set(有序集合)</td>
<td>将Set中的元素增加一个权重参数score，元素按score有序排列</td>
<td>数据插入集合时，已经进行天然排序</td>
<td>1、排行榜 2、带权重的消息队列</td>
</tr>
</tbody></table>
<blockquote>
<p>三、注意:</p>
</blockquote>
<p>&emsp;&emsp;Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p>
<p>&emsp;&emsp;Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p>
<p>&emsp;&emsp;每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">redis [1] &gt; GET foo</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;然而这些以数字命名的数据库又与我们理解的数据库有所区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内在只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p>
<hr>
<p>参考链接：<a href="https://www.runoob.com/redis/redis-data-types.html" target="_blank" rel="noopener">菜鸟教程——Redis数据类型</a>  </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis修炼</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>数据库</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中构建MySql连接池</title>
    <url>/2020/11/09/python-mysql-pool/</url>
    <content><![CDATA[<blockquote>
<p><b>背景：为何要使用连接池</b></p>
</blockquote>
<p>数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。</p>
<a id="more"></a>

<blockquote>
<p><b>连接池的概念</b></p>
</blockquote>
<p>数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对连接池中的连接进行申请，使用，释放。<br>创建数据库连接池是一个很耗时的操作，也容易对数据库造成安全隐患。所以，在程序初始化的时候，集中创建多个数据库连接池，并把他们集中管理，供程序使用，可以保证较快的数据库读写速度，还更加的安全可靠。</p>
<blockquote>
<p><b>影响因素</b></p>
</blockquote>
<p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数制约。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：</p>
<ul>
<li>最小连接数：<br>是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。</li>
<li>最大连接数：<br>是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。</li>
<li>最小连接数与最大连接数差距：<br>最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。</li>
</ul>
<blockquote>
<p><b>python实现</b></p>
</blockquote>
<p>使用 python 模块 <kbd style="color:#ff7600">DBUtils</kbd> 来实现</p>
<ul>
<li>mincached: 最小空闲连接数</li>
<li>maxcached: 最大空闲连接数</li>
<li>maxconnections: 最大允许连接数</li>
</ul>
<p><strong><em>数据库配置config.py:</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File  :config.py</span></span><br><span class="line"><span class="string">@Author:Sapphire</span></span><br><span class="line"><span class="string">@Date  :2020/11/9 15:06</span></span><br><span class="line"><span class="string">@Desc  :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">DBHOST = <span class="string">"localhost"</span></span><br><span class="line">DBPORT = <span class="number">3306</span></span><br><span class="line">DBUSER = <span class="string">"root"</span></span><br><span class="line">DBPWD = <span class="string">"xxxxx"</span></span><br><span class="line">DBNAME = <span class="string">"xxxxx"</span></span><br><span class="line">DBCHAR = <span class="string">"utf8"</span></span><br></pre></td></tr></table></figure>

<p><strong><em>连接池实现，与实现mysql查询、插入、更新、删除数据，及事务等功能：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@File  :mysql_pool.py</span></span><br><span class="line"><span class="string">@Author:Sapphire</span></span><br><span class="line"><span class="string">@Date  :2020/11/9 15:02</span></span><br><span class="line"><span class="string">@Desc  :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1、执行带参数的SQL时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</span></span><br><span class="line"><span class="string">２、在格式SQL中不需要使用引号指定数据类型，系统会根据输入参数自动识别</span></span><br><span class="line"><span class="string">３、在输入的值中不需要使用转意函数，系统会自动处理</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">from</span> MySQLdb.cursors <span class="keyword">import</span> DictCursor</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="comment"># from PooledDB import PooledDB</span></span><br><span class="line"><span class="keyword">import</span> mysql_pool.config <span class="keyword">as</span> Config</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> home_application.models <span class="keyword">import</span> AlarmDBConfig</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class="line"><span class="string">    释放连接对象：conn.close()或del conn</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 连接池对象</span></span><br><span class="line">    __pool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class="line">        self._conn = Mysql.__getConn()</span><br><span class="line">        self._cursor = self._conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getConn</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class="line"><span class="string">        @return MySQLdb.connection</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> Mysql.__pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            __pool = PooledDB(creator=MySQLdb, mincached=<span class="number">1</span>, maxcached=<span class="number">20</span>,</span><br><span class="line">                              host=Config.DBHOST, port=Config.DBPORT,</span><br><span class="line">                              user=Config.DBUSER,</span><br><span class="line">                              passwd=Config.DBPWD, db=Config.DBNAME, use_unicode=<span class="literal">False</span>,</span><br><span class="line">                              charset=Config.DBCHAR, cursorclass=DictCursor)</span><br><span class="line">        <span class="keyword">return</span> __pool.connection()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAll</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出所有结果集</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchall()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出第一条</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchone()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMany</span><span class="params">(self, sql, num, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 执行查询，并取出num条结果</span></span><br><span class="line"><span class="string">        @param sql:查询SQL，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class="line"><span class="string">        @param num:取得的结果条数</span></span><br><span class="line"><span class="string">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class="line"><span class="string">        @return: result list/boolean 查询到的结果集</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            result = self._cursor.fetchmany(num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertOne</span><span class="params">(self, sql, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 向数据表插入一条记录</span></span><br><span class="line"><span class="string">        @param sql:要插入的SQL格式</span></span><br><span class="line"><span class="string">        @param value:要插入的记录数据tuple/list</span></span><br><span class="line"><span class="string">        @return: insertId 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cursor.execute(sql, value)</span><br><span class="line">        <span class="keyword">return</span> self.__getInsertId()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertMany</span><span class="params">(self, sql, values)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 向数据表插入多条记录</span></span><br><span class="line"><span class="string">        @param sql:要插入的SQL格式</span></span><br><span class="line"><span class="string">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = self._cursor.executemany(sql, values)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getInsertId</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取当前连接最后一次插入操作生成的id,如果没有则为０</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cursor.execute(<span class="string">"SELECT @@IDENTITY AS id"</span>)</span><br><span class="line">        result = self._cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>][<span class="string">'id'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__query</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> param <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            count = self._cursor.execute(sql)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = self._cursor.execute(sql, param)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 更新数据表记录</span></span><br><span class="line"><span class="string">        @param sql: SQL格式及条件，使用(%s,%s)</span></span><br><span class="line"><span class="string">        @param param: 要更新的  值 tuple/list</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__query(sql, param)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, sql, param=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 删除数据表记录</span></span><br><span class="line"><span class="string">        @param sql: SQL格式及条件，使用(%s,%s)</span></span><br><span class="line"><span class="string">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class="line"><span class="string">        @return: count 受影响的行数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.__query(sql, param)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 开启事务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._conn.autocommit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self, option=<span class="string">'commit'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 结束事务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> option == <span class="string">'commit'</span>:</span><br><span class="line">            self._conn.commit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._conn.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispose</span><span class="params">(self, isEnd=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        @summary: 释放连接池资源</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isEnd == <span class="number">1</span>:</span><br><span class="line">            self.end(<span class="string">'commit'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.end(<span class="string">'rollback'</span>)</span><br><span class="line">        self._cursor.close()</span><br><span class="line">        self._conn.close()</span><br></pre></td></tr></table></figure>


<p><strong><em>连接池使用示例：</em></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mysql = Mysql()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找数据</span></span><br><span class="line">    search_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    SELECT id, event FROM monitortb WHERE event in &#123;&#125; AND status = 'OP'</span></span><br><span class="line"><span class="string">    """</span>.format(<span class="string">"test"</span>)</span><br><span class="line">    search_result = mysql.getAll(search_sql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新数据</span></span><br><span class="line">    increase_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    UPDATE monitortb SET cnt = cnt + &#123;&#125; WHERE id = &#123;&#125;</span></span><br><span class="line"><span class="string">    """</span>.format([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入数据</span></span><br><span class="line">    insert_sql = <span class="string">"""</span></span><br><span class="line"><span class="string">    INSERT INTO monitortb (</span></span><br><span class="line"><span class="string">    intype, innum, level, sysname, pl, clr, cnt, indate, event, status</span></span><br><span class="line"><span class="string">    ) VALUES (</span></span><br><span class="line"><span class="string">    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 需要插入的多条数据的列表 </span></span><br><span class="line">    insert_value_list = []</span><br><span class="line">    mysql.insertMany(insert_sql, insert_value_list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 断开连接池</span></span><br><span class="line">    mysql.dispose()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySql修炼</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>数据库连接池</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2020/11/01/red-black-tree/</url>
    <content><![CDATA[<p>红黑树其实就是一种数据结构，设计它的目的就是为了高效地进行增删改查，我们可以从二叉查找树逐渐引入到红黑树：</p>
<h3 id="一、二叉查找树"><a href="#一、二叉查找树" class="headerlink" title="一、二叉查找树"></a>一、二叉查找树</h3><p>特性：<br>（1）左子树上所有结点的值均小于或等于它的根结点的值；<br>（2）右子树上所有结点的值均大于或等于它的根结点的值。</p>
<a id="more"></a>

<p>如果想要查找一个数：<br>在查找的时候，先与根节点比较，比根节点大则从右子树查找，比根节点小则从左子树查找，然后重复上面的过程，一直到找到我们需要的元素为止。<br>其实对于添加和删除，原理也是一样的，我们第一步就是找到我们需要插入的位置，然后把元素插入即可。</p>
<p>缺点：<br><strong><em>普通的二叉查找树在极端情况下可退化成链表，此时的增删查效率都会比较低下。</em></strong></p>
<p><img data-src="/picture/Binary_search_tree_2.png" alt="avatar"><br>例如，如果以9位根节点，当依次插入13、15、17、19后，就会发生“一边倒”的情况，二叉查找树的优势完全丧失了。<br>二叉搜索树退化成了链表，搜索的时间复杂度为 O(n)。<br>叉查找树在插入的时候变成了“一条腿”，也就是丧失了平衡，那我们干脆做出一点改进，使用平衡二叉树吧。</p>
<h3 id="二、平衡二叉树"><a href="#二、平衡二叉树" class="headerlink" title="二、平衡二叉树"></a>二、平衡二叉树</h3><p>平衡二叉树，也叫作AVL树，</p>
<p><img data-src="/picture/Balanced_binary_tree.png" alt="avatar"></p>
<p>与二叉查找树相比，拥有以下特性：<br>（1）从任何一个节点出发，左右子树深度之差的绝对值不超过1；<br>（2）左右子树仍然为平衡二叉树。</p>
<p>如果需要插入一个数：<br>如果该树破坏了平衡，则平衡二叉树相应地会发生左旋或者右旋，二叉树就重新回到了平衡。<br>最终会发现一个结论，那就是平衡二叉树在插入时最多只需要两次旋转就会重新恢复平衡。</p>
<p>平衡二叉树在查找时既有着二叉查找树的优越性，在插入时还能通过调整继续保持着。<br>那么为什么还要使用到红黑树呢？我觉得可以从以下两个方面来考虑：<br>（1）删除：对于平衡二叉树来说，在最坏情况下，需要维护从被删节点到根节点这条路径上所有节点的平衡性，旋转的量级是O(logN)。<br>但是红黑树就不一样了，最多只需3次旋转就会重新平衡，旋转的量级是O(1)。<br>（2）保持平衡：平衡二叉树高度平衡，这也就意味着在大量插入和删除节点的场景下，平衡二叉树为了保持平衡需要调整的频率会更高。</p>
<h3 id="三、红黑树"><a href="#三、红黑树" class="headerlink" title="三、红黑树"></a>三、红黑树</h3><p>红黑树是一种自平衡的二叉查找树，是一种高效的查找树；<br>红黑树具有良好的效率，它可在 O(logN) 时间内完成查找、增加、删除等操作；<br>红黑树和名字一样，里面涉及到两种颜色：红色和黑色。</p>
<p><img data-src="/picture/red_black_tree.png" alt="avatar"></p>
<p><em><strong>如图可知，他有如下重要特征：</strong><br>（1）每个节点只有两种颜色：红色和黑色。<br>（2）根节点是黑色的。<br>（3）每个叶子节点（NIL）都是黑色的空节点。<br>（4）从根节点到叶子节点，不会出现两个连续的红色节点。<br>（5）从任何一个节点出发，到叶子节点，这条路径上都有相同数目的黑色节点。</em><br>这段关于 红黑树 的描述来源于<strong>《算法导论》</strong><br>这五条特征看起来真的很复杂，不过正是由于这些复杂的特征才保证了红黑树的良好特性</p>
<h3 id="四、使用场景："><a href="#四、使用场景：" class="headerlink" title="四、使用场景："></a>四、使用场景：</h3><p>1、java中的HashMap和TreeMap；<br>2、Linux内核中一个常见的数据结构。</p>
<hr>
<p>参考链接：<a href="https://www.zhihu.com/question/312327402/answer/1560653215" target="_blank" rel="noopener">红黑树详解</a>  </p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>B树与B+树</title>
    <url>/2020/10/17/B-B-tree/</url>
    <content><![CDATA[<h2 id="一、B树和B-树的区别"><a href="#一、B树和B-树的区别" class="headerlink" title="一、B树和B+树的区别"></a>一、B树和B+树的区别</h2><p>很明显，我们要想弄清楚原因就要知道B树和B+树的区别。为了不长篇大论。我们直接给出他们的形式总结他们的特点。</p>
<h3 id="1、B树"><a href="#1、B树" class="headerlink" title="1、B树"></a>1、B树</h3><p>B树是一种自平衡的搜索树，形式很简单：</p>
<a id="more"></a>

<p><img data-src="/picture/b_tree.png" alt="avatar"></p>
<p>这就是一颗B树。针对我们这个问题的最核心的特点如下：<br>（1）多路，非二叉树<br>（2）每个节点既保存索引，又保存数据<br>（3）搜索时相当于二分查找<br>在这里我们假定都已经了解了B树相关的结构。</p>
<h3 id="2、B-树"><a href="#2、B-树" class="headerlink" title="2、B+树"></a>2、B+树</h3><p>B+树是B-树的变种：</p>
<p><img data-src="/picture/b+_tree.png" alt="avatar"></p>
<p>最核心的特点如下：<br>（1）多路非二叉<br>（2）只有叶子节点保存数据<br>（3）搜索时相当于二分查找<br>（4）增加了相邻接点的指向指针。<br>从上面我们可以看出最核心的区别主要有俩，一个是数据的保存位置，一个是相邻节点的指向。<br>就是这俩造成了MongoDB和Mysql的差别。为什么呢？</p>
<h3 id="3、B树和B-树的区别"><a href="#3、B树和B-树的区别" class="headerlink" title="3、B树和B+树的区别"></a>3、B树和B+树的区别</h3><p>（1）B+树查询时间复杂度固定是logn，B树查询复杂度最好是 O(1)。<br>（2）B+树相邻接点的指针可以大大增加区间访问性，可使用在范围查询等，而B-树每个节点 key 和 data 在一起，则无法区间查找。<br>（3）B+树更适合外部存储，也就是磁盘存储。由于内节点无 data 域，每个节点能索引的范围更大更精确<br>（4）注意这个区别相当重要，是基于（1）（2）（3）的，B树每个节点即保存数据又保存索引，所以磁盘IO的次数很少，B+树只有叶子节点保存，磁盘IO多，但是区间访问比较好。</p>
<p>有了他们的区别之后，现在我们再来解释这个原因就好多了。</p>
<h2 id="二、原因解释"><a href="#二、原因解释" class="headerlink" title="二、原因解释"></a>二、原因解释</h2><p>想要解释原因，我们还必须要了解一下MongoDB和Mysql的基本概念。</p>
<h4 id="1、MongoDB"><a href="#1、MongoDB" class="headerlink" title="1、MongoDB"></a>1、MongoDB</h4><p>MongoDB 是文档型的数据库，是一种 nosql，它使用类 Json 格式保存数据。比如之前我们的表可能有用户表、订单表、购物篮表等等，还要建立他们之间的外键关联关系。<br>但是类Json就不一样了。我们可以看到这种形式更简单，通俗易懂。那为什么 MongoDB 使用B-树呢？</p>
<p>MongoDB使用B树，所有节点都有Data域，只要找到指定索引就可以进行访问，无疑单次查询平均快于Mysql。</p>
<h4 id="2、Mysql"><a href="#2、Mysql" class="headerlink" title="2、Mysql"></a>2、Mysql</h4><p>Mysql作为一个关系型数据库，数据的关联性是非常强的，区间访问是常见的一种情况，B+树由于数据全部存储在叶子节点，并且通过指针串在一起，这样就很容易的进行区间遍历甚至全部遍历。</p>
<hr>
<p>原题链接：<a href="https://zhuanlan.zhihu.com/p/102628897" target="_blank" rel="noopener">为什么 MongoDB 索引选择B树，而 Mysql 选择B+树</a>  </p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>B树与B+树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware vSphere 之 vCenter 指标采集</title>
    <url>/2020/10/09/vmware-vsphere/</url>
    <content><![CDATA[<blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></blockquote>
<p>VMware vSphere 是 VMware 的虚拟化平台，可将数据中心转换为包括 CPU、存储和网络资源的聚合计算基础架构。vSphere 将这些基础架构作为一个统一的运行环境进行管理，并提供工具来管理加入该环境的数据中心。</p>
<p>在对接或采集VMware vSphere虚拟化平台的场景中，比如配置八爪鱼，需要对其中的虚拟化数据中心、虚拟化集群、物理机、虚拟机、存储等指标进行多方位的采集，我们根据VMware提供的相应sdk接口，对接到蓝鲸的SaaS中。</p>
<a id="more"></a>
<blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3></blockquote>
<h3 id="一-vSphere的模型结构"><a href="#一-vSphere的模型结构" class="headerlink" title="一   vSphere的模型结构"></a>一   vSphere的模型结构</h3><h4 id="1-1-模型及关联关系"><a href="#1-1-模型及关联关系" class="headerlink" title="1.1    模型及关联关系"></a>1.1    模型及关联关系</h4><h5 id="1-1-1-名词解释"><a href="#1-1-1-名词解释" class="headerlink" title="1.1.1   名词解释"></a>1.1.1   名词解释</h5><p>VCenter: 虚拟机管理中心，</p>
<p>DCenter: 虚拟化数据中心，</p>
<p>Cluster: 虚拟化集群</p>
<p>Server: 物理机</p>
<p>Virtual: 虚拟机</p>
<p>Storage: 存储</p>
<h5 id="1-1-2-从属关系"><a href="#1-1-2-从属关系" class="headerlink" title="1.1.2   从属关系"></a>1.1.2   从属关系</h5><p>从属关系: VCenter =&gt; DCenter =&gt; Cluster =&gt; Server =&gt; Virtual &amp; Storage</p>
<h5 id="1-1-3-指标采集"><a href="#1-1-3-指标采集" class="headerlink" title="1.1.3   指标采集"></a>1.1.3   指标采集</h5><p>以上是最常见、最标准的多级结构，管理平台到数据中心，到集群，再到物理机，物理机包含虚拟机和存储单元。但是这并不是固定的，某些情况，我们也可以直接把物理机挂载在数据中心DCenter中，而存储也可以直接关联到集群，这就导致了我们采集各项指标的时候，事先并不知道客户环境是否按照标准化的结构来构建VCenter，关联关系也各不相同，导致采集到的数据与CMDB模型和关联关系不适配。这些问题需要调研的时候确定环境的VCenter结构，并且CMDB建模时与之适配，这才能使得数据采集上报工作正常开展。</p>
<h3 id="二-vSphere采集"><a href="#二-vSphere采集" class="headerlink" title="二   vSphere采集"></a>二   vSphere采集</h3><h4 id="2-1-对接vSphere"><a href="#2-1-对接vSphere" class="headerlink" title="2.1    对接vSphere"></a>2.1    对接vSphere</h4><h5 id="2-1-1-使用VMware官方sdk"><a href="#2-1-1-使用VMware官方sdk" class="headerlink" title="2.1.1   使用VMware官方sdk"></a>2.1.1   使用VMware官方sdk</h5><p>VMware官方提供了多种多种sdk，由于我们使用Django开发SaaS，直接使用pip安装依赖即可，版本号由vSphere版本确定，现最新版为7.0，6.x是最常见的版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyvmomi==6.5</span><br></pre></td></tr></table></figure>



<h5 id="2-1-2-连接vSphere"><a href="#2-1-2-连接vSphere" class="headerlink" title="2.1.2   连接vSphere"></a>2.1.2   连接vSphere</h5><p>采集之前，我们需要提供vSphere的地址，ip或者有DNS的域名都可以，以及需要vSphere的管理员账号和密码，账号通常为<a href="mailto:administrator@vsphere.local">administrator@vsphere.local</a>。有了以上信息后，我们通过ssl模块连接到vSphere，具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_vc</span><span class="params">(vcserver)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1) </span><br><span class="line">        context.verify_mode = ssl.CERT_NONE  </span><br><span class="line">        si = SmartConnect(host=vcserver[<span class="string">"ip"</span>], user=vcserver[<span class="string">"user"</span>], pwd=vcserver[<span class="string">"password"</span>], port=<span class="number">443</span>, sslContext=context)  </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        context = ssl._create_unverified_context()  </span><br><span class="line">        context.verify_mode = ssl.CERT_NONE  </span><br><span class="line">        si = SmartConnect(host=vcserver[<span class="string">"ip"</span>], user=vcserver[<span class="string">"user"</span>], pwd=vcserver[<span class="string">"password"</span>], port=<span class="number">443</span>, sslContext=context)  </span><br><span class="line">    <span class="keyword">return</span> si.RetrieveContent()</span><br></pre></td></tr></table></figure>



<h4 id="2-2-采集模型指标"><a href="#2-2-采集模型指标" class="headerlink" title="2.2    采集模型指标"></a>2.2    采集模型指标</h4><p>由于vSphere是层级结构，我们想要采集某一层的指标，就需要从上往下逐层采集，开发时，我们需要引入vSphere的sdk。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect </span><br><span class="line"><span class="keyword">from</span> pyVmomi <span class="keyword">import</span> vim, vmodl</span><br></pre></td></tr></table></figure>



<h5 id="2-2-1-VCenter"><a href="#2-2-1-VCenter" class="headerlink" title="2.2.1   VCenter"></a>2.2.1   VCenter</h5><p>VCenter是关联关系最上的一层结构，获取VCenter的信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vc_info</span><span class="params">(content)</span>:</span> </span><br><span class="line">    <span class="string">"""获取VC服务器配置信"""</span> </span><br><span class="line">    hostname = content.setting.QueryOptions(<span class="string">"VirtualCenter.FQDN"</span>)[<span class="number">0</span>].value </span><br><span class="line">    ver = content.about.version </span><br><span class="line">    licensesinfo = [&#123;<span class="string">"name"</span>: l.name, <span class="string">"license"</span>: l.licenseKey, <span class="string">"costUnit"</span>: l.costUnit,  <span class="string">"total"</span>: l.total <span class="keyword">if</span> l.total != <span class="number">0</span> <span class="keyword">else</span> <span class="string">"Unlimited"</span>, <span class="string">"used"</span>: l.used&#125; <span class="keyword">for</span> l <span class="keyword">in</span> content.licenseManager.licenses] </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"hostname"</span>: hostname, <span class="string">"version"</span>: ver, <span class="string">"licensesinfo"</span>: licensesinfo&#125;</span><br></pre></td></tr></table></figure>

<p>如上，使用connect_vc连接vSphere返回的content作为参数，实例代码中展示了采集版本和licenses的信息，更多的参数如日志的等级、日志文件大小及数据库信息等，可以自行添加，不做展示。而想要采集该VCenter下有多少DCenter，则需要往下继续采集统计。</p>
<h5 id="2-2-2-DCenter"><a href="#2-2-2-DCenter" class="headerlink" title="2.2.2   DCenter"></a>2.2.2   DCenter</h5><p>同上，由于一个vSphere只有一个VCenter，所以我们可以直接采集到所有DCenter，不需要额外的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dcenter</span><span class="params">(self)</span>:</span></span><br><span class="line">    container = self.connect.viewManager.CreateContainerView(self.connect.rootFolder, [vim.Datacenter], <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> dcenter <span class="keyword">in</span> container.view:</span><br><span class="line">        dcenter_name = dcenter.name</span><br><span class="line">        dcenter_moid = dcenter._moId</span><br><span class="line">    <span class="keyword">return</span> dcenter_moid</span><br></pre></td></tr></table></figure>

<p>self.connect为连接成功vSphere后返回的content，这样我们就采集到了DCenter的名称及moid（唯一标识），同理，需要额外参数可自行添加，官方文档有详细指标说明。</p>
<h5 id="2-2-3-Cluster"><a href="#2-2-3-Cluster" class="headerlink" title="2.2.3   Cluster"></a>2.2.3   Cluster</h5><p>Cluster集群是属于DCenter数据中心下的结构，所以我们需要通过数据中心的moid来获取对应集群信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster</span><span class="params">(self, dcenter_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> dcenter_data <span class="keyword">in</span> dcenter_list:</span><br><span class="line">        moId = dcenter_data[<span class="string">"detail"</span>][<span class="string">"moId"</span>]</span><br><span class="line">        com_info = vm_helper.get_obj_bymoId(self.connect, [vim.Datacenter], moId)</span><br><span class="line">        container = self.connect.viewManager.CreateContainerView(com_info.hostFolder, [vim.ComputeResource], <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> cluster <span class="keyword">in</span> container.view:</span><br><span class="line">            cluster_moid = cluster._moId</span><br><span class="line">            get_cluster_resource(content, cluster_moid)</span><br></pre></td></tr></table></figure>

<p>以上代码通过DCenter的moid获取了属于它的全部Cluster信息，我们使用cluster._moId，便可采集到集群的多项指标，也是最常见的需求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster_resource</span><span class="params">(self, content, cluster_moId)</span>:</span></span><br><span class="line">    <span class="string">"""获取群集资源概况"""</span></span><br><span class="line">    cluster = get_obj_bymoId(content, [vim.ClusterComputeResource], cluster_moId)</span><br><span class="line">    summary = cluster.summary</span><br><span class="line">    totalCpuMhz = summary.totalCpu</span><br><span class="line">    totalMemMB = summary.totalMemory</span><br><span class="line">    capacity_list = []</span><br><span class="line">    freeSpace_list = []</span><br><span class="line">    <span class="keyword">for</span> datastore <span class="keyword">in</span> cluster.datastore:</span><br><span class="line">        capacity_list.append(datastore.summary.capacity)</span><br><span class="line">        freeSpace_list.append(datastore.summary.freeSpace)</span><br><span class="line">    totalDiskTB = <span class="string">"%.3f"</span> % (float(sum(capacity_list)) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">    DiskUsedTB = <span class="string">"%.3f"</span> % (float(sum(capacity_list) - sum(freeSpace_list)) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>)</span><br><span class="line">    resource_quickstats = cluster.resourcePool.summary.quickStats</span><br><span class="line">    cpuUsedMhz = resource_quickstats.overallCpuUsage</span><br><span class="line">    memUsedMB = resource_quickstats.hostMemoryUsage</span><br><span class="line">    <span class="keyword">return</span> cluster</span><br></pre></td></tr></table></figure>

<p>以上代码中，我演示了如何获取集群CPU、内存、磁盘的一些指标，包括总容量和已使用量等，同理，如需更多指标，参照官方文档的字段说明。</p>
<h5 id="2-2-4-Server"><a href="#2-2-4-Server" class="headerlink" title="2.2.4   Server"></a>2.2.4   Server</h5><p>物理机是隶属于集群下的，只需提供集群的moid，便可获取物理机列表，物理机各项指标通过对应物理机的moid获取，参照官方文档字段说明，不多赘述。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_server</span><span class="params">(self, cluster_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> cluster_data <span class="keyword">in</span> cluster_list:</span><br><span class="line">        moId = cluster_data[<span class="string">"detail"</span>][<span class="string">"moId"</span>]</span><br><span class="line">        com_info = vm_helper.get_obj_bymoId(self.connect, [vim.ComputeResource], moId)</span><br><span class="line">        <span class="keyword">for</span> server <span class="keyword">in</span> com_info.host:</span><br><span class="line">            server_name = server.name</span><br><span class="line">            server_moid = server._moId</span><br></pre></td></tr></table></figure>



<h5 id="2-2-5-Virtual-amp-Storage"><a href="#2-2-5-Virtual-amp-Storage" class="headerlink" title="2.2.5   Virtual &amp; Storage"></a>2.2.5   Virtual &amp; Storage</h5><p>虚拟机和存储是挂载在物理机下的，采集方法相同，以下只列出虚拟机的采集方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vm</span><span class="params">(self, server)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> server.vm:</span><br><span class="line">        <span class="keyword">if</span> vm.summary.guest.ipAddress:</span><br><span class="line">            vm_ip = vm.summary.guest.ipAddress</span><br><span class="line">            vm_name = vm.name</span><br><span class="line">            vm_moid = vm.moid</span><br></pre></td></tr></table></figure>

<p>这样就可以采集到虚拟机的ip和名称，适用moid可以同集群一般，采集更多指标。</p>
<h3 id="三-个人总结"><a href="#三-个人总结" class="headerlink" title="三   个人总结"></a>三   个人总结</h3><h4 id="3-1-适用场景分析"><a href="#3-1-适用场景分析" class="headerlink" title="3.1    适用场景分析"></a>3.1    适用场景分析</h4><p>在大多情况下，以上vSphere采集是获取vSphere资产全貌的手段，不推荐作为监控的手段，尤其是在庞大体量的VCenter中，循环且频繁地调用sdk不是长久的方法，或许会对本身产生未知影响。vSphere采集适用的场景为：适用配置八爪鱼获取VCenter下所有层级的实例数据和关联关系，然后录入CMDB，主要为虚拟机的IP，通过IP安装可监控指标的Agent，实现对物理机、虚拟机和存储的指标和健康度。</p>
<hr>
<p>更多指标采集参考官方文档：</p>
<p><a href="https://vdc-download.vmware.com/vmwb-repository/dcr-public/6b586ed2-655c-49d9-9029-bc416323cb22/fa0b429a-a695-4c11-b7d2-2cbc284049dc/doc/index-methods.html" target="_blank" rel="noopener">https://vdc-download.vmware.com/vmwb-repository/dcr-public/6b586ed2-655c-49d9-9029-bc416323cb22/fa0b429a-a695-4c11-b7d2-2cbc284049dc/doc/index-methods.html</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware vSphere</tag>
        <tag>vCenter</tag>
        <tag>虚拟化</tag>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次持续到凌晨两点半的coding</title>
    <url>/2020/09/26/2020-09-26/</url>
    <content><![CDATA[<p><strong>二叉搜索树的后序遍历序列</strong></p>
<p><strong>题干</strong>：<br>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。<br>如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>
<a id="more"></a>

<p><strong>解题思路</strong>：<br>1、后续遍历的最后一个节点是根节点<br>2、BST(二叉搜索树)特性：<br>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值<br>3、综上，除去末尾根节点，BST的后续遍历中，前面一部分都小于根节点的数是左子树，后一部分都大于根节点的是右子树。<br>不符合则判断不是BST的后序遍历。<br>然后递归剩下的左右子树，直到所有子树都满足以上条件，才判断是BST的后序遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    todo 优化：子树序列长度只需 &lt;= 2，则该子树满足BST的后续遍历</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">VerifySquenceOfBST</span><span class="params">(self, sequence)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sequence:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        root = sequence.pop()</span><br><span class="line">        left = []</span><br><span class="line">        right = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sequence) + <span class="number">1</span>):</span><br><span class="line">            tmp_list = copy.deepcopy(sequence)</span><br><span class="line">            tmp_list.insert(i, root)</span><br><span class="line">            left = tmp_list[:i + <span class="number">1</span>]</span><br><span class="line">            right = tmp_list[i:]</span><br><span class="line">            <span class="keyword">if</span> max(left) &lt;= root &lt;= min(right):</span><br><span class="line">                left.pop()</span><br><span class="line">                right.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(right) &lt;= <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        result_left = self.VerifySquenceOfBST(left) <span class="keyword">if</span> left <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">        result_right = self.VerifySquenceOfBST(right) <span class="keyword">if</span> right <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> result_left <span class="keyword">and</span> result_right</span><br></pre></td></tr></table></figure>
<p>测试用例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">back_list = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">10</span>]</span><br><span class="line">solution = Solution()</span><br><span class="line">print(solution.VerifySquenceOfBST(back_list))</span><br></pre></td></tr></table></figure>

<hr>
<p>原题链接：<a href="https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&&tqId=11176&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">二叉搜索树的后序遍历序列</a>  </p>
]]></content>
      <categories>
        <category>算法修炼</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>企业(政务)微信浏览器的前端开发兼容问题</title>
    <url>/2020/08/20/weixin-app/</url>
    <content><![CDATA[<p><strong>windows版本的企业（政务）微信浏览器基于Chromium 53版本，对ES7某些新特性不兼容</strong></p>
<img data-src="/2020/08/20/weixin-app/weixin_browser.png" class>
<a id="more"></a>

<h3 id="1、不支持Async-Await异步函数"><a href="#1、不支持Async-Await异步函数" class="headerlink" title="1、不支持Async/Await异步函数"></a>1、不支持Async/Await异步函数</h3><p>官方的方法兼容文档：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a> </p>
<img data-src="/2020/08/20/weixin-app/browser_compatibility.png" class>

<h3 id="2、不支持Axios的promise-prototype-finally方法："><a href="#2、不支持Axios的promise-prototype-finally方法：" class="headerlink" title="2、不支持Axios的promise.prototype.finally方法："></a>2、不支持Axios的promise.prototype.finally方法：</h3><img data-src="/2020/08/20/weixin-app/weixin_error.png" class>

<p>解决办法：通过main.js引入依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i promise.prototype.finally</span><br><span class="line">require(&#39;promise.prototype.finally&#39;).shim();</span><br></pre></td></tr></table></figure>

<h3 id="3、本地安装模拟企业（政务）微信内置Chromium-53版本："><a href="#3、本地安装模拟企业（政务）微信内置Chromium-53版本：" class="headerlink" title="3、本地安装模拟企业（政务）微信内置Chromium 53版本："></a>3、本地安装模拟企业（政务）微信内置Chromium 53版本：</h3><h4 id="3-1、下载附件的安装包（Chromium-53版本）"><a href="#3-1、下载附件的安装包（Chromium-53版本）" class="headerlink" title="3.1、下载附件的安装包（Chromium 53版本）"></a>3.1、下载附件的安装包（Chromium 53版本）</h4><p><a href="https://file.tapd.cn/51310665/attachments/download/1151310665001000266/wiki" target="_blank" rel="noopener">点此下载</a>  </p>
<h4 id="3-2、右键解压成Chrome-7z，继续解压成Chrome-bin文件夹"><a href="#3-2、右键解压成Chrome-7z，继续解压成Chrome-bin文件夹" class="headerlink" title="3.2、右键解压成Chrome.7z，继续解压成Chrome-bin文件夹"></a>3.2、右键解压成Chrome.7z，继续解压成Chrome-bin文件夹</h4><img data-src="/2020/08/20/weixin-app/download_file.png" class>

<h4 id="3-3、直接执行Chrome-bin-chrome-exe会跳转到本地最新版的chrome。"><a href="#3-3、直接执行Chrome-bin-chrome-exe会跳转到本地最新版的chrome。" class="headerlink" title="3.3、直接执行Chrome-bin / chrome.exe会跳转到本地最新版的chrome。"></a>3.3、直接执行Chrome-bin / chrome.exe会跳转到本地最新版的chrome。</h4><p>在此目录下编写脚本start.bat，点击脚本即可打开Chromium 53：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start &quot;&quot; &quot;.&#x2F;chrome.exe&quot;  &quot; --user-data-dir&#x3D;User Data&quot;</span><br></pre></td></tr></table></figure>

<img data-src="/2020/08/20/weixin-app/file_setting.png" class>]]></content>
      <categories>
        <category>前端开发指南</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>微信轻应用</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 uWSGI + Nginx 部署 Django 项目</title>
    <url>/2020/05/20/uWSGI-Nginx-Django/</url>
    <content><![CDATA[<blockquote>
<p>摘要</p>
</blockquote>
<p>在开发<kbd>Django</kbd>框架时，我们通常使用<kbd>python manage.py runserver</kbd>来运行本地服务,但是这只适用开发环境中使用，此时启动的Django项目通过127.0.0.1:8000的本地端口进行转发，也只能在本地环境下进行访问。那么我们基于Django的SaaS是怎样发布在公网、局域网环境下，并且通过域名访问站点的呢？通常的方案是：我们就需要用到<kbd>uWSGI</kbd>配合<kbd>Nginx(Apache)</kbd>进行代理转发。以下是笔者在实践此方案的过程中整理的一些要点。</p>
<a id="more"></a>
<blockquote>
<p>正文</p>
</blockquote>
<h2 id="一、uWSGI简介"><a href="#一、uWSGI简介" class="headerlink" title="一、uWSGI简介"></a>一、uWSGI简介</h2><p>uWSGI是一个快速的、纯C语言开发的、自维护的、对开发者友好的WSGI服务器，旨在提供专业的Python web应用发布和开发。可使用C/C++/Objective-C来为uWSGI编写插件。我们在根目录下的requirements.py中可以找到uWSGI的依赖，Windows环境本地安装依赖的时候一般都会注释掉它，因为uWSGI是运行在Linux上的服务器。可能大家对WSGI、uwsgi、uWSGI这几个概念很头疼，简单地说，WSGI是一个规范协议，定义了Web服务器如何与Python应用程序进行交互；uwsgi和WSGI一样是通信协议，是uWSGI服务器的单独形式，用于自定义传输类型；而uWSGI是重头戏，他是一个web服务器,实现了WSGI协议、uwsgi协议。以下是WSGI，uwsgi，uWSGI的实现过程图解。</p>
<p><img data-src="uwsgi.png" alt="uWSGI"></p>
<h2 id="二、Nginx简介"><a href="#二、Nginx简介" class="headerlink" title="二、Nginx简介"></a>二、Nginx简介</h2><p>相比uWSGI，Nginx的知名度高了许多，它是一个开源的、支持高性能、高并发的代理服务软件，Nginx不但是一个优秀的web服务软件,还可以作为反想代理和负载均衡,以及缓存服务或使用。<br>实际上，一个uWSGI的web服务器，再加上Django这样的web框架，就已经可以实现网站的功能了。那为什么还需要Nginx呢？经过笔者查阅资料，总结有以下几点：</p>
<h3 id="2-1、安全问题："><a href="#2-1、安全问题：" class="headerlink" title="2.1、安全问题："></a>2.1、安全问题：</h3><p>程序不能直接被浏览器访问到，而是通过Nginx只开放某个接口，uWSGI本身是内网接口，这样运维人员在Nginx上加上安全性的限制，可以达到保护程序的作用；</p>
<h3 id="2-2、载均衡问题："><a href="#2-2、载均衡问题：" class="headerlink" title="2.2、载均衡问题："></a>2.2、载均衡问题：</h3><p>一个uWSGI很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了Nginx做代理，一个Nginx可以代理多台uWSGI完成负载均衡；</p>
<h3 id="2-3、静态文件问题："><a href="#2-3、静态文件问题：" class="headerlink" title="2.3、静态文件问题："></a>2.3、静态文件问题：</h3><p>用Django或是uWSGI这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如Nginx好，所以整个静态文件的处理都直接由nginx完成。</p>
<h2 id="三、uWSGI-Nginx-部署-Django-网站的实践"><a href="#三、uWSGI-Nginx-部署-Django-网站的实践" class="headerlink" title="三、uWSGI + Nginx 部署 Django 网站的实践"></a>三、uWSGI + Nginx 部署 Django 网站的实践</h2><p>接下来笔者将使用uWSGI+Nginx搭建Django网站，此方案的架构图如下：<br><img data-src="uwsgi+nginx+django.png" alt="uwsgi+nginx+django"></p>
<h3 id="3-1、安装配置uWSGI："><a href="#3-1、安装配置uWSGI：" class="headerlink" title="3.1、安装配置uWSGI："></a>3.1、安装配置uWSGI：</h3><h4 id="3-1-1安装uWSGI："><a href="#3-1-1安装uWSGI：" class="headerlink" title="3.1.1安装uWSGI："></a>3.1.1安装uWSGI：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>
<p>也可以指定版本安装；</p>
<h4 id="3-1-2-uWSGI配置："><a href="#3-1-2-uWSGI配置：" class="headerlink" title="3.1.2    uWSGI配置："></a>3.1.2    uWSGI配置：</h4><p>实际上，我们可以uwsgi命令配合参数来启动Django项目，但是我们可以把这些参数放在uwsgi9090.ini配置文件中，记录配置并且实现后台运行uWSGI：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket &#x3D; 127.0.0.1:9090</span><br><span class="line">master &#x3D; true         &#x2F;&#x2F;主进程</span><br><span class="line">vhost &#x3D; true          &#x2F;&#x2F;多站模式</span><br><span class="line">no-site &#x3D; true        &#x2F;&#x2F;多站模式时不设置入口模块和文件</span><br><span class="line">workers &#x3D; 2           &#x2F;&#x2F;子进程数</span><br><span class="line">reload-mercy &#x3D; 10     </span><br><span class="line">vacuum &#x3D; true         &#x2F;&#x2F;退出、重启时清理文件</span><br><span class="line">max-requests &#x3D; 1000   </span><br><span class="line">limit-as &#x3D; 512</span><br><span class="line">buffer-size &#x3D; 30000</span><br><span class="line">pidfile &#x3D; &#x2F;var&#x2F;run&#x2F;uwsgi9090.pid    &#x2F;&#x2F;pid文件，用于下面的脚本启动、停止该进程</span><br><span class="line">daemonize &#x3D; &#x2F;website&#x2F;uwsgi9090.log</span><br></pre></td></tr></table></figure>
<p>如上配置，接下来运行uwsgi uwsgi9090.ini即可uWSGI后台启动Django；</p>
<h4 id="3-1-3-Django项目根目录的settings-py中配置收集静态资源："><a href="#3-1-3-Django项目根目录的settings-py中配置收集静态资源：" class="headerlink" title="3.1.3    Django项目根目录的settings.py中配置收集静态资源："></a>3.1.3    Django项目根目录的settings.py中配置收集静态资源：</h4><p>配置完毕后运行python manage.py collectstatic</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态资源访问的起始url</span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"><span class="comment"># 指定静态资源所在的目录</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 设置收集静态资源的路径(部署时使用)</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'collect_static/'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-安装配置Nginx："><a href="#3-2-安装配置Nginx：" class="headerlink" title="3.2    安装配置Nginx："></a>3.2    安装配置Nginx：</h3><h4 id="3-2-1、安装编译工具及库文件："><a href="#3-2-1、安装编译工具及库文件：" class="headerlink" title="3.2.1、安装编译工具及库文件："></a>3.2.1、安装编译工具及库文件：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2、编译安装Nginx，版本可自定义："><a href="#3-2-2、编译安装Nginx，版本可自定义：" class="headerlink" title="3.2.2、编译安装Nginx，版本可自定义："></a>3.2.2、编译安装Nginx，版本可自定义：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nginx.org/download/nginx-1.6.2.tar.gz</span><br><span class="line">tar zxvf nginx-1.6.2.tar.gz</span><br><span class="line">cd nginx-1.6.2</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3、找到Nginx的安装目录，打开conf-nginx-conf文件，修改server配置："><a href="#3-2-3、找到Nginx的安装目录，打开conf-nginx-conf文件，修改server配置：" class="headerlink" title="3.2.3、找到Nginx的安装目录，打开conf/nginx.conf文件，修改server配置："></a>3.2.3、找到Nginx的安装目录，打开conf/nginx.conf文件，修改server配置：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 default_server ssl;  &#x2F;&#x2F;https必须用ssl和443端口，http可以用80</span><br><span class="line">        server_name  xxx.xxx.com;     &#x2F;&#x2F;个人的已经注册过的域名</span><br><span class="line">        location &#x2F; &#123;  </span><br><span class="line">		include  uwsgi_params;</span><br><span class="line">            uwsgi_pass  127.0.0.1:9090;              &#x2F;&#x2F;必须和uwsgi中的设置一致</span><br><span class="line">            uwsgi_param UWSGI_SCRIPT demosite.wsgi;  &#x2F;&#x2F;入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录</span><br><span class="line">            uwsgi_param UWSGI_CHDIR &#x2F;demosite;       &#x2F;&#x2F;项目根目录</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            client_max_body_size 35m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-4、使用systemctl-restart-nginx重启Nginx服务器。"><a href="#3-2-4、使用systemctl-restart-nginx重启Nginx服务器。" class="headerlink" title="3.2.4、使用systemctl restart nginx重启Nginx服务器。"></a>3.2.4、使用systemctl restart nginx重启Nginx服务器。</h4><h2 id="四、项目启动及维护"><a href="#四、项目启动及维护" class="headerlink" title="四、项目启动及维护"></a>四、项目启动及维护</h2><p>使用<code>ss -lntpd | grep nginx（uwsgi）</code>和<code>ps -ef | grep nginx（uwsgi）</code>来确认nginx、uwsgi是否启动成功、转发代理的端口是否正确。<br>如果为启动失败，请确认配置是否正确，使用systemctl restart nginx重启nginx，使用killall -9 uwsgi杀死uwsgi服务，使用uwsgi uwsgi9090.ini重启uwsgi和Django项目；如果一切正常，我们可以在浏览器中输入nginx.conf中配置的server_name域名，来访问已启动的Django web项目，这样就实现了uWSGI+Nginx部署Django web项目了。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>技术文章</tag>
        <tag>uWSGI</tag>
        <tag>Nginx</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>pearson相关系数</title>
    <url>/2020/02/26/pearson-formula/</url>
    <content><![CDATA[<p><strong>pearson相关系数</strong></p>
<p><img data-src="/picture/pearson%E5%85%AC%E5%BC%8F.png" alt="avatar"></p>
<p>公式定义为： 两个连续变量(X,Y)的pearson相关性系数(Px,y)等于它们之间的协方差cov(X,Y)除以它们各自标准差的乘积(σX,σY)。系数的取值总是在-1.0到1.0之间，接近0的变量被成为无相关性，接近1或者-1被称为具有强相关性。</p>
<p>简单来说，它用来衡量两个数据集合是否在一条线上面，是否有相关性，这在数据分析中是很有效的。</p>
<p>用python3实现：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pearson</span><span class="params">(vector1, vector2)</span>:</span></span><br><span class="line">    n = len(vector1)</span><br><span class="line">    <span class="comment">#simple sums</span></span><br><span class="line">    sum1 = sum(float(vector1[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    sum2 = sum(float(vector2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br><span class="line">    <span class="comment">#sum up the squares</span></span><br><span class="line">    sum1_pow = sum([pow(v, <span class="number">2.0</span>) <span class="keyword">for</span> v <span class="keyword">in</span> vector1])</span><br><span class="line">    sum2_pow = sum([pow(v, <span class="number">2.0</span>) <span class="keyword">for</span> v <span class="keyword">in</span> vector2])</span><br><span class="line">    <span class="comment">#sum up the products</span></span><br><span class="line">    p_sum = sum([vector1[i]*vector2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">    <span class="comment">#分子num，分母den</span></span><br><span class="line">    num = p_sum - (sum1*sum2/n)</span><br><span class="line">    den = math.sqrt((sum1_pow-pow(sum1, <span class="number">2</span>)/n)*(sum2_pow-pow(sum2, <span class="number">2</span>)/n))</span><br><span class="line">    <span class="keyword">if</span> den == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">return</span> num/den</span><br></pre></td></tr></table></figure>
<p>选择两组数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vector1 &#x3D; [2, 7, 18, 88, 157, 90, 177, 570]</span><br><span class="line">vector2 &#x3D; [3, 5, 15, 90, 180, 88, 160, 580]</span><br><span class="line">print(&#39;result is: &#39; + int(pearson(vector1, vector2)))</span><br></pre></td></tr></table></figure>
<p>运行结果为0.998，可见这两组数是高度正相关的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result is: 0.998348748644</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;美国零售业有这样一个案例，美国沃尔玛百货将他们的纸尿裤和啤酒并排摆在一起销售，结果纸尿裤和啤酒的销量双双增长。<br>原来，美国的太太们常叮嘱她们的丈夫下班后为小孩买尿布，而丈夫们在买尿布后又随手带回了两瓶啤酒。<br>这一消费行为导致了这两件商品经常被同时购买。这其实是经过数据挖掘、趋势分析后做出的决策。</p>
<hr>
<p>参考：<a href="https://blog.csdn.net/AlexMerer/article/details/74908435" target="_blank" rel="noopener">统计学三大相关系数之皮尔森（pearson）相关系数</a><br>&emsp;&emsp;&emsp;<a href="https://www.jianshu.com/p/a8349052a2a0" target="_blank" rel="noopener">从啤酒和纸尿裤，你能想到什么？</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>大数据分析</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Git原理及实践</title>
    <url>/2019/11/12/git-basis/</url>
    <content><![CDATA[<h1 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么?"></a>Git是什么?</h1><h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><p>版本控制是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理，是软件配置管理的核心思想之一。</p>
<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git?"></a>什么是Git?</h2><p><img data-src="/picture/git_logo.png" alt="avatar"><br>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS， Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<a id="more"></a>
<h2 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h2><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。<br>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征。<br>Git 与 SVN 区别点：<br>1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。<br>2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。<br>3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。<br>4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。<br>5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>
<h1 id="Git的理论基础"><a href="#Git的理论基础" class="headerlink" title="Git的理论基础"></a>Git的理论基础</h1><ul>
<li>Git的四大工作区域</li>
<li>Git的工作流程</li>
<li>Git文件的四种状态</li>
<li>Git的工作原理</li>
</ul>
<h2 id="Git的四大工作区域"><a href="#Git的四大工作区域" class="headerlink" title="Git的四大工作区域"></a>Git的四大工作区域</h2><p><img data-src="/picture/git_4_workspace.png" alt="avatar"></p>
<ul>
<li><kbd style="color:#ff7600">Workspace</kbd>：你电脑本地看到的文件和目录，在Git的版本控制下，构成了工作区。</li>
<li><kbd style="color:#ff7600">Index/Stage</kbd>：暂存区，一般存放在 .git目录下，即.git/index，它又叫待提交更新区，用于临时存放你未提交的改动。比如，你执行git add，这些改动就添加到这个区域啦。</li>
<li><kbd style="color:#ff7600">Repository</kbd>：本地仓库，你执行git clone 地址，就是把远程仓库克隆到本地仓库。它是一个存放在本地的版本库，其中HEAD指向最新放入仓库的版本。当你执行git commit，文件改动就到本地仓库来了~</li>
<li><kbd style="color:#ff7600">Remote</kbd>：远程仓库，就是类似github，码云等网站所提供的仓库，可以理解为远程数据交换的仓库~</li>
</ul>
<h2 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h2><p><img data-src="/picture/git_work_process.png" alt="avatar"></p>
<h2 id="Git文件的四种状态"><a href="#Git文件的四种状态" class="headerlink" title="Git文件的四种状态"></a>Git文件的四种状态</h2><p>根据一个文件是否已加入版本控制，可以把文件状态分为：Tracked(已跟踪)和Untracked(未跟踪)，而tracked(已跟踪)又包括三种工作状态：Unmodified，Modified，Staged</p>
<p><img data-src="/picture/git_file_status.png" alt="avatar"></p>
<ul>
<li>Untracked: 文件还没有加入到git库，还没参与版本控制，即未跟踪状态。这时候的文件，通过git add 状态，可以变为Staged状态</li>
<li>Unmodified：文件已经加入git库， 但是呢，还没修改， 就是说版本库中的文件快照内容与文件夹中还完全一致。修改变为Modified. 可用git remove移出版本库， 变为Untracked。</li>
<li>Modified：文件被修改了，就进入modified状态啦，通过stage命令进入staged状态</li>
<li>staged：暂存状态. 执行git commit将修改同步到库中，这时库中的文件和本地文件变为一致，为Unmodified状态.</li>
</ul>
<h2 id="Git的工作原理"><a href="#Git的工作原理" class="headerlink" title="Git的工作原理"></a>Git的工作原理</h2><p><img data-src="/picture/git_work_principle.png" alt="avatar"></p>
<h1 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h1><h2 id="Git命令流程"><a href="#Git命令流程" class="headerlink" title="Git命令流程"></a>Git命令流程</h2><p>以下是命令使用的大致流程<br><img data-src="/picture/git_use_detail.png" alt="avatar"></p>
<h2 id="Git常用命令集"><a href="#Git常用命令集" class="headerlink" title="Git常用命令集"></a>Git常用命令集</h2><p>遇事不决查文档，<kbd style="color:#ff7600">git -help</kbd> + <kbd style="color:#ff7600">git command -help</kbd></p>
<h3 id="git-init-初始化仓库"><a href="#git-init-初始化仓库" class="headerlink" title="git init -初始化仓库"></a>git init -初始化仓库</h3><h3 id="git-clone-url-克隆远程版本库"><a href="#git-clone-url-克隆远程版本库" class="headerlink" title="git clone url -克隆远程版本库"></a>git clone url -克隆远程版本库</h3><h3 id="git-remote-add-newRemote-url-添加另一个远程仓库"><a href="#git-remote-add-newRemote-url-添加另一个远程仓库" class="headerlink" title="git remote add newRemote url -添加另一个远程仓库"></a>git remote add newRemote url -添加另一个远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] -添加仓库的高级版</span><br><span class="line">git remote [-v | --verbose] -查看远程所有仓库</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt; -重命名仓库名</span><br><span class="line">git remote remove &lt;name&gt; -移除本地绑定的远程仓库</span><br></pre></td></tr></table></figure>

<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b newBranch  [origin&#x2F;newBranch ] 创建开发分支dev，并切换到该分支下在上面基础上[并关联远程分支]</span><br><span class="line">git checkout [file]  丢弃某个文件file(还未add进暂存区)</span><br><span class="line">git checkout .  丢弃所有文件(还未add进暂存区)(已经add了则用reset)</span><br></pre></td></tr></table></figure>

<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .	添加当前目录的所有文件到暂存区</span><br><span class="line">git add [dir]	添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [file1]	添加指定文件到暂存区</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m [message] 提交暂存区到仓库区，message为说明信息</span><br><span class="line">git commit [file1] -m [message] 提交暂存区的指定文件到本地仓库</span><br><span class="line">git commit --amend -m [message] 使用一次新的commit，替代上一次提交</span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log  查看提交历史</span><br><span class="line">git log --oneline 以精简模式显示查看提交历史</span><br><span class="line">git log -p &lt;file&gt; 查看指定文件的提交历史</span><br><span class="line">git blame &lt;file&gt; 一列表方式查看指定文件的提交历史</span><br></pre></td></tr></table></figure>

<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff 显示暂存区和工作区的差异</span><br><span class="line">git diff filepath   filepath路径文件中，工作区与暂存区的比较差异</span><br><span class="line">git diff HEAD filepath 工作区与HEAD ( 当前工作分支)的比较差异</span><br><span class="line">git diff branchName filepath 当前分支的文件与branchName分支的文件的比较差异</span><br><span class="line">git diff commitId filepath 与某一次提交的比较差异</span><br></pre></td></tr></table></figure>

<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status  查看当前工作区暂存区变动</span><br><span class="line">git status -s  查看当前工作区暂存区变动，概要信息</span><br><span class="line">git status  --show-stash 查询工作区中是否有stash（暂存的文件）</span><br></pre></td></tr></table></figure>

<h3 id="git-pull-git-fetch"><a href="#git-pull-git-fetch" class="headerlink" title="git pull/git fetch"></a>git pull/git fetch</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull  拉取远程仓库所有分支更新并合并到本地分支。</span><br><span class="line">git pull origin master 将远程master分支合并到当前本地分支</span><br><span class="line">git pull origin master:master 将远程master分支合并到当前本地master分支，冒号后面表示本地分支</span><br><span class="line">git fetch --all  拉取所有远端的最新代码</span><br><span class="line">git fetch origin master 拉取远程最新master分支代码</span><br></pre></td></tr></table></figure>

<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master 将本地分支的更新全部推送到远程仓库master分支。</span><br><span class="line">git push origin -d &lt;branchname&gt;   删除远程branchname分支</span><br><span class="line">git push --tags 推送所有标签</span><br></pre></td></tr></table></figure>

<h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p><em>使用模式：</em><br><img data-src="/picture/git_reset.png" alt="avatar"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD --file 回退暂存区里的某个文件，回退到当前版本工作区状态</span><br><span class="line">git reset –-soft 目标版本号 可以把版本库上的提交回退到暂存区，修改记录保留</span><br><span class="line">git reset –-mixed 目标版本号 可以把版本库上的提交回退到工作区，修改记录保留</span><br><span class="line">git reset –-hard  可以把版本库上的提交彻底回退，修改的记录全部revert。</span><br></pre></td></tr></table></figure>
<p>代码git add到暂存区，并未commit提交，如何回退：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD file 取消暂存</span><br><span class="line">git checkout file 撤销修改</span><br></pre></td></tr></table></figure>


<hr>
<p>参考链接：<br><a href="https://git-scm.com/docs" target="_blank" rel="noopener">Git Reference</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git Book</a>  </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>平平淡淡的一天</title>
    <url>/2019/10/19/first-blog/</url>
    <content><![CDATA[<h1 id="我的一天："><a href="#我的一天：" class="headerlink" title="我的一天：  "></a>我的一天：  </h1><hr>
<p>上午：改bug  </p>
<hr>
<p>下午：<del><strong>摸摸鱼</strong></del> 远程学习</p>
<hr>
<p>晚上：打FF14  </p>
<hr>
<p><img data-src="/picture/first.jpg" alt="avatar"></p>
<hr>
]]></content>
      <categories>
        <category>摸鱼随笔</category>
      </categories>
      <tags>
        <tag>第一条博客</tag>
        <tag>非技术</tag>
      </tags>
  </entry>
</search>
