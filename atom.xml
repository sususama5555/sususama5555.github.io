<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sapphire</title>
  
  <subtitle>興趣使然的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://notspr.com/"/>
  <updated>2020-12-02T17:35:28.072Z</updated>
  <id>https://notspr.com/</id>
  
  <author>
    <name>Ryan Shu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix安装与部署</title>
    <link href="https://notspr.com/2020/12/01/zabbix-install-deploy/"/>
    <id>https://notspr.com/2020/12/01/zabbix-install-deploy/</id>
    <published>2020-11-30T16:05:19.000Z</published>
    <updated>2020-12-02T17:35:28.072Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;最近工作中和&lt;code&gt;Zabbix&lt;/code&gt;打了不少交道，大概分为两个用途。&lt;/p&gt;
&lt;p&gt;一种是对接它的API接口，例如创建账号、媒介、触发器、动作等，这种比较简单，照着API文档来就行了，这里不多赘述。&lt;/p&gt;
&lt;p&gt;另一种就是，使用Python脚本创建一套Zabbix告警推送的流程，将超过阈值的Zabbix告警按照指定的流程和动作推送到告警中心，而告警中心使用Zabbix作为其中一个告警源，不断拉取并且分发告警。这应该属于监控、告警等最常见的自动化运维的场景了，我对此也比较感兴趣，所有想从Zabbix较为基础的单机版安装及部署学习，也就有了这篇文章。&lt;/p&gt;
&lt;p&gt;事先已在本地开发环境的虚拟机中安装与部署成功，现在期望将Zabbix部署到阿里云的机器上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意：安装部署时，由于环境和版本的问题也踩了不少坑，希望能给读者一些启示。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;作者Zabbix网址&lt;/em&gt;&lt;/strong&gt;：&lt;a href=&quot;https://zabbix.notspr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zabbix.notspr.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="监控" scheme="https://notspr.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="Zabbix" scheme="https://notspr.com/categories/%E7%9B%91%E6%8E%A7/Zabbix/"/>
    
    
      <category term="监控" scheme="https://notspr.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="Zabbix" scheme="https://notspr.com/tags/Zabbix/"/>
    
      <category term="告警" scheme="https://notspr.com/tags/%E5%91%8A%E8%AD%A6/"/>
    
      <category term="开源" scheme="https://notspr.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="阿里云" scheme="https://notspr.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="安装部署" scheme="https://notspr.com/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Go语言之xorm使用实例</title>
    <link href="https://notspr.com/2020/11/30/go-xorm-sample/"/>
    <id>https://notspr.com/2020/11/30/go-xorm-sample/</id>
    <published>2020-11-29T16:52:27.000Z</published>
    <updated>2020-12-02T17:39:12.635Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;本文为 &lt;strong&gt;&lt;em&gt;xorm - Go 语言 ORM&lt;/em&gt;&lt;/strong&gt; 之后，对 &lt;strong&gt;&lt;em&gt;xorm&lt;/em&gt;&lt;/strong&gt; 的练习代码。&lt;/p&gt;
&lt;p&gt;学习Go语言之初，在 &lt;strong&gt;&lt;em&gt;Go语言之顺序编程&lt;/em&gt;&lt;/strong&gt; 这篇文章中，记录了条件、循环、选择、跳转等语句的练习情况。而最近又学到了 &lt;strong&gt;&lt;em&gt;xorm - Go 语言 ORM&lt;/em&gt;&lt;/strong&gt; 的内容，我就想把这两部分内容结合起来，实现一个简单的需求场景。&lt;/p&gt;
&lt;p&gt;需求具体为：使用shell作为交互界面，sqlite作为数据库，使用xorm实现类似于人员信息或者银行账户的增删改查，里面也会涉及到顺序编程的内容。&lt;/p&gt;
&lt;p&gt;你可以在&lt;code&gt;GitHub&lt;/code&gt;上找到本次代码：&lt;a href=&quot;https://github.com/sususama5555/go-xorm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/sususama5555/go-xorm&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://notspr.com/categories/Golang/"/>
    
      <category term="xorm" scheme="https://notspr.com/categories/Golang/xorm/"/>
    
    
      <category term="数据库" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORM" scheme="https://notspr.com/tags/ORM/"/>
    
      <category term="Golang" scheme="https://notspr.com/tags/Golang/"/>
    
      <category term="xorm" scheme="https://notspr.com/tags/xorm/"/>
    
      <category term="实战练习" scheme="https://notspr.com/tags/%E5%AE%9E%E6%88%98%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>xorm - Go 语言 ORM</title>
    <link href="https://notspr.com/2020/11/29/go-xorm/"/>
    <id>https://notspr.com/2020/11/29/go-xorm/</id>
    <published>2020-11-29T15:58:27.000Z</published>
    <updated>2020-12-01T17:48:45.217Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;xorm简介&quot;&gt;&lt;a href=&quot;#xorm简介&quot; class=&quot;headerlink&quot; title=&quot;xorm简介&quot;&gt;&lt;/a&gt;xorm简介&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;官方定义：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XORM is a Simple &amp;amp; Powerful ORM Framework for Go Programming Language&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。xorm的目标并不是让你完全不去学习SQL，我们认为SQL并不会为ORM所替代，但是ORM将可以解决绝大部分的简单SQL需求。xorm支持两种风格的混用。&lt;/p&gt;
&lt;p&gt;本文是xorm的操作手册，后续有原创文章记录xorm实例代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*&lt;u&gt;申明：以下大部分内容，是本人在遍历性阅读官方文档时的摘抄，不是本人原创，目的是迁移到自己博客，方便后续学习与查阅。小部分内容为个人代码。&lt;/u&gt;*&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://notspr.com/categories/Golang/"/>
    
      <category term="xorm" scheme="https://notspr.com/categories/Golang/xorm/"/>
    
    
      <category term="数据库" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORM" scheme="https://notspr.com/tags/ORM/"/>
    
      <category term="Golang" scheme="https://notspr.com/tags/Golang/"/>
    
      <category term="xorm" scheme="https://notspr.com/tags/xorm/"/>
    
      <category term="操作手册" scheme="https://notspr.com/tags/%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    
      <category term="搬运" scheme="https://notspr.com/tags/%E6%90%AC%E8%BF%90/"/>
    
  </entry>
  
  <entry>
    <title>ES6之 async 与 await</title>
    <link href="https://notspr.com/2020/11/25/es6-async-await/"/>
    <id>https://notspr.com/2020/11/25/es6-async-await/</id>
    <published>2020-11-25T15:53:32.000Z</published>
    <updated>2020-11-26T16:32:44.714Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;async&quot;&gt;&lt;a href=&quot;#async&quot; class=&quot;headerlink&quot; title=&quot;async&quot;&gt;&lt;/a&gt;async&lt;/h2&gt;&lt;p&gt;async 是 ES6 才有的与异步操作有关的关键字，和 Promise ， Generator 有很大关联的。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;[param[, param[, ... param]]]&lt;/span&gt;) &lt;/span&gt;&amp;#123; statements &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;name: 函数名称。&lt;/li&gt;
&lt;li&gt;param: 要传递给函数的参数的名称。&lt;/li&gt;
&lt;li&gt;statements: 函数体语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;返回值&quot;&gt;&lt;a href=&quot;#返回值&quot; class=&quot;headerlink&quot; title=&quot;返回值&quot;&gt;&lt;/a&gt;返回值&lt;/h3&gt;&lt;p&gt;一个&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;，这个promise要么会通过一个由async函数返回的值被解决，要么会通过一个从async函数中抛出的（或其中没有被捕获到的）异常被拒绝。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://notspr.com/categories/JavaScript/"/>
    
      <category term="异步" scheme="https://notspr.com/categories/JavaScript/%E5%BC%82%E6%AD%A5/"/>
    
    
      <category term="JavaScript" scheme="https://notspr.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://notspr.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="https://notspr.com/tags/ES6/"/>
    
      <category term="异步函数" scheme="https://notspr.com/tags/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>GO语言之Prometheus Exporter开发</title>
    <link href="https://notspr.com/2020/11/25/go-prometheus-export/"/>
    <id>https://notspr.com/2020/11/25/go-prometheus-export/</id>
    <published>2020-11-24T16:52:59.000Z</published>
    <updated>2020-12-01T17:48:45.202Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;蓝鲸监控通过 job 部署 prometheus 社区的 Exporter，对目标组件进行性能数据采集。接着 bkmetricbeat 从 Exporter 上周期拉取性能数据并通过数据通道上报。&lt;/p&gt;
&lt;h3 id=&quot;自定义组件采集导入流程&quot;&gt;&lt;a href=&quot;#自定义组件采集导入流程&quot; class=&quot;headerlink&quot; title=&quot;自定义组件采集导入流程&quot;&gt;&lt;/a&gt;自定义组件采集导入流程&lt;/h3&gt;&lt;p&gt;蓝鲸监控当前支持使用 go 编写 Exporter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在社区找到适合自己的 Exporter 或者编写新的 Exporter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将源码编译成二进制文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将编译的 Exporter 打成 zip 包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上传配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://notspr.com/categories/Golang/"/>
    
      <category term="Prometheus" scheme="https://notspr.com/categories/Golang/Prometheus/"/>
    
    
      <category term="Golang" scheme="https://notspr.com/tags/Golang/"/>
    
      <category term="Prometheus" scheme="https://notspr.com/tags/Prometheus/"/>
    
      <category term="Exporter" scheme="https://notspr.com/tags/Exporter/"/>
    
      <category term="监控" scheme="https://notspr.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python之全局解释器锁GIL</title>
    <link href="https://notspr.com/2020/11/23/python-GIL/"/>
    <id>https://notspr.com/2020/11/23/python-GIL/</id>
    <published>2020-11-22T16:54:11.000Z</published>
    <updated>2020-11-22T17:29:38.088Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;GIL(Global Interpreter Lock)，也称为全局解释器，官方解释为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要意思为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIL是一个互斥锁，它防止多个线程同时执行Python字节码。这个锁是必要的，主要是因为CPython的内存管理不是线程安全的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notspr.com/categories/Python/"/>
    
      <category term="GIL" scheme="https://notspr.com/categories/Python/GIL/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="多线程" scheme="https://notspr.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="GIL" scheme="https://notspr.com/tags/GIL/"/>
    
      <category term="全局解释器锁" scheme="https://notspr.com/tags/%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Python之使用pyvmomi管理VMware</title>
    <link href="https://notspr.com/2020/11/17/pyvmomi-sample/"/>
    <id>https://notspr.com/2020/11/17/pyvmomi-sample/</id>
    <published>2020-11-17T15:40:48.000Z</published>
    <updated>2020-11-17T17:15:18.438Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;官方定义：&lt;/p&gt;
&lt;p&gt;pyVmomi is the Python SDK for the VMware vSphere API that allows you to manage ESX, ESXi, and vCenter.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/vmware/pyvmomi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pyVmomi&lt;/a&gt; 是 VMware vSphere API 的一个 Python sdk，我们可以利用它来管理与交互vCenter、ESX、ESXi，获取我们需要的信息。&lt;/p&gt;
&lt;p&gt;由于工作中需要对接vCenter，实现虚拟化平台、数据中心、物理机、物理机和存储的指标采集及监控，也需要通过启停虚拟机网卡来实现灾备切换，所以本文结合了笔者的经验和 pyVmomi 官方案例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notspr.com/categories/Python/"/>
    
      <category term="虚拟化" scheme="https://notspr.com/categories/Python/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="VMware vSphere" scheme="https://notspr.com/tags/VMware-vSphere/"/>
    
      <category term="vCenter" scheme="https://notspr.com/tags/vCenter/"/>
    
      <category term="虚拟化" scheme="https://notspr.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="pyvmomi" scheme="https://notspr.com/tags/pyvmomi/"/>
    
  </entry>
  
  <entry>
    <title>Redis修炼之使用场景</title>
    <link href="https://notspr.com/2020/11/16/redis-use-case/"/>
    <id>https://notspr.com/2020/11/16/redis-use-case/</id>
    <published>2020-11-15T16:33:06.000Z</published>
    <updated>2020-11-16T15:57:06.572Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;接着Redis数据类型来说，来谈谈Redis的具体使用场景，首先回顾一下：&lt;/p&gt;
&lt;p&gt;Redis是一种基于键值对的NoSQL数据库，它的值主要由string（字符串），hash（哈希），list（列表），set（集合），zset（有序集合）五种基本数据结构构成。那么这些数据结构的使用场景有哪些？以下将用内部编码及使用场景的方式浅析Redis的五种数据类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis修炼" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis%E4%BF%AE%E7%82%BC/"/>
    
    
      <category term="Redis" scheme="https://notspr.com/tags/Redis/"/>
    
      <category term="Redis使用场景" scheme="https://notspr.com/tags/Redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>Redis修炼之数据类型</title>
    <link href="https://notspr.com/2020/11/12/redis-data-types/"/>
    <id>https://notspr.com/2020/11/12/redis-data-types/</id>
    <published>2020-11-11T16:34:08.000Z</published>
    <updated>2020-11-16T15:50:11.930Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、Redis 数据类型:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1、String（字符串）&lt;/strong&gt;&lt;br&gt;string 是 Redis 最基本的类型，理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Hash（哈希）&lt;/strong&gt;&lt;br&gt;Redis hash 是一个键值(key=&amp;gt;value)对集合。&lt;br&gt;Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis修炼" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis%E4%BF%AE%E7%82%BC/"/>
    
    
      <category term="Redis" scheme="https://notspr.com/tags/Redis/"/>
    
      <category term="数据库" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据类型" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python中构建MySql连接池</title>
    <link href="https://notspr.com/2020/11/09/python-mysql-pool/"/>
    <id>https://notspr.com/2020/11/09/python-mysql-pool/</id>
    <published>2020-11-09T15:17:35.000Z</published>
    <updated>2020-11-18T16:58:30.354Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;背景：为何要使用连接池&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据库连接是一种关键的、有限的、昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正是针对这个问题提出来的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySql修炼" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySql%E4%BF%AE%E7%82%BC/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="数据库" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库连接池" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
      <category term="MySql" scheme="https://notspr.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://notspr.com/2020/11/01/red-black-tree/"/>
    <id>https://notspr.com/2020/11/01/red-black-tree/</id>
    <published>2020-11-01T14:13:53.000Z</published>
    <updated>2020-11-16T15:55:46.089Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;红黑树其实就是一种数据结构，设计它的目的就是为了高效地进行增删改查，我们可以从二叉查找树逐渐引入到红黑树：&lt;/p&gt;
&lt;h3 id=&quot;一、二叉查找树&quot;&gt;&lt;a href=&quot;#一、二叉查找树&quot; class=&quot;headerlink&quot; title=&quot;一、二叉查找树&quot;&gt;&lt;/a&gt;一、二叉查找树&lt;/h3&gt;&lt;p&gt;特性：&lt;br&gt;（1）左子树上所有结点的值均小于或等于它的根结点的值；&lt;br&gt;（2）右子树上所有结点的值均大于或等于它的根结点的值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="红黑树" scheme="https://notspr.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>B树与B+树</title>
    <link href="https://notspr.com/2020/10/17/B-B-tree/"/>
    <id>https://notspr.com/2020/10/17/B-B-tree/</id>
    <published>2020-10-17T11:07:22.000Z</published>
    <updated>2020-11-18T16:48:33.696Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、B树和B-树的区别&quot;&gt;&lt;a href=&quot;#一、B树和B-树的区别&quot; class=&quot;headerlink&quot; title=&quot;一、B树和B+树的区别&quot;&gt;&lt;/a&gt;一、B树和B+树的区别&lt;/h2&gt;&lt;p&gt;很明显，我们要想弄清楚原因就要知道B树和B+树的区别。为了不长篇大论。我们直接给出他们的形式总结他们的特点。&lt;/p&gt;
&lt;h3 id=&quot;1、B树&quot;&gt;&lt;a href=&quot;#1、B树&quot; class=&quot;headerlink&quot; title=&quot;1、B树&quot;&gt;&lt;/a&gt;1、B树&lt;/h3&gt;&lt;p&gt;B树是一种自平衡的搜索树，形式很简单：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://notspr.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="B树与B+树" scheme="https://notspr.com/tags/B%E6%A0%91%E4%B8%8EB-%E6%A0%91/"/>
    
      <category term="数据结构" scheme="https://notspr.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>VMware vSphere 之 vCenter 指标采集</title>
    <link href="https://notspr.com/2020/10/09/vmware-vsphere/"/>
    <id>https://notspr.com/2020/10/09/vmware-vsphere/</id>
    <published>2020-10-09T10:06:10.000Z</published>
    <updated>2020-11-18T16:58:27.291Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;VMware vSphere 是 VMware 的虚拟化平台，可将数据中心转换为包括 CPU、存储和网络资源的聚合计算基础架构。vSphere 将这些基础架构作为一个统一的运行环境进行管理，并提供工具来管理加入该环境的数据中心。&lt;/p&gt;
&lt;p&gt;在对接或采集VMware vSphere虚拟化平台的场景中，比如配置八爪鱼，需要对其中的虚拟化数据中心、虚拟化集群、物理机、虚拟机、存储等指标进行多方位的采集，我们根据VMware提供的相应sdk接口，对接到蓝鲸的SaaS中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notspr.com/categories/Python/"/>
    
      <category term="VMware" scheme="https://notspr.com/categories/Python/VMware/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="VMware vSphere" scheme="https://notspr.com/tags/VMware-vSphere/"/>
    
      <category term="vCenter" scheme="https://notspr.com/tags/vCenter/"/>
    
      <category term="虚拟化" scheme="https://notspr.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="技术文章" scheme="https://notspr.com/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>记一次持续到凌晨两点半的coding</title>
    <link href="https://notspr.com/2020/09/26/2020-09-26/"/>
    <id>https://notspr.com/2020/09/26/2020-09-26/</id>
    <published>2020-09-25T18:34:12.000Z</published>
    <updated>2020-11-18T16:58:23.055Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;二叉搜索树的后序遍历序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题干&lt;/strong&gt;：&lt;br&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。&lt;br&gt;如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法修炼" scheme="https://notspr.com/categories/%E7%AE%97%E6%B3%95%E4%BF%AE%E7%82%BC/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="剑指offer" scheme="https://notspr.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="二叉搜索树" scheme="https://notspr.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>企业(政务)微信浏览器的前端开发兼容问题</title>
    <link href="https://notspr.com/2020/08/20/weixin-app/"/>
    <id>https://notspr.com/2020/08/20/weixin-app/</id>
    <published>2020-08-20T14:50:54.000Z</published>
    <updated>2020-11-16T15:50:11.954Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;windows版本的企业（政务）微信浏览器基于Chromium 53版本，对ES7某些新特性不兼容&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&quot;/2020/08/20/weixin-app/weixin_browser.png&quot; class&gt;
    
    </summary>
    
    
      <category term="前端开发指南" scheme="https://notspr.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="前端" scheme="https://notspr.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="微信轻应用" scheme="https://notspr.com/tags/%E5%BE%AE%E4%BF%A1%E8%BD%BB%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python之Celery</title>
    <link href="https://notspr.com/2020/08/20/celery/"/>
    <id>https://notspr.com/2020/08/20/celery/</id>
    <published>2020-08-19T17:11:44.000Z</published>
    <updated>2020-12-02T17:41:09.568Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Celery 是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的一系列工具。&lt;/li&gt;
&lt;li&gt;Celery 是一款专注于实时处理的异步任务队列，可用于处理实时数据以及任务调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Celery架构&quot;&gt;&lt;a href=&quot;#Celery架构&quot; class=&quot;headerlink&quot; title=&quot;Celery架构&quot;&gt;&lt;/a&gt;Celery架构&lt;/h3&gt;&lt;p&gt;Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成。&lt;/p&gt;
&lt;img data-src=&quot;/2020/08/20/celery/celery-architecture.png&quot; class&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notspr.com/categories/Python/"/>
    
      <category term="Celery" scheme="https://notspr.com/categories/Python/Celery/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="Redis" scheme="https://notspr.com/tags/Redis/"/>
    
      <category term="Celery" scheme="https://notspr.com/tags/Celery/"/>
    
      <category term="Django" scheme="https://notspr.com/tags/Django/"/>
    
      <category term="RabbitMQ" scheme="https://notspr.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>初识 - Zabbix</title>
    <link href="https://notspr.com/2020/07/02/zabbix-summary/"/>
    <id>https://notspr.com/2020/07/02/zabbix-summary/</id>
    <published>2020-07-01T16:27:07.000Z</published>
    <updated>2020-12-01T17:20:37.064Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zabbix-介绍&quot;&gt;&lt;a href=&quot;#Zabbix-介绍&quot; class=&quot;headerlink&quot; title=&quot;Zabbix 介绍&quot;&gt;&lt;/a&gt;Zabbix 介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。&lt;/li&gt;
&lt;li&gt;Zabbix 是一个企业级分布式开源监控解决方案。&lt;/li&gt;
&lt;li&gt;Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。&lt;/li&gt;
&lt;li&gt;Zabbix 支持主动轮询（polling）和被动捕获（trapping）。Zabbix所有的报表、统计数据和配置参数都可以通过基于 Web 的前端页面进行访问。基于 Web 的前端页面确保您可以在任何地方访问您监控的网络状态和服务器健康状况。适当的配置后，Zabbix 可以在监控 IT 基础设施方面发挥重要作用。无论是对于有少量服务器的小型组织，还是拥有大量服务器的大企业而言，同样适用。&lt;/li&gt;
&lt;li&gt;Zabbix 是免费的。Zabbix 是根据 GPL 通用公共许可证的第二版编写和发布的。这意味着产品源代码是免费发布的，可供公共使用。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="监控" scheme="https://notspr.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="Zabbix" scheme="https://notspr.com/categories/%E7%9B%91%E6%8E%A7/Zabbix/"/>
    
    
      <category term="监控" scheme="https://notspr.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="Zabbix" scheme="https://notspr.com/tags/Zabbix/"/>
    
      <category term="告警" scheme="https://notspr.com/tags/%E5%91%8A%E8%AD%A6/"/>
    
      <category term="开源" scheme="https://notspr.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="初识" scheme="https://notspr.com/tags/%E5%88%9D%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Python 垃圾回收机制</title>
    <link href="https://notspr.com/2020/06/26/python-garbage-collection/"/>
    <id>https://notspr.com/2020/06/26/python-garbage-collection/</id>
    <published>2020-06-25T16:43:00.000Z</published>
    <updated>2020-11-25T16:54:06.249Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;python采用的是&lt;strong&gt;引用计数&lt;/strong&gt;机制为主，&lt;strong&gt;标记-清除&lt;/strong&gt;和&lt;strong&gt;分代收集&lt;/strong&gt;两种机制为辅的策略。&lt;/p&gt;
&lt;h3 id=&quot;引用计数&quot;&gt;&lt;a href=&quot;#引用计数&quot; class=&quot;headerlink&quot; title=&quot;引用计数&quot;&gt;&lt;/a&gt;引用计数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python语言默认采用的垃圾收集机制是『引用计数法 &lt;code&gt;Reference Counting&lt;/code&gt;』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。&lt;/li&gt;
&lt;li&gt;『引用计数法』的原理是：每个对象维护一个&lt;code&gt;ob_ref&lt;/code&gt;字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数&lt;code&gt;ob_ref&lt;/code&gt;加&lt;code&gt;1&lt;/code&gt;，每当该对象的引用失效时计数&lt;code&gt;ob_ref&lt;/code&gt;减&lt;code&gt;1&lt;/code&gt;，一旦对象的引用计数为&lt;code&gt;0&lt;/code&gt;，该对象立即被回收，对象占用的内存空间将被释放。&lt;/li&gt;
&lt;li&gt;它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notspr.com/categories/Python/"/>
    
      <category term="基础原理" scheme="https://notspr.com/categories/Python/%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="垃圾回收" scheme="https://notspr.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="GC" scheme="https://notspr.com/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>理解Python协程(Coroutine)</title>
    <link href="https://notspr.com/2020/06/22/python-coroutine/"/>
    <id>https://notspr.com/2020/06/22/python-coroutine/</id>
    <published>2020-06-21T17:07:45.000Z</published>
    <updated>2020-12-01T17:15:12.003Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;由于GIL的存在，导致Python多线程性能甚至比单线程更糟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIL: 全局解释器锁（英语：Global Interpreter Lock，缩写GIL），是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。[1]即便在多核心处理器上，使用 GIL 的解释器也只允许同一时间执行一个线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是出现了协程（Coroutine）这么个东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协程: 协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;协程由于由程序主动控制切换，没有线程切换的开销，所以执行效率极高。对于IO密集型任务非常适用，如果是cpu密集型，推荐多进程+协程的方式。&lt;/p&gt;
&lt;p&gt;在Python3.4之前，官方没有对协程的支持，存在一些三方库的实现，比如gevent和Tornado。3.4之后就内置了asyncio标准库，官方真正实现了协程这一特性。&lt;/p&gt;
&lt;p&gt;而Python对协程的支持，是通过Generator实现的，协程是遵循某些规则的生成器。因此，我们在了解协程之前，我们先要学习生成器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://notspr.com/categories/Python/"/>
    
      <category term="协程" scheme="https://notspr.com/categories/Python/%E5%8D%8F%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://notspr.com/tags/Python/"/>
    
      <category term="协程" scheme="https://notspr.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="生成器" scheme="https://notspr.com/tags/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用 uWSGI + Nginx 部署 Django 项目</title>
    <link href="https://notspr.com/2020/05/20/uWSGI-Nginx-Django/"/>
    <id>https://notspr.com/2020/05/20/uWSGI-Nginx-Django/</id>
    <published>2020-05-20T11:47:02.000Z</published>
    <updated>2020-11-16T15:57:45.306Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在开发&lt;kbd&gt;Django&lt;/kbd&gt;框架时，我们通常使用&lt;kbd&gt;python manage.py runserver&lt;/kbd&gt;来运行本地服务,但是这只适用开发环境中使用，此时启动的Django项目通过127.0.0.1:8000的本地端口进行转发，也只能在本地环境下进行访问。那么我们基于Django的SaaS是怎样发布在公网、局域网环境下，并且通过域名访问站点的呢？通常的方案是：我们就需要用到&lt;kbd&gt;uWSGI&lt;/kbd&gt;配合&lt;kbd&gt;Nginx(Apache)&lt;/kbd&gt;进行代理转发。以下是笔者在实践此方案的过程中整理的一些要点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://notspr.com/categories/Django/"/>
    
    
      <category term="技术文章" scheme="https://notspr.com/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
      <category term="Django" scheme="https://notspr.com/tags/Django/"/>
    
      <category term="uWSGI" scheme="https://notspr.com/tags/uWSGI/"/>
    
      <category term="Nginx" scheme="https://notspr.com/tags/Nginx/"/>
    
  </entry>
  
</feed>
